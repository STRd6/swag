(function(pkg) {
  (function() {
  var annotateSourceURL, cacheFor, circularGuard, defaultEntryPoint, fileSeparator, generateRequireFn, global, isPackage, loadModule, loadPackage, loadPath, normalizePath, rootModule, startsWith,
    __slice = [].slice;

  fileSeparator = '/';

  global = window;

  defaultEntryPoint = "main";

  circularGuard = {};

  rootModule = {
    path: ""
  };

  loadPath = function(parentModule, pkg, path) {
    var cache, localPath, module, normalizedPath;
    if (startsWith(path, '/')) {
      localPath = [];
    } else {
      localPath = parentModule.path.split(fileSeparator);
    }
    normalizedPath = normalizePath(path, localPath);
    cache = cacheFor(pkg);
    if (module = cache[normalizedPath]) {
      if (module === circularGuard) {
        throw "Circular dependency detected when requiring " + normalizedPath;
      }
    } else {
      cache[normalizedPath] = circularGuard;
      try {
        cache[normalizedPath] = module = loadModule(pkg, normalizedPath);
      } finally {
        if (cache[normalizedPath] === circularGuard) {
          delete cache[normalizedPath];
        }
      }
    }
    return module.exports;
  };

  normalizePath = function(path, base) {
    var piece, result;
    if (base == null) {
      base = [];
    }
    base = base.concat(path.split(fileSeparator));
    result = [];
    while (base.length) {
      switch (piece = base.shift()) {
        case "..":
          result.pop();
          break;
        case "":
        case ".":
          break;
        default:
          result.push(piece);
      }
    }
    return result.join(fileSeparator);
  };

  loadPackage = function(pkg) {
    var path;
    path = pkg.entryPoint || defaultEntryPoint;
    return loadPath(rootModule, pkg, path);
  };

  loadModule = function(pkg, path) {
    var args, context, dirname, file, module, program, values;
    if (!(file = pkg.distribution[path])) {
      throw "Could not find file at " + path + " in " + pkg.name;
    }
    program = annotateSourceURL(file.content, pkg, path);
    dirname = path.split(fileSeparator).slice(0, -1).join(fileSeparator);
    module = {
      path: dirname,
      exports: {}
    };
    context = {
      require: generateRequireFn(pkg, module),
      global: global,
      module: module,
      exports: module.exports,
      PACKAGE: pkg,
      __filename: path,
      __dirname: dirname
    };
    args = Object.keys(context);
    values = args.map(function(name) {
      return context[name];
    });
    Function.apply(null, __slice.call(args).concat([program])).apply(module, values);
    return module;
  };

  isPackage = function(path) {
    if (!(startsWith(path, fileSeparator) || startsWith(path, "." + fileSeparator) || startsWith(path, ".." + fileSeparator))) {
      return path.split(fileSeparator)[0];
    } else {
      return false;
    }
  };

  generateRequireFn = function(pkg, module) {
    if (module == null) {
      module = rootModule;
    }
    if (pkg.name == null) {
      pkg.name = "ROOT";
    }
    if (pkg.scopedName == null) {
      pkg.scopedName = "ROOT";
    }
    return function(path) {
      var otherPackage;
      if (isPackage(path)) {
        if (!(otherPackage = pkg.dependencies[path])) {
          throw "Package: " + path + " not found.";
        }
        if (otherPackage.name == null) {
          otherPackage.name = path;
        }
        if (otherPackage.scopedName == null) {
          otherPackage.scopedName = "" + pkg.scopedName + ":" + path;
        }
        return loadPackage(otherPackage);
      } else {
        return loadPath(module, pkg, path);
      }
    };
  };

  if (typeof exports !== "undefined" && exports !== null) {
    exports.generateFor = generateRequireFn;
  } else {
    global.Require = {
      generateFor: generateRequireFn
    };
  }

  startsWith = function(string, prefix) {
    return string.lastIndexOf(prefix, 0) === 0;
  };

  cacheFor = function(pkg) {
    if (pkg.cache) {
      return pkg.cache;
    }
    Object.defineProperty(pkg, "cache", {
      value: {}
    });
    return pkg.cache;
  };

  annotateSourceURL = function(program, pkg, path) {
    return "" + program + "\n//# sourceURL=" + pkg.scopedName + "/" + path;
  };

}).call(this);

//# sourceURL=main.coffee
  window.require = Require.generateFor(pkg);
})({
  "source": {
    "LICENSE": {
      "path": "LICENSE",
      "content": "The MIT License (MIT)\n\nCopyright (c) 2015 Daniel X Moore\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n",
      "mode": "100644",
      "type": "blob"
    },
    "README.md": {
      "path": "README.md",
      "content": "# swag\nServerless Working Applications Group\n",
      "mode": "100644",
      "type": "blob"
    },
    "pixie.cson": {
      "path": "pixie.cson",
      "content": "remoteDependencies: [\n  \"https://sdk.amazonaws.com/js/aws-sdk-2.1.22.js\"\n  \"http://cdn.pubnub.com/pubnub-3.7.1.js\"\n]\n",
      "mode": "100644"
    },
    "main.coffee.md": {
      "path": "main.coffee.md",
      "content": "\\*S\\*W\\*A\\*G\\*\n\nLet's use AWS Cognitor to be all serverless all the time!\n\n    require \"./aws\"\n    # require \"./pubnub\"\n",
      "mode": "100644"
    },
    "aws.coffee": {
      "path": "aws.coffee",
      "content": "require \"./lib/aws-cognito.min\"\n\nAWS.config.update({region: 'us-east-1'})\n\nAWS.config.credentials = new AWS.CognitoIdentityCredentials\n  IdentityPoolId: 'us-east-1:4fe22da5-bb5e-4a78-a260-74ae0a140bf9'\n\ncognitoSyncTest = ->\n  AWS.config.credentials.get ->\n    # NOTE: This require the code in lib/aws-cognito to work\n    syncClient = new AWS.CognitoSyncManager()\n  \n    syncClient.openOrCreateDataset 'yolo', (err, dataset) ->\n      console.log arguments\n  \n      if !err\n        dataset.put 'duder', {test: \"json\"}, (err, record) ->\n          console.log arguments\n  \n          dataset.get 'duder', ->\n            console.log arguments\n\ndynamoDBTest = ->\n  # YoloDB\n  db = new AWS.DynamoDB()\n  db.listTables (err, data) ->\n    console.log(data.TableNames)\n  \n  table = new AWS.DynamoDB\n    params: \n      TableName: 'swag'\n  \n  key = 'UNIQUE_KEY_ID'\n  time = \"#{+new Date}\"\n  \n  # Write the item to the table\n  itemParams = \n    Item:\n      id: {S: key}\n      created_at: {S: time}\n      data: {S: 'data'}\n  \n  table.putItem itemParams, ->\n    # Read the item from the table\n    table.getItem {Key: {id: {S: key}}}, (err, data) ->\n      if err\n        console.log err\n      else\n        console.log data\n",
      "mode": "100644"
    },
    "pubnub.coffee": {
      "path": "pubnub.coffee",
      "content": "global.pubnub = PUBNUB.init\n  publish_key: 'pub-c-010c4d6a-9e0f-43cc-87d3-d8e5ac1fb605'\n  subscribe_key: 'sub-c-df841964-de59-11e4-a1d1-0619f8945a4f'\n\npub = ->\n  console.log \"yolo\"\n  pubnub.publish\n    channel: 'demo_tutorial'\n    message:\n      color: \"blue\"\n\npubnub.subscribe\n  channel: 'demo_tutorial'\n  message: ->\n    console.log \"Message\", arguments\n  connect: ->\n    console.log \"Connect\", arguments\n    pub()\n  disconnect: ->\n    console.log \"Disconnect\", arguments\n  error: ->\n    console.error \"Error\", arguments\n\nconsole.log \"wat?\"\n",
      "mode": "100644"
    },
    "lib/dynamodb-doc.js": {
      "path": "lib/dynamodb-doc.js",
      "content": "\n\n/**\n * Creates an instance of Condition that is used by the DynamoDB Document client.\n *\n * @param {string} key The attribute name being conditioned on.\n * @param {string} operator The operator in the conditional clause. (See aws sdk docs for full list of operators)\n * @param val<n> Potential <n>nd element in what would be the AttributeValueList (optional)\n * @return {Condition} Condition for your DynamoDB request.\n */\nfunction DynamoDBCondition(key, operator) { /* and variable arguments. */\n    var datatypes = typeof(window) === \"undefined\" ? require(\"./datatypes\").DynamoDBDatatype\n                : window.DynamoDBDatatype;\n\n    var t = new datatypes();\n\n    var args = Array.prototype.slice.call(arguments, 2);\n\n    var CondObj = function Condition(key, operator, args) {\n            this.key = key;\n            this.operator = operator;\n            this.args = args;\n\n            // for comatibility\n            this.val1 = args[0];\n            this.val2 = args[1];\n\n            this.format = function() {\n                var formatted = {};\n                var attrValueList = [];\n\n                for (var i=0; i<this.args.length; i++) {\n                    if (this.args[i] !== undefined) {\n                        attrValueList.push(t.formatDataType(this.args[i]));\n                    }\n                }\n                if (attrValueList.length > 0) {\n                    formatted.AttributeValueList = attrValueList;\n                }\n                formatted.ComparisonOperator = this.operator;\n\n                return formatted;\n            };\n    };\n\n    var cond = new CondObj(key, operator, args);\n    cond.prototype = Object.create(Object.prototype);\n    cond.prototype.instanceOf  = \"DynamoDBConditionObject\";\n\n    return cond;\n}\n\nif (typeof(module) !== \"undefined\") {\n    var exports = module.exports = {};\n    exports.DynamoDBCondition = DynamoDBCondition;\n}\n\nwindow.DynamoDBCondition = DynamoDBCondition;\n\n\n/**\n * @class Creates a DynamoDBDatatype that takes care of all datatype handling.\n *\n * @name DynamoDBDatatype\n */\nfunction DynamoDBDatatype() {\n    var AWS = typeof(window) === \"undefined\" ? require(\"aws-sdk\") : window.AWS;\n    var Uint8ArrayError = \"Uint8Array can only be used for Binary in Browser.\";\n    var ScalarDatatypeError = \"Unrecognized Scalar Datatype to be formatted.\";\n    var GeneralDatatypeError = \"Unrecognized Datatype to be formatted.\";\n    var BinConversionError = \"Need to pass in Buffer or Uint8Array. \";\n    var StrConversionError = \"Need to pass in string primitive to be converted to binary.\";\n\n    function isScalarType(dataType) {\n\n        var type = typeof(dataType);\n        return  type === \"number\"  ||\n                type === \"string\"  ||\n                type === \"boolean\" ||\n                (dataType instanceof(Uint8Array) && AWS.util.isBrowser()) ||\n                dataType instanceof(AWS.util.Buffer) ||\n                dataType === null;\n    }\n\n    function isSetType(dataType) {\n        return dataType.datatype === \"SS\" ||\n                dataType.datatype === \"NS\" ||\n                dataType.datatype === \"BS\";\n    }\n\n    function isRecursiveType(dataType) {\n\n        return Array.isArray(dataType) ||\n                typeof(dataType) === \"object\";\n    }\n\n    function formatSetValues(datatype, values) {\n        if(datatype === \"NS\") {\n            return values.map(function (n) {\n                return n.toString();\n            });\n        } else {\n          return values;\n        }\n    };\n\n    function formatRecursiveType(dataType) {\n\n        var recursiveDoc = {};\n\n        var value = {};\n        var type = \"M\";\n        if (Array.isArray(dataType)) {\n            value = [];\n            type = \"L\";\n        }\n\n        for (var key in dataType) {\n            value[key] = this.formatDataType(dataType[key]);\n        }\n\n        recursiveDoc[type] = value;\n        return recursiveDoc;\n    }\n\n    /** @throws Uint8ArrayError, ScalarDatatypeError\n     *  @private */\n    function formatScalarType(dataType) {\n\n        if (dataType == null) {\n            return { \"NULL\" : true };\n        }\n\n        var type = typeof(dataType);\n        if (type === \"string\") {\n            return { \"S\" : dataType };\n        } else if (type === \"number\") {\n            return { \"N\" : String(dataType) };\n        } else if (type === \"boolean\") {\n            return { \"BOOL\" : dataType };\n        } else if (dataType instanceof(AWS.util.Buffer)) {\n            return { \"B\" : dataType };\n        } else if (dataType instanceof(Uint8Array)) {\n            if (AWS.util.isBrowser()) {\n                return { \"B\" : dataType };\n            } else {\n                throw new Error(Uint8ArrayError);\n            }\n        } else {\n            throw new Error(ScalarDatatypeError);\n        }\n    }\n\n    /**\n     * Formats Javascript datatypes into DynamoDB wire format.\n     *\n     * @name formatDataType\n     * @function\n     * @memberOf DynamoDBDatatype#\n     * @param dataType Javascript datatype (i.e. string, number. For full information, check out the README).\n     * @return {object} DynamoDB JSON-like wire format.\n     * @throws GeneralDatatypeError\n     */\n    this.formatDataType = function(dataType) {\n\n        if (isScalarType(dataType)) {\n            return formatScalarType(dataType);\n        } else if (isSetType(dataType)) {\n            return dataType.format();\n        } else if (isRecursiveType(dataType)) {\n            return formatRecursiveType.call(this, dataType);\n        }  else {\n            throw new Error(GeneralDatatypeError);\n        }\n\n    };\n\n    function str2Bin(value) {\n        if (typeof(value) !== \"string\") {\n            throw new Error(StrConversionError);\n        }\n\n        if (AWS.util.isBrowser()) {\n            var len = value.length;\n            var bin = new Uint8Array(new ArrayBuffer(len));\n            for (var i = 0; i < len; i++) {\n                bin[i] = value.charCodeAt(i);\n            }\n            return bin;\n        } else {\n            return AWS.util.Buffer(value);\n        }\n    }\n\n    /**\n     * Utility to convert a String to a Binary object.\n     *\n     * @function strToBin\n     * @memberOf DynamoDBDatatype#\n     * @param {string} value String value to converted to Binary object.\n     * @return {object} (Buffer | Uint8Array) depending on Node or browser.\n     * @throws StrConversionError\n     */\n    this.strToBin = function(value) {\n        return str2Bin.call(this, value);\n    };\n\n    function bin2Str(value) {\n        if (!(value instanceof(AWS.util.Buffer)) && !(value instanceof(Uint8Array))) {\n            throw new Error(BinConversionError);\n        }\n\n        if (AWS.util.isBrowser()) {\n            return String.fromCharCode.apply(null, value);\n        } else {\n            return value.toString(\"utf-8\").valueOf();\n        }\n    }\n\n    /**\n     * Utility to convert a Binary object into a decoded String.\n     *\n     * @function binToStr\n     * @memberOf DynamoDBDatatype#\n     * @param {object} value Binary value (Buffer | Uint8Array) depending on Node or browser.\n     * @return {string} decoded String in UTF-8\n     * @throws BinConversionError\n     */\n    this.binToStr = function(value) {\n        return bin2Str.call(this, value);\n    };\n\n    /**\n     * Utility to create the DynamoDB Set Datatype.\n     *\n     * @function createSet\n     * @memberOf DynamoDBDatatype#\n     * @param {array} set An array that contains elements of the same typed as defined by {type}.\n     * @param {string} type Can only be a [S]tring, [N]umber, or [B]inary type.\n     * @return {Set} Custom Set object that follow {type}.\n     * @throws InvalidSetType, InconsistentType\n     */\n    this.createSet = function(set, type) {\n        if (type !== \"N\" && type !== \"S\" && type !== \"B\") {\n            throw new Error(type + \" is an invalid type for Set\");\n        }\n\n        var setObj = function Set(set, type) {\n            this.datatype = type + \"S\";\n            this.contents = {};\n\n            this.add = function(value) {\n                if (this.datatype === \"SS\" && typeof(value) === \"string\") {\n                    this.contents[value] = value;\n                } else if (this.datatype === \"NS\" && typeof(value) === \"number\") {\n                    this.contents[value] = value;\n                } else if (this.datatype === \"BS\" && value instanceof(AWS.util.Buffer)) {\n                    this.contents[bin2Str(value)] = value;\n                } else if (this.datatype === \"BS\" && value instanceof(Uint8Array)) {\n                    if (AWS.util.isBrowser()) {\n                        this.contents[bin2Str(value)] = value;\n                    } else {\n                        throw new Error(Uint8ArrayError);\n                    }\n                } else {\n                    throw new Error(\"Inconsistent in this \" + type + \" Set\");\n                }\n            };\n\n            this.contains = function(content) {\n                var value = content;\n                if (content instanceof AWS.util.Buffer || content instanceof(Uint8Array)) {\n                    value = bin2Str(content);\n                }\n                if (this.contents[value] === undefined) {\n                    return false;\n                }\n                return true;\n            };\n\n            this.remove = function(content) {\n                var value = content;\n                if (content instanceof AWS.util.Buffer || content instanceof(Uint8Array)) {\n                    value = bin2Str(content);\n                }\n                delete this.contents[value];\n            };\n\n            this.toArray = function() {\n                var keys = Object.keys(this.contents);\n                var arr = [];\n\n                for (var keyIndex in keys) {\n                    var key = keys[keyIndex];\n                    if (this.contents.hasOwnProperty(key)) {\n                        arr.push(this.contents[key]);\n                    }\n                }\n\n                return arr;\n            };\n\n            this.format = function() {\n                var values = this.toArray();\n                var result = {};\n                result[this.datatype] = formatSetValues(this.datatype, values);\n                return result;\n            };\n\n            if (set) {\n                for (var index in set) {\n                    this.add(set[index]);\n                }\n            }\n        };\n\n        return new setObj(set, type);\n    };\n\n    /**\n     * Formats DynamoDB wire format into javascript datatypes.\n     *\n     * @name formatWireType\n     * @function\n     * @memberOf DynamoDBDatatype#\n     * @param {string} key Key that represents the type of the attribute value\n     * @param value Javascript datatype of the attribute value produced by DynamoDB\n     * @throws GeneralDatatypeError\n     */\n    this.formatWireType = function(key, value) {\n        switch (key) {\n            case \"S\":\n            case \"B\":\n            case \"BOOL\":\n                return value;\n            case \"N\":\n                return Number(value);\n            case \"NULL\":\n                return null;\n            case \"L\":\n                for (var lIndex = 0; lIndex < value.length; lIndex++) {\n                    var lValue = value[lIndex];\n                    var lKey = Object.keys(lValue)[0];\n                    value[lIndex] = this.formatWireType(lKey, lValue[lKey]);\n                }\n                return value;\n            case \"M\":\n                for (var mIndex in value) {\n                    var mValue = value[mIndex];\n                    var mKey = Object.keys(mValue)[0];\n                    value[mIndex] = this.formatWireType(mKey, mValue[mKey]);\n                }\n                return value;\n            case \"SS\":\n                return new this.createSet(value, \"S\");\n            case \"NS\":\n                value = value.map(function(each) { return Number(each);});\n                return new this.createSet(value, \"N\");\n            case \"BS\":\n                return new this.createSet(value, \"B\");\n            default:\n                throw \"Service returned unrecognized datatype \" + key;\n        }\n    }\n}\n\nif (typeof(module) !== \"undefined\") {\n    var exports = module.exports = {};\n    exports.DynamoDBDatatype = DynamoDBDatatype;\n}\n\nwindow.DynamoDBDatatype = DynamoDBDatatype;\n\n\n/**\n * Create an instance of the DynamoDB Document client.\n *\n * @constructor\n * @class DynamoDB\n * @param {AWS.DynamoDB} dynamoDB An instance of the service provided AWS SDK (optional).\n * @returns {DynamoDB} Modified version of the service for Document support.\n */\nfunction DynamoDB(dynamoDB) {\n    var isBrowser = typeof(window) === \"undefined\";\n    var AWS = isBrowser ? require(\"aws-sdk\") : window.AWS;\n\n    var condition = isBrowser ? require(\"./condition\").DynamoDBCondition : window.DynamoDBCondition;\n\n    var datatypes = isBrowser ? require(\"./datatypes\").DynamoDBDatatype : window.DynamoDBDatatype;\n    var t = new datatypes();\n\n    var formatter = isBrowser ? require(\"./formatter\").DynamoDBFormatter : window.DynamoDBFormatter;\n    var f = new formatter();\n\n    var service = dynamoDB || new AWS.DynamoDB();\n\n    var setupLowLevelRequestListeners = service.setupRequestListeners;\n    service.setupRequestListeners = function(request) {\n        setupLowLevelRequestListeners.call(this, request);\n\n        request._events.validate.unshift(f.formatInput);\n        request.on(\"extractData\", f.formatOutput);\n    };\n\n    /**\n     * Utility to create Set Object for requests.\n     *\n     * @function Set\n     * @memberOf DynamoDB#\n     * @param {array} set An array that contains elements of the same typed as defined by {type}.\n     * @param {string} type Can only be a [S]tring, [N]umber, or [B]inary type.\n     * @return {Set} Custom Set object that follow {type}.\n     * @throws InvalidSetType, InconsistentType\n     */\n    service.__proto__.Set = function(set, type) {\n        return t.createSet(set, type);\n    };\n\n    /**\n    * Creates an instance of Condition and should be used with the DynamoDB client.\n    *\n    * @function Condition\n    * @memberOf DynamoDB#\n    * @param {string} key The attribute name being conditioned.\n    * @param {string} operator The operator in the conditional clause. (See lower level docs for full list of operators)\n    * @param val1 Potential first element in what would be the AttributeValueList\n    * @param val* Potential *nd element in what would be the AttributeValueList (optional)\n    * @return {Condition} Condition for your DynamoDB request.\n    */\n    service.__proto__.Condition = function(/*key, operator, val1, val2, ...*/) {\n        return condition.apply(this, arguments);\n    };\n\n    /**\n     * Utility to convert a String to the necessary Binary object.\n     *\n     * @function StrToBin\n     * @memberOf DynamoDB#\n     * @param {string} value String value to converted to Binary object.\n     * @return {object} Return value will be a Buffer or Uint8Array in the browser.\n     * @throws StrConversionError\n     */\n    service.__proto__.StrToBin = function(value) {\n        return t.strToBin(value);\n    };\n    /**\n     * Utility to convert a Binary object into its String equivalent.\n     *\n     * @function BinToStr\n     * @memberOf DynamoDB#\n     * @param {object} value Binary value (Buffer | Uint8Array) depending on environment.\n     * @return {string} Return value will be the string representation of the Binary object.\n     * @throws BinConversionError\n     */\n    service.__proto__.BinToStr = function(value) {\n        return t.binToStr(value);\n    };\n\n    return service;\n}\n\nif (typeof(module) !== \"undefined\") {\n    var exports = module.exports = {};\n    exports.DynamoDB = DynamoDB;\n}\n\nwindow.DynamoDB = DynamoDB;\n\n\n/**\n *  Create an instance of the DynamoDBFormatter.\n *  @constructor\n *  @return {DynamoDBFormatter} A Formatter object that provides methods for formatting DynamoDB requests and responses.\n */\nfunction DynamoDBFormatter() {\n    var datatypes = typeof(window) === \"undefined\" ? require(\"./datatypes\").DynamoDBDatatype : window.DynamoDBDatatype;\n    var t = new datatypes();\n    var EmptyConditionArray = \"Need to pass in an array with 1 or more Condition Objects.\";\n    var BadElementInConditionArray = \"Only Condition objects are allowed as members of the array.\";\n    var InvalidCondition = \"Need to pass in a valid Condition Object.\";\n\n    function formatAttrValInput(attrValueMap) {\n        var attributeValueMap = {};\n        for (var attr in attrValueMap) {\n            var value = attrValueMap[attr];\n            attributeValueMap[attr] = t.formatDataType(value);\n        }\n        return attributeValueMap;\n    }\n\n    function formatConditions(conditions) {\n        if (conditions.prototype && conditions.prototype.instanceOf === \"DynamoDBConditionObject\") {\n            conditions = [conditions];\n        } else {\n            if (Array.isArray(conditions)) {\n                if (conditions.length === 0) {\n                    throw new Error(EmptyConditionArray);\n                }\n                for (var index in conditions) {\n                    var condition = conditions[index];\n                    if (!(condition.prototype) || !(condition.prototype.instanceOf === \"DynamoDBConditionObject\")) {\n                        throw new Error(BadElementInConditionArray);\n                    }\n                }\n            } else {\n                throw new Error(InvalidCondition);\n            }\n        }\n\n        var expected = {};\n        for (var index in conditions) {\n            var condition = conditions[index];\n            expected[condition.key] = condition.format();\n        }\n        return expected;\n    }\n\n    function formatUpdates(updates) {\n        var attrUpdates = {};\n        for (var attr in updates) {\n            if (updates.hasOwnProperty(attr)) {\n                var actionValue = {};\n                var value = updates[attr].Value;\n                var action = updates[attr].Action;\n\n                actionValue.Action = action;\n                if (value !== undefined) {\n                    actionValue.Value = t.formatDataType(value);\n                }\n                attrUpdates[attr] = actionValue;\n            }\n        }\n\n         return attrUpdates;\n    }\n\n    function handleWriteRequest(request) {\n        var requestCopy = {};\n\n        if (request.DeleteRequest) {\n            var key = request.DeleteRequest.Key;\n            requestCopy.DeleteRequest = {};\n            requestCopy.DeleteRequest.Key = formatAttrValInput(key);\n        } else {\n            var item = request.PutRequest.Item;\n            requestCopy.PutRequest = {};\n            requestCopy.PutRequest.Item = formatAttrValInput(item);\n        }\n\n        return requestCopy;\n    }\n\n    function formatRequestItems(requests) {\n        var requestItems = {};\n\n        for (var table in requests) {\n            if (requests.hasOwnProperty(table)) {\n                requestItems[table] = {};\n\n                var request = requests[table];\n                if (Array.isArray(request)) {\n                    var writeRequests = [];\n                    for (var wIndex in request) {\n                        writeRequests.push(handleWriteRequest(request[wIndex]));\n                    }\n                    requestItems[table] = writeRequests;\n                } else {\n                    if (request.AttributesToGet) {\n                        requestItems[table].AttributesToGet = request.AttributesToGet;\n                    }\n                    if (request.ConsistentRead) {\n                        requestItems[table].ConsistentRead = request.ConsistentRead;\n                    }\n                    if (request.ProjectionExpression) {\n                        requestItems[table].ProjectionExpression = request.ProjectionExpression;\n                    }\n                    if (request.ExpressionAttributeNames) {\n                        requestItems[table].ExpressionAttributeNames = request.ExpressionAttributeNames;\n                    }\n                    if (request.Keys) {\n                        var keys = [];\n                        for (var gIndex in request.Keys) {\n                            var key = request.Keys[gIndex];\n                            keys.push(formatAttrValInput(key));\n                        }\n                        requestItems[table].Keys = keys;\n                    }\n                }\n            }\n        }\n\n        return requestItems;\n    }\n\n    var inputMap = { \"AttributeUpdates\": formatUpdates,\n                     \"ExclusiveStartKey\": formatAttrValInput,\n                     \"Expected\": formatConditions,\n                     \"ExpressionAttributeValues\": formatAttrValInput,\n                     \"Item\": formatAttrValInput,\n                     \"Key\": formatAttrValInput,\n                     \"KeyConditions\": formatConditions,\n                     \"RequestItems\": formatRequestItems,\n                     \"ScanFilter\": formatConditions,\n                     \"QueryFilter\": formatConditions};\n\n\n    function formatAttrValOutput(item) {\n        var attrList = {};\n        for (var attribute in item) {\n            var keys = Object.keys(item[attribute]);\n            var key = keys[0];\n            var value = item[attribute][key];\n\n            value = t.formatWireType(key, value);\n            attrList[attribute] = value;\n        }\n\n        return attrList;\n    }\n\n    function formatItems(items) {\n        for (var index in items) {\n            items[index] = formatAttrValOutput(items[index]);\n        }\n        return items;\n    }\n\n    function handleCollectionKey(metrics) {\n        var collectionKey = metrics.ItemCollectionKey;\n        metrics.ItemCollectionKey = formatAttrValOutput(collectionKey);\n        return metrics;\n    }\n\n    function handleBatchMetrics(metrics) {\n        for (var table in metrics) {\n            if (metrics.hasOwnProperty(table)) {\n                var listOfKeys = metrics[table];\n                for (var index in listOfKeys) {\n                    listOfKeys[index] = handleCollectionKey(listOfKeys[index]);\n                }\n            }\n        }\n        return metrics;\n    }\n\n    function formatMetrics(metrics) {\n        var collectionKey = metrics.ItemCollectionKey;\n        if (collectionKey) {\n            metrics = handleCollectionKey(metrics);\n        } else {\n            metrics = handleBatchMetrics(metrics);\n        }\n        return metrics;\n    }\n\n    function formatResponses(responses) {\n        for (var table in responses) {\n            if (responses.hasOwnProperty(table)) {\n                var listOfItems = responses[table];\n                for (var index in listOfItems) {\n                    listOfItems[index] = formatAttrValOutput(listOfItems[index]);\n                }\n            }\n        }\n\n        return responses;\n    }\n\n    function formatUnprocessedItems(unprocessedItems) {\n        for(var table in unprocessedItems) {\n            if (unprocessedItems.hasOwnProperty(table)) {\n                var tableInfo = unprocessedItems[table];\n                for (var index in tableInfo) {\n                    var request = tableInfo[index];\n                    if (request.DeleteRequest) {\n                        tableInfo[index].DeleteRequest.Key = formatAttrValOutput(request.DeleteRequest.Key);\n                    } else {\n                        tableInfo[index].PutRequest.Item = formatAttrValOutput(request.PutRequest.Item);\n                    }\n                }\n            }\n        }\n        return unprocessedItems;\n    }\n\n    function formatUnprocessedKeys(unprocessedKeys) {\n        for (var table in unprocessedKeys) {\n            if (unprocessedKeys.hasOwnProperty(table)) {\n                var tableInfo = unprocessedKeys[table];\n                var listOfKeys = tableInfo.Keys;\n                for (var index in listOfKeys) {\n                    tableInfo.Keys[index] = formatAttrValOutput(listOfKeys[index]);\n                }\n            }\n        }\n\n        return unprocessedKeys;\n    }\n\n    /**\n     * DynamoDBFormatter specifically for wrapping DynamoDB response objects.\n     *\n     * @function formatOutput\n     * @memberOf DynamoDBFormatter#\n     * @params {object} response Response object directly passed out by the service.\n     * @returns {object} Wrapped up response object.\n     */\n    this.formatOutput = function(response) {\n        var outputMap = {\"Attributes\": formatAttrValOutput,\n                         \"Item\": formatAttrValOutput,\n                         \"Items\": formatItems,\n                         \"ItemCollectionMetrics\": formatMetrics,\n                         \"LastEvaluatedKey\": formatAttrValOutput,\n                         \"Responses\": formatResponses,\n                         \"UnprocessedKeys\": formatUnprocessedKeys,\n                         \"UnprocessedItems\": formatUnprocessedItems};\n\n\n        var data = response.data;\n        if (data) {\n            for (var key in data) {\n                if (data.hasOwnProperty(key)) {\n                    var formatFunc = outputMap[key];\n                    if (formatFunc) {\n                        response.data[key] = formatFunc(data[key]);\n                    }\n                }\n            }\n        }\n    };\n\n    /**\n     * DynamoDBFormatter specifically for unwrapping DynamoDB request objects.\n     *\n     * @function formatInput\n     * @memberOf DynamoDBFormatter#\n     * @params {object} request Request object created by the service.\n     * @return {object} Returns aws sdk version of the request.\n     */\n    this.formatInput = function (request) {\n        var paramsCopy = {};\n        var params = request.params;\n\n        for (var key in params) {\n            if (params.hasOwnProperty(key)) {\n                var param = params[key];\n                var formatFunc = inputMap[key];\n                if (formatFunc) {\n                    param = formatFunc(param);\n                }\n                paramsCopy[key] = param;\n            }\n        }\n\n        request.params = paramsCopy;\n    };\n}\n\nif (typeof(module) !== \"undefined\") {\n    var exports = module.exports = {};\n    exports.DynamoDBFormatter = DynamoDBFormatter;\n}\n\nwindow.DynamoDBFormatter = DynamoDBFormatter;\n",
      "mode": "100644"
    },
    "lib/aws-cognito.min.js": {
      "path": "lib/aws-cognito.min.js",
      "content": "/**\n * Copyright 2014 Amazon.com,\n * Inc. or its affiliates. All Rights Reserved.\n * \n * Licensed under the Amazon Software License (the \"License\").\n * You may not use this file except in compliance with the\n * License. A copy of the License is located at\n * \n *     http://aws.amazon.com/asl/\n * \n * or in the \"license\" file accompanying this file. This file is\n * distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, express or implied. See the License\n * for the specific language governing permissions and\n * limitations under the License. \n */\n\n\nif(void 0===AWS)throw new Error(\"AWS SDK must be loaded before loading the Sync Manager.\");AWS.CognitoSyncManager=function(a){a=a||{};var b=\"CognitoJavaScriptSDK/1\";this.provider=AWS.config.credentials,this.identityPoolId=this.provider.params.IdentityPoolId,this.region=AWS.config.region,this.logger=a.log,\"function\"!=typeof this.logger&&(this.logger=function(){}),this.local=new AWS.CognitoSyncManager.LocalStorage({DataStore:AWS.CognitoSyncManager.StoreLocalStorage}),this.remote=new AWS.CognitoSyncManager.RemoteStorage(this.identityPoolId,this.provider),this.remote.setUserAgent(b)},AWS.CognitoSyncManager.prototype.openOrCreateDataset=function(a,b){var c=this,d=new RegExp(\"^[a-zA-Z0-9_.:-]{1,128}$\");d.test(a)?this.local.createDataset(this.getIdentityId(),a,function(a,d){return a?b(a,null):void b(null,new AWS.CognitoSyncManager.Dataset(d,c.provider,c.local,c.remote,c.logger))}):b(new Error(\"Dataset name must match the pattern \"+d.toString()))},AWS.CognitoSyncManager.prototype.listDatasets=function(a){this.local.getDatasets(this.getIdentityId(),a)},AWS.CognitoSyncManager.prototype.refreshDatasetMetadata=function(a){var b=this;this.remote.getDatasets(function(c,d){var e=[],f=function(a){b.local.updateDatasetMetadata(b.getIdentityId(),a,g)},g=function(b,c){e.push(c),d.length>0?f(d.shift()):a(null,e)};d.length>0?f(d.shift(),a):a(null,[])})},AWS.CognitoSyncManager.prototype.wipeData=function(){this.provider.clearCachedId(),this.local.wipeData()},AWS.CognitoSyncManager.prototype.getIdentityId=function(){return this.provider.identityId},AWS=AWS||{},AWS.CognitoSyncManager=AWS.CognitoSyncManager||{},AWS.CognitoSyncManager.Conflict=function(){var a=function(a,b){if(!a||!b)throw new Error(\"Remote and local records cannot be null.\");if(!a.getKey||!b.getKey)throw new Error(\"Records are not record objects.\");if(a.getKey()!==b.getKey())throw new Error(\"Remote and local keys do not match.\");this.key=a.getKey(),this.remoteRecord=a,this.localRecord=b};return a.prototype.getKey=function(){return this.key},a.prototype.getRemoteRecord=function(){return this.remoteRecord},a.prototype.getLocalRecord=function(){return this.localRecord},a.prototype.resolveWithRemoteRecord=function(){return this.remoteRecord.setModified(!1),this.remoteRecord},a.prototype.resolveWithLocalRecord=function(){return this.localRecord.setSyncCount(this.remoteRecord.getSyncCount()),this.localRecord.setModified(!0),this.localRecord},a.prototype.resolveWithValue=function(a){return new AWS.CognitoSyncManager.Record({Key:this.remoteRecord.getKey(),Value:a,SyncCount:this.remoteRecord.getSyncCount(),LastModifiedDate:new Date,LastModifiedBy:this.localRecord.getLastModifiedBy(),DeviceLastModifiedDate:new Date,Modified:!0})},a}(),AWS=AWS||{},AWS.CognitoSyncManager=AWS.CognitoSyncManager||{},AWS.CognitoSyncManager.Dataset=function(){var a=function(a,b,c,d,e){this.MAX_RETRY=3,this.datasetName=a,this.provider=b,this.local=c,this.remote=d,this.logger=e||function(){}};return a.prototype.validateKey=function(a){var b=new RegExp(\"^[a-zA-Z0-9_.:-]{1,128}$\");return b.test(a)},a.prototype.put=function(a,b,c){return this.validateKey(a)?void this.local.putValue(this.getIdentityId(),this.datasetName,a,b,c):c(new Error(\"Invalid key.\"))},a.prototype.remove=function(a,b){return this.validateKey(a)?void this.local.putValue(this.getIdentityId(),this.datasetName,a,null,b):b(new Error(\"Invalid key.\"))},a.prototype.get=function(a,b){return this.validateKey(a)?void this.local.getValue(this.getIdentityId(),this.datasetName,a,b):b(new Error(\"Invalid key.\"))},a.prototype.getAllRecords=function(a){this.local.getRecords(this.getIdentityId(),this.datasetName,a)},a.prototype.getDataStorage=function(a){this.getDatasetMetadata(function(b,c){return b?a(b):c?a(null,c.getDataStorage()):a(null,0)})},a.prototype.isChanged=function(a,b){return this.validateKey(a)?void this.local.getRecord(this.getIdentityId(),this.datasetName,a,function(a,c){b(null,c&&c.isModified())}):b(new Error(\"Invalid key.\"))},a.prototype.getDatasetMetadata=function(a){this.local.getDatasetMetadata(this.getIdentityId(),this.datasetName,a)},a.prototype.resolve=function(a,b){this.local.putRecords(this.getIdentityId(),this.datasetName,a,b)},a.prototype.putAll=function(a,b){var c=!0;for(var d in a)a.hasOwnProperty(d)&&(this.validateKey(d)||(c=!1));return c?void this.local.putAllValues(this.getIdentityId(),this.datasetName,a,b):b(new Error(\"Object contains invalid keys.\"))},a.prototype.getAll=function(a){var b,c={};this.local.getRecords(this.getIdentityId(),this.datasetName,function(d,e){if(d)return a(d);for(var f in e)e.hasOwnProperty(f)&&(b=e[f],b.isDeleted()||(c[b.getKey()]=b.getValue()));a(null,c)})},a.prototype.getIdentityId=function(){return this.provider.identityId},a.prototype.getModifiedRecords=function(a){this.local.getModifiedRecords(this.getIdentityId(),this.datasetName,a)},a.prototype.getLocalMergedDatasets=function(a){var b,c=[],d=this.datasetName+\".\";this.local.getDatasets(this.getIdentityId(),function(e,f){for(var g in f)f.hasOwnProperty(g)&&(b=f[g],0===b.getDatasetName().indexOf(d)&&c.push(b.getDatasetName()));a(null,c)})},a.prototype.synchronize=function(a,b){var c=this;return a=a||{},a.onSuccess=a.onSuccess||function(){},a.onFailure=a.onFailure||function(){},a.onConflict=a.onConflict||function(a,b,c){return c(!1)},a.onDatasetDeleted=a.onDatasetDeleted||function(a,b,c){return c(!1)},a.onDatasetsMerged=a.onDatasetsMerged||function(a,b,c){return c(!1)},void 0===b&&(b=this.MAX_RETRY),c.logger(\"Starting synchronization... (retires: \"+b+\")\"),0>b?a.onFailure(new Error(\"Synchronized failed: exceeded maximum retry count.\")):void this.getLocalMergedDatasets(function(d,e){return d&&a.onFailure(d),c.logger(\"Checking for locally merged datasets... found \"+e.length+\".\"),e.length>0?(c.logging(\"Deferring to .onDatasetsMerged.\"),a.onDatasetsMerged(c,e,function(d){return d?c.synchronize(a,--b):a.onFailure(new Error(\"Synchronization cancelled by onDatasetsMerged() callback returning false.\"))})):void c.local.getLastSyncCount(c.getIdentityId(),c.datasetName,function(d,e){return d?a.onFailure(d):(c.logger(\"Detecting last sync count... \"+e),void c.remote.listUpdates(c.datasetName,e,function(d,f){if(d)return a.onFailure(d);c.logger(\"Fetch remote updates... found \"+f.records.length+\".\");var g=f.getMergedDatasetNameList();if(c.logger(\"Checking for remote merged datasets... found \"+g.length+\".\"),g.length>0)return c.logger(\"Deferring to .onDatasetsMerged.\"),a.onDatasetsMerged(c,g,function(d){d?c._synchronizeInternal(a,--b):a.onFailure(new Error(\"Cancelled due to .onDatasetsMerged result.\"))});if(0!==e&&!f||f.isDeleted())return a.onDatasetDeleted(c,f.getDatasetName(),function(d){return c.logging(\"Dataset should be deleted. Deferring to .onDatasetDeleted.\"),d?(c.logging(\".onDatasetDeleted returned true, purging dataset locally.\"),c.local.purgeDataset(c.getIdentityId(),c.datasetName,function(d){return d?a.onFailure(d):c._synchronizeInternal(a,--b)})):(c.logging(\".onDatasetDeleted returned false, cancelling sync.\"),a.onFailure(new Error(\"Cancelled due to .onDatasetDeleted result.\")))});var h=f.getRecords(),i=f.getSyncCount(),j=f.getSyncSessionToken();c.logger(\"Checking for remote updates since last sync count... found \"+h.length+\".\"),h.length>0?c._synchronizeResolveLocal(h,function(d,f){return d?a.onFailure(d):(c.logger(\"Checking for conflicts... found \"+f.length+\".\"),void(f.length>0?(c.logger(\"Conflicts detected. Deferring to .onConflict.\"),a.onConflict(c,f,function(d){return d?void c._synchronizePushRemote(j,e,function(){return c.synchronize(a,--b)}):(c.logger(\".onConflict returned false. Cancelling sync.\"),a.onFailure(new Error(\"Sync cancelled. Conflict callback returned false.\")))})):(c.logger(\"No conflicts. Updating local records.\"),c.local.putRecords(c.getIdentityId(),c.datasetName,h,function(d){return d?a.onFailure(d):void c.local.updateLastSyncCount(c.getIdentityId(),c.datasetName,i,function(d){return d?a.onFailure(d):(c.logger(\"Finished resolving records. Restarting sync.\"),c.synchronize(a,--b))})}))))}):(c.logger(\"Nothing updated remotely. Pushing local changes to remote.\"),c._synchronizePushRemote(j,i,function(d){return d?(c.logger(\"Remote push failed. Likely concurrent sync conflict. Retrying...\"),c.synchronize(a,--b)):(c.logger(\"Sync successful.\"),a.onSuccess(c,h))}))}))})})},a.prototype._synchronizeResolveLocal=function(a,b){var c=this,d=[];return a&&a.length>0?void c.local.getRecords(c.getIdentityId(),c.datasetName,function(c,e){var f,g,h,i={};for(f=0;f<e.length;f++)i[e[f].getKey()]=e[f];for(f=0;f<a.length;f++)g=a[f].getKey(),h=i[g],h&&h.isModified()&&h.getValue()!==a[f].getValue()&&d.push(new AWS.CognitoSyncManager.Conflict(a[f],h));return b(null,d)}):b(null,d)},a.prototype._synchronizePushRemote=function(a,b,c){var d=this;this.getModifiedRecords(function(b,e){return e.length>0?void d.remote.putRecords(d.datasetName,e,a,function(a,b){a&&c(a),d.local.putRecords(d.getIdentityId(),d.datasetName,b,function(a){if(a)return c(a);var e=0;for(var f in b)b.hasOwnProperty(f)&&(e=e<b[f].getSyncCount()?b[f].getSyncCount():e);d.local.updateLastSyncCount(d.getIdentityId(),d.datasetName,e,function(a){return a?c(a):c(null,!0)})})}):c(null,!0)})},a}(),AWS=AWS||{},AWS.CognitoSyncManager=AWS.CognitoSyncManager||{},AWS.CognitoSyncManager.DatasetMetadata=function(){var a=function(a){if(a=a||{},this.datasetName=a.DatasetName||\"\",this.creationDate=new Date(a.CreationDate)||new Date,this.lastModifiedDate=new Date(a.LastModifiedDate)||new Date,this.lastModifiedBy=a.LastModifiedBy||\"\",this.dataStorage=a.DataStorage||0,this.recordCount=a.NumRecords||0,this.lastSyncCount=a.LastSyncCount||0,this.lastSyncDate=new Date(a.LastSyncDate)||new Date,this.dataStorage<0)throw new RangeError(\"Storage size cannot be negative.\");if(this.recordCount<0)throw new RangeError(\"Record count cannot be negative.\")};return a.prototype.getDatasetName=function(){return this.datasetName},a.prototype.setDatasetName=function(a){return this.datasetName=a,this},a.prototype.getCreationDate=function(){return this.creationDate},a.prototype.setCreationDate=function(a){return this.creationDate=new Date(a),this},a.prototype.getLastModifiedDate=function(){return this.lastModifiedDate},a.prototype.setLastModifiedDate=function(a){return this.lastModifiedDate=new Date(a),this},a.prototype.getLastModifiedBy=function(){return this.lastModifiedBy},a.prototype.setLastModifiedBy=function(a){return this.lastModifiedBy=a,this},a.prototype.getDataStorage=function(){return this.dataStorage},a.prototype.setDataStorage=function(a){return this.dataStorage=a,this},a.prototype.getRecordCount=function(){return this.recordCount},a.prototype.setRecordCount=function(a){return this.recordCount=a,this},a.prototype.getLastSyncCount=function(){return this.lastSyncCount},a.prototype.setLastSyncCount=function(a){return this.lastSyncCount=a,this},a.prototype.getLastSyncDate=function(){return this.lastSyncDate},a.prototype.setLastSyncDate=function(a){return this.lastSyncDate=a,this},a.prototype.toString=function(){return JSON.stringify(this.toJSON())},a.prototype.toJSON=function(){return{DatasetName:this.datasetName,CreationDate:this.creationDate,LastModifiedDate:this.lastModifiedDate,LastModifiedBy:this.lastModifiedBy,DataStorage:this.dataStorage,NumRecords:this.recordCount,LastSyncCount:this.lastSyncCount,LastSyncDate:this.lastSyncDate}},a}(),AWS=AWS||{},AWS.CognitoSyncManager=AWS.CognitoSyncManager||{},AWS.CognitoSyncManager.DatasetUpdates=function(){var a=function(a){this.datasetName=a,this.records=[],this.syncCount=0,this.syncSessionToken=\"\",this.exists=!0,this.deleted=!1,this.mergedDatasetNameList=[]};return a.prototype.getDatasetName=function(){return this.datasetName},a.prototype.setDatasetName=function(a){return this.datasetName=a,this},a.prototype.getRecords=function(){return this.records},a.prototype.addRecord=function(a){return this.records.push(a),this},a.prototype.getSyncCount=function(){return this.syncCount},a.prototype.setSyncCount=function(a){return this.syncCount=a,this},a.prototype.getSyncSessionToken=function(){return this.syncSessionToken},a.prototype.setSyncSessionToken=function(a){return this.syncSessionToken=a,this},a.prototype.isExists=function(){return this.exists},a.prototype.setExists=function(a){return this.exists=a,this},a.prototype.isDeleted=function(){return this.deleted},a.prototype.setDeleted=function(a){return this.deleted=a,this},a.prototype.getMergedDatasetNameList=function(){return this.mergedDatasetNameList},a.prototype.setMergedDatasetNameList=function(a){return this.mergedDatasetNameList=a,this},a}(),AWS=AWS||{},AWS.CognitoSyncManager=AWS.CognitoSyncManager||{},AWS.CognitoSyncManager.LocalStorage=function(){var a=function(a){a=a||{},this.store=null,this.meta=null,this.store=a.DataStore?new a.DataStore:new AWS.CognitoSyncManager.StoreInMemory};return a.prototype.getMetadataKey=function(a,b){return a+\".\"+b},a.prototype.loadMetadataCache=function(a,b){var c=this;this.store.get(\"_internal\",\"_metadata\",a,function(a,d){return a?b(a,null):(d||(d={}),c.meta=d,void b(null,d))})},a.prototype.saveMetadataCache=function(a,b,c){this.store.set(\"_internal\",\"_metadata\",a,b,function(a){return a?c(a):c(null,b)})},a.prototype.createDataset=function(a,b,c){var d=this;return this.getDatasetMetadata(a,b,function(e,f){var g=(new Date).getTime();f?c(null,b):(f=new AWS.CognitoSyncManager.DatasetMetadata({DatasetName:b,CreationDate:g,LastModifiedDate:g}),d.setDatasetMetadata(a,b,f,function(){}),c(null,b))}),this},a.prototype.getDatasetMetadata=function(a,b,c){var d=this.getMetadataKey(a,b);return null!==this.meta?this.meta[d]?c(null,new AWS.CognitoSyncManager.DatasetMetadata(this.meta[d])):c(null,void 0):this.loadMetadataCache(a,function(a,b){b[d]?c(null,new AWS.CognitoSyncManager.DatasetMetadata(b[d])):c(null,void 0)}),this},a.prototype.setDatasetMetadata=function(a,b,c,d){return this.meta[this.getMetadataKey(a,b)]=c.toJSON(),this.saveMetadataCache(a,this.meta,d),this},a.prototype.getValue=function(a,b,c,d){this.getRecord(a,b,c,function(a,b){return b?d(null,b.getValue()):d(null,void 0)})},a.prototype.putValue=function(a,b,c,d,e){var f=this;this.getRecord(a,b,c,function(g,h){return h&&h.getValue()==d?e(null,h):(h||(h=new AWS.CognitoSyncManager.Record),h.setKey(c).setValue(d).setModified(!0).setSyncCount(h?h.getSyncCount():0).setDeviceLastModifiedDate(new Date),void f.store.set(a,b,c,h.toJSON(),function(c){return c?e(c):void f.updateLastModifiedTimestamp(a,b,function(a){return e(a,h)})}))})},a.prototype.getValueMap=function(a,b,c){var d,e={};this.getRecords(a,b,function(a,b){for(var f in b)b.hasOwnProperty(f)&&(d=b[f],d.isDeleted()||(e[d.getKey()]=d.getValue()));c(null,e)})},a.prototype.putAllValues=function(a,b,c,d){var e=this,f=[];for(var g in c)c.hasOwnProperty(g)&&f.push(g);var h=function(g){var i;return g?d(g):void(f.length>0?(i=f.shift(),e.putValue(a,b,i,c[i],h)):d(null,!0))};h(null,null)},a.prototype.getDatasets=function(a,b){var c=[];if(null!==this.meta){for(var d in this.meta)this.meta.hasOwnProperty(d)&&c.push(new AWS.CognitoSyncManager.DatasetMetadata(this.meta[d]));return b(null,c)}this.loadMetadataCache(a,function(a,d){for(var e in d)d.hasOwnProperty(e)&&c.push(new AWS.CognitoSyncManager.DatasetMetadata(d[e]));return b(null,c)})},a.prototype.updateDatasetMetadata=function(a,b,c){var d=this;this.getDatasetMetadata(a,b.getDatasetName(),function(e,f){e&&c(e),f||(f=new AWS.CognitoSyncManager.DatasetMetadata),f.setDatasetName(b.getDatasetName()).setCreationDate(b.getCreationDate()).setLastModifiedDate(b.getLastModifiedDate()).setLastModifiedBy(b.getLastModifiedBy()).setLastSyncCount(b.getLastSyncCount()).setRecordCount(b.getRecordCount()).setDataStorage(b.getDataStorage()),d.meta[d.getMetadataKey(a,b.getDatasetName())]=f.toJSON(),d.saveMetadataCache(a,d.meta,function(a){return a?c(a):c(null,f)})})},a.prototype.getRecord=function(a,b,c,d){this.store.get(a,b,c,function(a,b){return b?d(null,new AWS.CognitoSyncManager.Record(b)):d(new Error(\"Key doesn't exist.\"),null)})},a.prototype.getRecords=function(a,b,c){var d=[];this.store.getAll(a,b,function(a,b){for(var e in b)b.hasOwnProperty(e)&&d.push(new AWS.CognitoSyncManager.Record(b[e]));c(null,d)})},a.prototype.putRecords=function(a,b,c,d){var e=this;c=c||[];var f=function(){c.length>0&&e.updateAndClearRecord(a,b,c.shift(),function(a){return a?d(a):0===c.length?d(null,!0):void f()})};f()},a.prototype.deleteDataset=function(a,b,c){var d=this;this.store.removeAll(a,b,function(e){return e?c(e):void d.getDatasetMetadata(a,b,function(b,e){return b?c(b):(e.setLastModifiedDate(new Date),e.setSyncCount(-1),void d.updateDatasetMetadata(a,e,function(a){return a?c(a):c(null,!0)}))})})},a.prototype.purgeDataset=function(a,b,c){this.deleteDataset(a,b,function(d){d&&c(d),delete this.meta[b],this.saveMetadataCache(a,b,this.meta,function(a,b){c(null,b)})})},a.prototype.getLastSyncCount=function(a,b,c){this.getDatasetMetadata(a,b,function(a,b){return b?c(null,b.getLastSyncCount()):void c(new Error(\"Dataset doesn't exist.\"),null)})},a.prototype.getModifiedRecords=function(a,b,c){var d=[];this.getRecords(a,b,function(a,b){for(var e=0;e<b.length;e++)b[e].isModified()&&d.push(b[e]);c(null,d)})},a.prototype.updateLastSyncCount=function(a,b,c,d){var e=this;this.getDatasetMetadata(a,b,function(b,f){b&&d(b),f.setLastSyncCount(c).setLastSyncDate(new Date),e.updateDatasetMetadata(a,f,function(a){a&&d(a),d(null,!0)})})},a.prototype.wipeData=function(a){this.store.wipe(a)},a.prototype.updateLastModifiedTimestamp=function(a,b,c){var d=this;this.getDatasetMetadata(a,b,function(b,e){return b?c(b):(e.setLastModifiedDate(new Date),void d.updateDatasetMetadata(a,e,function(a){return a?c(a):c(null,!0)}))})},a.prototype.removeRecord=function(a,b,c){this.store.remove(a,b,c,function(a){return a?callback(a):callback(null,!0)})},a.prototype.updateAndClearRecord=function(a,b,c,d){this.store.set(a,b,c.getKey(),c.toJSON(),function(a){return a?d(a):d(null,!0)})},a}(),AWS=AWS||{},AWS.CognitoSyncManager=AWS.CognitoSyncManager||{},AWS.CognitoSyncManager.Record=function(){var a=function(a){a=a||{},this.key=a.Key||\"\",this.value=a.Value||\"\",this.syncCount=a.SyncCount||0,this.lastModifiedDate=a.LastModifiedDate?new Date(a.LastModifiedDate):new Date,this.lastModifiedBy=a.LastModifiedBy||\"\",this.deviceLastModifiedDate=a.DeviceLastModifiedDate?new Date(a.DeviceLastModifiedDate):new Date,this.modified=a.Modified||!1};return a.prototype.getKey=function(){return this.key},a.prototype.setKey=function(a){return this.key=a,this},a.prototype.getValue=function(){return this.value},a.prototype.setValue=function(a){return this.value=a,this},a.prototype.getSyncCount=function(){return this.syncCount},a.prototype.setSyncCount=function(a){return this.syncCount=a,this},a.prototype.getLastModifiedDate=function(){return new Date(this.lastModifiedDate)},a.prototype.setLastModifiedDate=function(a){return this.lastModifiedDate=new Date(a),this},a.prototype.getLastModifiedBy=function(){return this.lastModifiedBy},a.prototype.setLastModifiedBy=function(a){return this.lastModifiedBy=a,this},a.prototype.getDeviceLastModifiedDate=function(){return new Date(this.deviceLastModifiedDate)},a.prototype.setDeviceLastModifiedDate=function(a){return this.deviceLastModifiedDate=new Date(a),this},a.prototype.isModified=function(){return this.modified},a.prototype.setModified=function(a){return this.modified=a,this},a.prototype.isDeleted=function(){return null===this.value},a.prototype.toString=function(){return JSON.stringify(this)},a.prototype.toJSON=function(){return{Key:this.key,Value:this.value,SyncCount:this.syncCount,LastModifiedDate:this.lastModifiedDate,LastModifiedBy:this.lastModifiedBy,DeviceLastModifiedDate:this.deviceLastModifiedDate,Modified:this.modified}},a}(),AWS=AWS||{},AWS.CognitoSyncManager=AWS.CognitoSyncManager||{},AWS.CognitoSyncManager.RemoteStorage=function(){var a=function(a,b){this.identityPoolId=a,this.provider=b,this.client=new AWS.CognitoSync};return a.prototype.userAgent=\"\",a.prototype.getIdentityId=function(){return this.provider.identityId},a.prototype.getDatasets=function(a){var b=this,c=[],d=null,e=function(a,c){b.client.listDatasets({IdentityId:b.getIdentityId(),IdentityPoolId:b.identityPoolId,MaxResults:64,NextToken:a},c)},f=function(b,g){for(var h=g.Datasets||[],i=0;i<h.length;i++)c.push(new AWS.CognitoSyncManager.DatasetMetadata(h[i]));d=g.NextToken,d?e(d,f):a(null,c)};e(d,f)},a.prototype.listUpdates=function(a,b,c){var d=this,e=null,f=new AWS.CognitoSyncManager.DatasetUpdates(a),g=function(c,e){d.client.listRecords({DatasetName:a,IdentityId:d.getIdentityId(),IdentityPoolId:d.identityPoolId,LastSyncCount:b,MaxResults:1024,NextToken:c},e)},h=function(a,b){if(a)return c(a);b=b||{};for(var d,i=b.Records||[],j=0;j<i.length;j++)d=new AWS.CognitoSyncManager.Record(i[j]),d.setModified(!1),f.addRecord(d);f.setSyncSessionToken(b.SyncSessionToken).setSyncCount(b.DatasetSyncCount).setExists(b.DatasetExists).setDeleted(b.DatasetDeletedAfterRequestedSyncCount),b.MergedDatasetNames&&f.setMergedDatasetNameList(b.MergedDatasetNames),e=b.NextToken,e?g(e,h):c(null,f)};g(null,h)},a.prototype.putRecords=function(a,b,c,d){var e,f=this,g=[];for(var h in b)b.hasOwnProperty(h)&&(e=b[h],g.push({Key:e.getKey(),Op:e.getValue()?\"replace\":\"remove\",SyncCount:e.getSyncCount(),DeviceLastModifiedDate:e.getDeviceLastModifiedDate(),Value:e.getValue()}));this.client.updateRecords({DatasetName:a,IdentityId:f.getIdentityId(),IdentityPoolId:f.identityPoolId,SyncSessionToken:c,RecordPatches:g},function(b,c){var e=\"string\"==typeof a?a:\"(invalid dataset name)\";if(b)return d(new Error(\"Failed to update records in dataset: \"+e+\" (\"+b.message+\")\"),null);for(var f,g=[],h=0;h<c.Records.length;h++)f=new AWS.CognitoSyncManager.Record(c.Records[h]),f.setModified(!1),g.push(f);return d(null,g)})},a.prototype.deleteDataset=function(a,b){this.client.deleteDataset({DatasetName:a,IdentityId:this.getIdentityId(),IdentityPoolId:this.identityPoolId},function(a,c){return a?b(new Error(\"Failed to delete dataset.\"),null):b(null,c)})},a.prototype.getDatasetMetadata=function(a,b){this.client.describeDataset({DatasetName:a,IdentityId:this.getIdentityId(),IdentityPoolId:this.identityPoolId},function(a,c){return a?b(new Error(\"Failed to get dataset metadata.\"),null):b(null,new AWS.CognitoSyncManager.DatasetMetadata(c.Dataset))})},a.prototype.setUserAgent=function(a){this.userAgent=a},a}(),AWS=AWS||{},AWS.CognitoSyncManager=AWS.CognitoSyncManager||{},AWS.CognitoSyncManager.StoreInMemory=function(){var a=function(){this.store={}};return a.prototype.makeKey=function(a,b){return a+\".\"+b},a.prototype.get=function(a,b,c,d){var e=this.makeKey(a,b);return a&&b?this.store[e]&&this.store[e][c]?d(null,this.store[e][c]):d(null,void 0):d(new Error(\"You must provide an identity id and dataset name.\"),null)},a.prototype.getAll=function(a,b,c){var d=this.makeKey(a,b);return a&&b?c(null,this.store[d]):c(new Error(\"You must provide an identity id and dataset name.\"),null)},a.prototype.set=function(a,b,c,d,e){var f=this.makeKey(a,b),g=this.store[f]||{};return g[c]=d,this.store[f]=g,e(null,g)},a.prototype.setAll=function(a,b,c,d){var e=this.makeKey(a,b);return this.store[e]=c,d(null,c)},a.prototype.remove=function(a,b,c,d){var e=this.makeKey(a,b),f=JSON.parse(this.store[e]);return f||(f={}),delete f[c],this.store[e]=JSON.stringify(f),d(null,!0)},a.prototype.removeAll=function(a,b,c){var d=this.makeKey(a,b);return delete this.store[d],c(null,!0)},a.prototype.wipe=function(a){return this.store={},a(null,!0)},a}(),AWS=AWS||{},AWS.CognitoSyncManager=AWS.CognitoSyncManager||{},AWS.CognitoSyncManager.StoreLocalStorage=function(){var a=function(){this.store=window.localStorage};return a.prototype.makeKey=function(a,b){return a+\".\"+b},a.prototype.get=function(a,b,c,d){var e=this.makeKey(a,b);if(!a||!b)return d(new Error(\"You must provide an identity id and dataset name.\"),null);var f=JSON.parse(this.store.getItem(e));return f&&f[c]?d(null,f[c]):d(null,void 0)},a.prototype.getAll=function(a,b,c){var d=this.makeKey(a,b);return a&&b?c(null,JSON.parse(this.store.getItem(d))):c(new Error(\"You must provide an identity id and dataset name.\"),null)},a.prototype.set=function(a,b,c,d,e){var f=this.makeKey(a,b),g=JSON.parse(this.store.getItem(f));return g||(g={}),g[c]=d,this.store.setItem(f,JSON.stringify(g)),e(null,g),this},a.prototype.setAll=function(a,b,c,d){var e=this.makeKey(a,b);return this.store.setItem(e,JSON.stringify(c)),d(null,c)},a.prototype.remove=function(a,b,c,d){var e=this.makeKey(a,b),f=JSON.parse(this.store.getItem(e));return f||(f={}),delete f[c],this.store.setItem(e,JSON.stringify(f)),d(null,!0)},a.prototype.removeAll=function(a,b,c){var d=this.makeKey(a,b);return this.store.removeItem(d),c(null,!0)},a.prototype.wipe=function(a){for(var b in this.store)this.store.hasOwnProperty(b)&&-1===b.indexOf(\"aws.cognito.identity\")&&this.store.removeItem(b);return a?a(null,!0):this},a}();\n",
      "mode": "100644"
    }
  },
  "distribution": {
    "pixie": {
      "path": "pixie",
      "content": "module.exports = {\"remoteDependencies\":[\"https://sdk.amazonaws.com/js/aws-sdk-2.1.22.js\",\"http://cdn.pubnub.com/pubnub-3.7.1.js\"]};",
      "type": "blob"
    },
    "main": {
      "path": "main",
      "content": "(function() {\n  require(\"./aws\");\n\n}).call(this);\n",
      "type": "blob"
    },
    "aws": {
      "path": "aws",
      "content": "(function() {\n  var cognitoSyncTest, dynamoDBTest;\n\n  require(\"./lib/aws-cognito.min\");\n\n  AWS.config.update({\n    region: 'us-east-1'\n  });\n\n  AWS.config.credentials = new AWS.CognitoIdentityCredentials({\n    IdentityPoolId: 'us-east-1:4fe22da5-bb5e-4a78-a260-74ae0a140bf9'\n  });\n\n  cognitoSyncTest = function() {\n    return AWS.config.credentials.get(function() {\n      var syncClient;\n      syncClient = new AWS.CognitoSyncManager();\n      return syncClient.openOrCreateDataset('yolo', function(err, dataset) {\n        console.log(arguments);\n        if (!err) {\n          return dataset.put('duder', {\n            test: \"json\"\n          }, function(err, record) {\n            console.log(arguments);\n            return dataset.get('duder', function() {\n              return console.log(arguments);\n            });\n          });\n        }\n      });\n    });\n  };\n\n  dynamoDBTest = function() {\n    var db, itemParams, key, table, time;\n    db = new AWS.DynamoDB();\n    db.listTables(function(err, data) {\n      return console.log(data.TableNames);\n    });\n    table = new AWS.DynamoDB({\n      params: {\n        TableName: 'swag'\n      }\n    });\n    key = 'UNIQUE_KEY_ID';\n    time = \"\" + (+(new Date));\n    itemParams = {\n      Item: {\n        id: {\n          S: key\n        },\n        created_at: {\n          S: time\n        },\n        data: {\n          S: 'data'\n        }\n      }\n    };\n    return table.putItem(itemParams, function() {\n      return table.getItem({\n        Key: {\n          id: {\n            S: key\n          }\n        }\n      }, function(err, data) {\n        if (err) {\n          return console.log(err);\n        } else {\n          return console.log(data);\n        }\n      });\n    });\n  };\n\n}).call(this);\n",
      "type": "blob"
    },
    "pubnub": {
      "path": "pubnub",
      "content": "(function() {\n  var pub;\n\n  global.pubnub = PUBNUB.init({\n    publish_key: 'pub-c-010c4d6a-9e0f-43cc-87d3-d8e5ac1fb605',\n    subscribe_key: 'sub-c-df841964-de59-11e4-a1d1-0619f8945a4f'\n  });\n\n  pub = function() {\n    console.log(\"yolo\");\n    return pubnub.publish({\n      channel: 'demo_tutorial',\n      message: {\n        color: \"blue\"\n      }\n    });\n  };\n\n  pubnub.subscribe({\n    channel: 'demo_tutorial',\n    message: function() {\n      return console.log(\"Message\", arguments);\n    },\n    connect: function() {\n      console.log(\"Connect\", arguments);\n      return pub();\n    },\n    disconnect: function() {\n      return console.log(\"Disconnect\", arguments);\n    },\n    error: function() {\n      return console.error(\"Error\", arguments);\n    }\n  });\n\n  console.log(\"wat?\");\n\n}).call(this);\n",
      "type": "blob"
    },
    "lib/dynamodb-doc": {
      "path": "lib/dynamodb-doc",
      "content": "\n\n/**\n * Creates an instance of Condition that is used by the DynamoDB Document client.\n *\n * @param {string} key The attribute name being conditioned on.\n * @param {string} operator The operator in the conditional clause. (See aws sdk docs for full list of operators)\n * @param val<n> Potential <n>nd element in what would be the AttributeValueList (optional)\n * @return {Condition} Condition for your DynamoDB request.\n */\nfunction DynamoDBCondition(key, operator) { /* and variable arguments. */\n    var datatypes = typeof(window) === \"undefined\" ? require(\"./datatypes\").DynamoDBDatatype\n                : window.DynamoDBDatatype;\n\n    var t = new datatypes();\n\n    var args = Array.prototype.slice.call(arguments, 2);\n\n    var CondObj = function Condition(key, operator, args) {\n            this.key = key;\n            this.operator = operator;\n            this.args = args;\n\n            // for comatibility\n            this.val1 = args[0];\n            this.val2 = args[1];\n\n            this.format = function() {\n                var formatted = {};\n                var attrValueList = [];\n\n                for (var i=0; i<this.args.length; i++) {\n                    if (this.args[i] !== undefined) {\n                        attrValueList.push(t.formatDataType(this.args[i]));\n                    }\n                }\n                if (attrValueList.length > 0) {\n                    formatted.AttributeValueList = attrValueList;\n                }\n                formatted.ComparisonOperator = this.operator;\n\n                return formatted;\n            };\n    };\n\n    var cond = new CondObj(key, operator, args);\n    cond.prototype = Object.create(Object.prototype);\n    cond.prototype.instanceOf  = \"DynamoDBConditionObject\";\n\n    return cond;\n}\n\nif (typeof(module) !== \"undefined\") {\n    var exports = module.exports = {};\n    exports.DynamoDBCondition = DynamoDBCondition;\n}\n\nwindow.DynamoDBCondition = DynamoDBCondition;\n\n\n/**\n * @class Creates a DynamoDBDatatype that takes care of all datatype handling.\n *\n * @name DynamoDBDatatype\n */\nfunction DynamoDBDatatype() {\n    var AWS = typeof(window) === \"undefined\" ? require(\"aws-sdk\") : window.AWS;\n    var Uint8ArrayError = \"Uint8Array can only be used for Binary in Browser.\";\n    var ScalarDatatypeError = \"Unrecognized Scalar Datatype to be formatted.\";\n    var GeneralDatatypeError = \"Unrecognized Datatype to be formatted.\";\n    var BinConversionError = \"Need to pass in Buffer or Uint8Array. \";\n    var StrConversionError = \"Need to pass in string primitive to be converted to binary.\";\n\n    function isScalarType(dataType) {\n\n        var type = typeof(dataType);\n        return  type === \"number\"  ||\n                type === \"string\"  ||\n                type === \"boolean\" ||\n                (dataType instanceof(Uint8Array) && AWS.util.isBrowser()) ||\n                dataType instanceof(AWS.util.Buffer) ||\n                dataType === null;\n    }\n\n    function isSetType(dataType) {\n        return dataType.datatype === \"SS\" ||\n                dataType.datatype === \"NS\" ||\n                dataType.datatype === \"BS\";\n    }\n\n    function isRecursiveType(dataType) {\n\n        return Array.isArray(dataType) ||\n                typeof(dataType) === \"object\";\n    }\n\n    function formatSetValues(datatype, values) {\n        if(datatype === \"NS\") {\n            return values.map(function (n) {\n                return n.toString();\n            });\n        } else {\n          return values;\n        }\n    };\n\n    function formatRecursiveType(dataType) {\n\n        var recursiveDoc = {};\n\n        var value = {};\n        var type = \"M\";\n        if (Array.isArray(dataType)) {\n            value = [];\n            type = \"L\";\n        }\n\n        for (var key in dataType) {\n            value[key] = this.formatDataType(dataType[key]);\n        }\n\n        recursiveDoc[type] = value;\n        return recursiveDoc;\n    }\n\n    /** @throws Uint8ArrayError, ScalarDatatypeError\n     *  @private */\n    function formatScalarType(dataType) {\n\n        if (dataType == null) {\n            return { \"NULL\" : true };\n        }\n\n        var type = typeof(dataType);\n        if (type === \"string\") {\n            return { \"S\" : dataType };\n        } else if (type === \"number\") {\n            return { \"N\" : String(dataType) };\n        } else if (type === \"boolean\") {\n            return { \"BOOL\" : dataType };\n        } else if (dataType instanceof(AWS.util.Buffer)) {\n            return { \"B\" : dataType };\n        } else if (dataType instanceof(Uint8Array)) {\n            if (AWS.util.isBrowser()) {\n                return { \"B\" : dataType };\n            } else {\n                throw new Error(Uint8ArrayError);\n            }\n        } else {\n            throw new Error(ScalarDatatypeError);\n        }\n    }\n\n    /**\n     * Formats Javascript datatypes into DynamoDB wire format.\n     *\n     * @name formatDataType\n     * @function\n     * @memberOf DynamoDBDatatype#\n     * @param dataType Javascript datatype (i.e. string, number. For full information, check out the README).\n     * @return {object} DynamoDB JSON-like wire format.\n     * @throws GeneralDatatypeError\n     */\n    this.formatDataType = function(dataType) {\n\n        if (isScalarType(dataType)) {\n            return formatScalarType(dataType);\n        } else if (isSetType(dataType)) {\n            return dataType.format();\n        } else if (isRecursiveType(dataType)) {\n            return formatRecursiveType.call(this, dataType);\n        }  else {\n            throw new Error(GeneralDatatypeError);\n        }\n\n    };\n\n    function str2Bin(value) {\n        if (typeof(value) !== \"string\") {\n            throw new Error(StrConversionError);\n        }\n\n        if (AWS.util.isBrowser()) {\n            var len = value.length;\n            var bin = new Uint8Array(new ArrayBuffer(len));\n            for (var i = 0; i < len; i++) {\n                bin[i] = value.charCodeAt(i);\n            }\n            return bin;\n        } else {\n            return AWS.util.Buffer(value);\n        }\n    }\n\n    /**\n     * Utility to convert a String to a Binary object.\n     *\n     * @function strToBin\n     * @memberOf DynamoDBDatatype#\n     * @param {string} value String value to converted to Binary object.\n     * @return {object} (Buffer | Uint8Array) depending on Node or browser.\n     * @throws StrConversionError\n     */\n    this.strToBin = function(value) {\n        return str2Bin.call(this, value);\n    };\n\n    function bin2Str(value) {\n        if (!(value instanceof(AWS.util.Buffer)) && !(value instanceof(Uint8Array))) {\n            throw new Error(BinConversionError);\n        }\n\n        if (AWS.util.isBrowser()) {\n            return String.fromCharCode.apply(null, value);\n        } else {\n            return value.toString(\"utf-8\").valueOf();\n        }\n    }\n\n    /**\n     * Utility to convert a Binary object into a decoded String.\n     *\n     * @function binToStr\n     * @memberOf DynamoDBDatatype#\n     * @param {object} value Binary value (Buffer | Uint8Array) depending on Node or browser.\n     * @return {string} decoded String in UTF-8\n     * @throws BinConversionError\n     */\n    this.binToStr = function(value) {\n        return bin2Str.call(this, value);\n    };\n\n    /**\n     * Utility to create the DynamoDB Set Datatype.\n     *\n     * @function createSet\n     * @memberOf DynamoDBDatatype#\n     * @param {array} set An array that contains elements of the same typed as defined by {type}.\n     * @param {string} type Can only be a [S]tring, [N]umber, or [B]inary type.\n     * @return {Set} Custom Set object that follow {type}.\n     * @throws InvalidSetType, InconsistentType\n     */\n    this.createSet = function(set, type) {\n        if (type !== \"N\" && type !== \"S\" && type !== \"B\") {\n            throw new Error(type + \" is an invalid type for Set\");\n        }\n\n        var setObj = function Set(set, type) {\n            this.datatype = type + \"S\";\n            this.contents = {};\n\n            this.add = function(value) {\n                if (this.datatype === \"SS\" && typeof(value) === \"string\") {\n                    this.contents[value] = value;\n                } else if (this.datatype === \"NS\" && typeof(value) === \"number\") {\n                    this.contents[value] = value;\n                } else if (this.datatype === \"BS\" && value instanceof(AWS.util.Buffer)) {\n                    this.contents[bin2Str(value)] = value;\n                } else if (this.datatype === \"BS\" && value instanceof(Uint8Array)) {\n                    if (AWS.util.isBrowser()) {\n                        this.contents[bin2Str(value)] = value;\n                    } else {\n                        throw new Error(Uint8ArrayError);\n                    }\n                } else {\n                    throw new Error(\"Inconsistent in this \" + type + \" Set\");\n                }\n            };\n\n            this.contains = function(content) {\n                var value = content;\n                if (content instanceof AWS.util.Buffer || content instanceof(Uint8Array)) {\n                    value = bin2Str(content);\n                }\n                if (this.contents[value] === undefined) {\n                    return false;\n                }\n                return true;\n            };\n\n            this.remove = function(content) {\n                var value = content;\n                if (content instanceof AWS.util.Buffer || content instanceof(Uint8Array)) {\n                    value = bin2Str(content);\n                }\n                delete this.contents[value];\n            };\n\n            this.toArray = function() {\n                var keys = Object.keys(this.contents);\n                var arr = [];\n\n                for (var keyIndex in keys) {\n                    var key = keys[keyIndex];\n                    if (this.contents.hasOwnProperty(key)) {\n                        arr.push(this.contents[key]);\n                    }\n                }\n\n                return arr;\n            };\n\n            this.format = function() {\n                var values = this.toArray();\n                var result = {};\n                result[this.datatype] = formatSetValues(this.datatype, values);\n                return result;\n            };\n\n            if (set) {\n                for (var index in set) {\n                    this.add(set[index]);\n                }\n            }\n        };\n\n        return new setObj(set, type);\n    };\n\n    /**\n     * Formats DynamoDB wire format into javascript datatypes.\n     *\n     * @name formatWireType\n     * @function\n     * @memberOf DynamoDBDatatype#\n     * @param {string} key Key that represents the type of the attribute value\n     * @param value Javascript datatype of the attribute value produced by DynamoDB\n     * @throws GeneralDatatypeError\n     */\n    this.formatWireType = function(key, value) {\n        switch (key) {\n            case \"S\":\n            case \"B\":\n            case \"BOOL\":\n                return value;\n            case \"N\":\n                return Number(value);\n            case \"NULL\":\n                return null;\n            case \"L\":\n                for (var lIndex = 0; lIndex < value.length; lIndex++) {\n                    var lValue = value[lIndex];\n                    var lKey = Object.keys(lValue)[0];\n                    value[lIndex] = this.formatWireType(lKey, lValue[lKey]);\n                }\n                return value;\n            case \"M\":\n                for (var mIndex in value) {\n                    var mValue = value[mIndex];\n                    var mKey = Object.keys(mValue)[0];\n                    value[mIndex] = this.formatWireType(mKey, mValue[mKey]);\n                }\n                return value;\n            case \"SS\":\n                return new this.createSet(value, \"S\");\n            case \"NS\":\n                value = value.map(function(each) { return Number(each);});\n                return new this.createSet(value, \"N\");\n            case \"BS\":\n                return new this.createSet(value, \"B\");\n            default:\n                throw \"Service returned unrecognized datatype \" + key;\n        }\n    }\n}\n\nif (typeof(module) !== \"undefined\") {\n    var exports = module.exports = {};\n    exports.DynamoDBDatatype = DynamoDBDatatype;\n}\n\nwindow.DynamoDBDatatype = DynamoDBDatatype;\n\n\n/**\n * Create an instance of the DynamoDB Document client.\n *\n * @constructor\n * @class DynamoDB\n * @param {AWS.DynamoDB} dynamoDB An instance of the service provided AWS SDK (optional).\n * @returns {DynamoDB} Modified version of the service for Document support.\n */\nfunction DynamoDB(dynamoDB) {\n    var isBrowser = typeof(window) === \"undefined\";\n    var AWS = isBrowser ? require(\"aws-sdk\") : window.AWS;\n\n    var condition = isBrowser ? require(\"./condition\").DynamoDBCondition : window.DynamoDBCondition;\n\n    var datatypes = isBrowser ? require(\"./datatypes\").DynamoDBDatatype : window.DynamoDBDatatype;\n    var t = new datatypes();\n\n    var formatter = isBrowser ? require(\"./formatter\").DynamoDBFormatter : window.DynamoDBFormatter;\n    var f = new formatter();\n\n    var service = dynamoDB || new AWS.DynamoDB();\n\n    var setupLowLevelRequestListeners = service.setupRequestListeners;\n    service.setupRequestListeners = function(request) {\n        setupLowLevelRequestListeners.call(this, request);\n\n        request._events.validate.unshift(f.formatInput);\n        request.on(\"extractData\", f.formatOutput);\n    };\n\n    /**\n     * Utility to create Set Object for requests.\n     *\n     * @function Set\n     * @memberOf DynamoDB#\n     * @param {array} set An array that contains elements of the same typed as defined by {type}.\n     * @param {string} type Can only be a [S]tring, [N]umber, or [B]inary type.\n     * @return {Set} Custom Set object that follow {type}.\n     * @throws InvalidSetType, InconsistentType\n     */\n    service.__proto__.Set = function(set, type) {\n        return t.createSet(set, type);\n    };\n\n    /**\n    * Creates an instance of Condition and should be used with the DynamoDB client.\n    *\n    * @function Condition\n    * @memberOf DynamoDB#\n    * @param {string} key The attribute name being conditioned.\n    * @param {string} operator The operator in the conditional clause. (See lower level docs for full list of operators)\n    * @param val1 Potential first element in what would be the AttributeValueList\n    * @param val* Potential *nd element in what would be the AttributeValueList (optional)\n    * @return {Condition} Condition for your DynamoDB request.\n    */\n    service.__proto__.Condition = function(/*key, operator, val1, val2, ...*/) {\n        return condition.apply(this, arguments);\n    };\n\n    /**\n     * Utility to convert a String to the necessary Binary object.\n     *\n     * @function StrToBin\n     * @memberOf DynamoDB#\n     * @param {string} value String value to converted to Binary object.\n     * @return {object} Return value will be a Buffer or Uint8Array in the browser.\n     * @throws StrConversionError\n     */\n    service.__proto__.StrToBin = function(value) {\n        return t.strToBin(value);\n    };\n    /**\n     * Utility to convert a Binary object into its String equivalent.\n     *\n     * @function BinToStr\n     * @memberOf DynamoDB#\n     * @param {object} value Binary value (Buffer | Uint8Array) depending on environment.\n     * @return {string} Return value will be the string representation of the Binary object.\n     * @throws BinConversionError\n     */\n    service.__proto__.BinToStr = function(value) {\n        return t.binToStr(value);\n    };\n\n    return service;\n}\n\nif (typeof(module) !== \"undefined\") {\n    var exports = module.exports = {};\n    exports.DynamoDB = DynamoDB;\n}\n\nwindow.DynamoDB = DynamoDB;\n\n\n/**\n *  Create an instance of the DynamoDBFormatter.\n *  @constructor\n *  @return {DynamoDBFormatter} A Formatter object that provides methods for formatting DynamoDB requests and responses.\n */\nfunction DynamoDBFormatter() {\n    var datatypes = typeof(window) === \"undefined\" ? require(\"./datatypes\").DynamoDBDatatype : window.DynamoDBDatatype;\n    var t = new datatypes();\n    var EmptyConditionArray = \"Need to pass in an array with 1 or more Condition Objects.\";\n    var BadElementInConditionArray = \"Only Condition objects are allowed as members of the array.\";\n    var InvalidCondition = \"Need to pass in a valid Condition Object.\";\n\n    function formatAttrValInput(attrValueMap) {\n        var attributeValueMap = {};\n        for (var attr in attrValueMap) {\n            var value = attrValueMap[attr];\n            attributeValueMap[attr] = t.formatDataType(value);\n        }\n        return attributeValueMap;\n    }\n\n    function formatConditions(conditions) {\n        if (conditions.prototype && conditions.prototype.instanceOf === \"DynamoDBConditionObject\") {\n            conditions = [conditions];\n        } else {\n            if (Array.isArray(conditions)) {\n                if (conditions.length === 0) {\n                    throw new Error(EmptyConditionArray);\n                }\n                for (var index in conditions) {\n                    var condition = conditions[index];\n                    if (!(condition.prototype) || !(condition.prototype.instanceOf === \"DynamoDBConditionObject\")) {\n                        throw new Error(BadElementInConditionArray);\n                    }\n                }\n            } else {\n                throw new Error(InvalidCondition);\n            }\n        }\n\n        var expected = {};\n        for (var index in conditions) {\n            var condition = conditions[index];\n            expected[condition.key] = condition.format();\n        }\n        return expected;\n    }\n\n    function formatUpdates(updates) {\n        var attrUpdates = {};\n        for (var attr in updates) {\n            if (updates.hasOwnProperty(attr)) {\n                var actionValue = {};\n                var value = updates[attr].Value;\n                var action = updates[attr].Action;\n\n                actionValue.Action = action;\n                if (value !== undefined) {\n                    actionValue.Value = t.formatDataType(value);\n                }\n                attrUpdates[attr] = actionValue;\n            }\n        }\n\n         return attrUpdates;\n    }\n\n    function handleWriteRequest(request) {\n        var requestCopy = {};\n\n        if (request.DeleteRequest) {\n            var key = request.DeleteRequest.Key;\n            requestCopy.DeleteRequest = {};\n            requestCopy.DeleteRequest.Key = formatAttrValInput(key);\n        } else {\n            var item = request.PutRequest.Item;\n            requestCopy.PutRequest = {};\n            requestCopy.PutRequest.Item = formatAttrValInput(item);\n        }\n\n        return requestCopy;\n    }\n\n    function formatRequestItems(requests) {\n        var requestItems = {};\n\n        for (var table in requests) {\n            if (requests.hasOwnProperty(table)) {\n                requestItems[table] = {};\n\n                var request = requests[table];\n                if (Array.isArray(request)) {\n                    var writeRequests = [];\n                    for (var wIndex in request) {\n                        writeRequests.push(handleWriteRequest(request[wIndex]));\n                    }\n                    requestItems[table] = writeRequests;\n                } else {\n                    if (request.AttributesToGet) {\n                        requestItems[table].AttributesToGet = request.AttributesToGet;\n                    }\n                    if (request.ConsistentRead) {\n                        requestItems[table].ConsistentRead = request.ConsistentRead;\n                    }\n                    if (request.ProjectionExpression) {\n                        requestItems[table].ProjectionExpression = request.ProjectionExpression;\n                    }\n                    if (request.ExpressionAttributeNames) {\n                        requestItems[table].ExpressionAttributeNames = request.ExpressionAttributeNames;\n                    }\n                    if (request.Keys) {\n                        var keys = [];\n                        for (var gIndex in request.Keys) {\n                            var key = request.Keys[gIndex];\n                            keys.push(formatAttrValInput(key));\n                        }\n                        requestItems[table].Keys = keys;\n                    }\n                }\n            }\n        }\n\n        return requestItems;\n    }\n\n    var inputMap = { \"AttributeUpdates\": formatUpdates,\n                     \"ExclusiveStartKey\": formatAttrValInput,\n                     \"Expected\": formatConditions,\n                     \"ExpressionAttributeValues\": formatAttrValInput,\n                     \"Item\": formatAttrValInput,\n                     \"Key\": formatAttrValInput,\n                     \"KeyConditions\": formatConditions,\n                     \"RequestItems\": formatRequestItems,\n                     \"ScanFilter\": formatConditions,\n                     \"QueryFilter\": formatConditions};\n\n\n    function formatAttrValOutput(item) {\n        var attrList = {};\n        for (var attribute in item) {\n            var keys = Object.keys(item[attribute]);\n            var key = keys[0];\n            var value = item[attribute][key];\n\n            value = t.formatWireType(key, value);\n            attrList[attribute] = value;\n        }\n\n        return attrList;\n    }\n\n    function formatItems(items) {\n        for (var index in items) {\n            items[index] = formatAttrValOutput(items[index]);\n        }\n        return items;\n    }\n\n    function handleCollectionKey(metrics) {\n        var collectionKey = metrics.ItemCollectionKey;\n        metrics.ItemCollectionKey = formatAttrValOutput(collectionKey);\n        return metrics;\n    }\n\n    function handleBatchMetrics(metrics) {\n        for (var table in metrics) {\n            if (metrics.hasOwnProperty(table)) {\n                var listOfKeys = metrics[table];\n                for (var index in listOfKeys) {\n                    listOfKeys[index] = handleCollectionKey(listOfKeys[index]);\n                }\n            }\n        }\n        return metrics;\n    }\n\n    function formatMetrics(metrics) {\n        var collectionKey = metrics.ItemCollectionKey;\n        if (collectionKey) {\n            metrics = handleCollectionKey(metrics);\n        } else {\n            metrics = handleBatchMetrics(metrics);\n        }\n        return metrics;\n    }\n\n    function formatResponses(responses) {\n        for (var table in responses) {\n            if (responses.hasOwnProperty(table)) {\n                var listOfItems = responses[table];\n                for (var index in listOfItems) {\n                    listOfItems[index] = formatAttrValOutput(listOfItems[index]);\n                }\n            }\n        }\n\n        return responses;\n    }\n\n    function formatUnprocessedItems(unprocessedItems) {\n        for(var table in unprocessedItems) {\n            if (unprocessedItems.hasOwnProperty(table)) {\n                var tableInfo = unprocessedItems[table];\n                for (var index in tableInfo) {\n                    var request = tableInfo[index];\n                    if (request.DeleteRequest) {\n                        tableInfo[index].DeleteRequest.Key = formatAttrValOutput(request.DeleteRequest.Key);\n                    } else {\n                        tableInfo[index].PutRequest.Item = formatAttrValOutput(request.PutRequest.Item);\n                    }\n                }\n            }\n        }\n        return unprocessedItems;\n    }\n\n    function formatUnprocessedKeys(unprocessedKeys) {\n        for (var table in unprocessedKeys) {\n            if (unprocessedKeys.hasOwnProperty(table)) {\n                var tableInfo = unprocessedKeys[table];\n                var listOfKeys = tableInfo.Keys;\n                for (var index in listOfKeys) {\n                    tableInfo.Keys[index] = formatAttrValOutput(listOfKeys[index]);\n                }\n            }\n        }\n\n        return unprocessedKeys;\n    }\n\n    /**\n     * DynamoDBFormatter specifically for wrapping DynamoDB response objects.\n     *\n     * @function formatOutput\n     * @memberOf DynamoDBFormatter#\n     * @params {object} response Response object directly passed out by the service.\n     * @returns {object} Wrapped up response object.\n     */\n    this.formatOutput = function(response) {\n        var outputMap = {\"Attributes\": formatAttrValOutput,\n                         \"Item\": formatAttrValOutput,\n                         \"Items\": formatItems,\n                         \"ItemCollectionMetrics\": formatMetrics,\n                         \"LastEvaluatedKey\": formatAttrValOutput,\n                         \"Responses\": formatResponses,\n                         \"UnprocessedKeys\": formatUnprocessedKeys,\n                         \"UnprocessedItems\": formatUnprocessedItems};\n\n\n        var data = response.data;\n        if (data) {\n            for (var key in data) {\n                if (data.hasOwnProperty(key)) {\n                    var formatFunc = outputMap[key];\n                    if (formatFunc) {\n                        response.data[key] = formatFunc(data[key]);\n                    }\n                }\n            }\n        }\n    };\n\n    /**\n     * DynamoDBFormatter specifically for unwrapping DynamoDB request objects.\n     *\n     * @function formatInput\n     * @memberOf DynamoDBFormatter#\n     * @params {object} request Request object created by the service.\n     * @return {object} Returns aws sdk version of the request.\n     */\n    this.formatInput = function (request) {\n        var paramsCopy = {};\n        var params = request.params;\n\n        for (var key in params) {\n            if (params.hasOwnProperty(key)) {\n                var param = params[key];\n                var formatFunc = inputMap[key];\n                if (formatFunc) {\n                    param = formatFunc(param);\n                }\n                paramsCopy[key] = param;\n            }\n        }\n\n        request.params = paramsCopy;\n    };\n}\n\nif (typeof(module) !== \"undefined\") {\n    var exports = module.exports = {};\n    exports.DynamoDBFormatter = DynamoDBFormatter;\n}\n\nwindow.DynamoDBFormatter = DynamoDBFormatter;\n",
      "type": "blob"
    },
    "lib/aws-cognito.min": {
      "path": "lib/aws-cognito.min",
      "content": "/**\n * Copyright 2014 Amazon.com,\n * Inc. or its affiliates. All Rights Reserved.\n * \n * Licensed under the Amazon Software License (the \"License\").\n * You may not use this file except in compliance with the\n * License. A copy of the License is located at\n * \n *     http://aws.amazon.com/asl/\n * \n * or in the \"license\" file accompanying this file. This file is\n * distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, express or implied. See the License\n * for the specific language governing permissions and\n * limitations under the License. \n */\n\n\nif(void 0===AWS)throw new Error(\"AWS SDK must be loaded before loading the Sync Manager.\");AWS.CognitoSyncManager=function(a){a=a||{};var b=\"CognitoJavaScriptSDK/1\";this.provider=AWS.config.credentials,this.identityPoolId=this.provider.params.IdentityPoolId,this.region=AWS.config.region,this.logger=a.log,\"function\"!=typeof this.logger&&(this.logger=function(){}),this.local=new AWS.CognitoSyncManager.LocalStorage({DataStore:AWS.CognitoSyncManager.StoreLocalStorage}),this.remote=new AWS.CognitoSyncManager.RemoteStorage(this.identityPoolId,this.provider),this.remote.setUserAgent(b)},AWS.CognitoSyncManager.prototype.openOrCreateDataset=function(a,b){var c=this,d=new RegExp(\"^[a-zA-Z0-9_.:-]{1,128}$\");d.test(a)?this.local.createDataset(this.getIdentityId(),a,function(a,d){return a?b(a,null):void b(null,new AWS.CognitoSyncManager.Dataset(d,c.provider,c.local,c.remote,c.logger))}):b(new Error(\"Dataset name must match the pattern \"+d.toString()))},AWS.CognitoSyncManager.prototype.listDatasets=function(a){this.local.getDatasets(this.getIdentityId(),a)},AWS.CognitoSyncManager.prototype.refreshDatasetMetadata=function(a){var b=this;this.remote.getDatasets(function(c,d){var e=[],f=function(a){b.local.updateDatasetMetadata(b.getIdentityId(),a,g)},g=function(b,c){e.push(c),d.length>0?f(d.shift()):a(null,e)};d.length>0?f(d.shift(),a):a(null,[])})},AWS.CognitoSyncManager.prototype.wipeData=function(){this.provider.clearCachedId(),this.local.wipeData()},AWS.CognitoSyncManager.prototype.getIdentityId=function(){return this.provider.identityId},AWS=AWS||{},AWS.CognitoSyncManager=AWS.CognitoSyncManager||{},AWS.CognitoSyncManager.Conflict=function(){var a=function(a,b){if(!a||!b)throw new Error(\"Remote and local records cannot be null.\");if(!a.getKey||!b.getKey)throw new Error(\"Records are not record objects.\");if(a.getKey()!==b.getKey())throw new Error(\"Remote and local keys do not match.\");this.key=a.getKey(),this.remoteRecord=a,this.localRecord=b};return a.prototype.getKey=function(){return this.key},a.prototype.getRemoteRecord=function(){return this.remoteRecord},a.prototype.getLocalRecord=function(){return this.localRecord},a.prototype.resolveWithRemoteRecord=function(){return this.remoteRecord.setModified(!1),this.remoteRecord},a.prototype.resolveWithLocalRecord=function(){return this.localRecord.setSyncCount(this.remoteRecord.getSyncCount()),this.localRecord.setModified(!0),this.localRecord},a.prototype.resolveWithValue=function(a){return new AWS.CognitoSyncManager.Record({Key:this.remoteRecord.getKey(),Value:a,SyncCount:this.remoteRecord.getSyncCount(),LastModifiedDate:new Date,LastModifiedBy:this.localRecord.getLastModifiedBy(),DeviceLastModifiedDate:new Date,Modified:!0})},a}(),AWS=AWS||{},AWS.CognitoSyncManager=AWS.CognitoSyncManager||{},AWS.CognitoSyncManager.Dataset=function(){var a=function(a,b,c,d,e){this.MAX_RETRY=3,this.datasetName=a,this.provider=b,this.local=c,this.remote=d,this.logger=e||function(){}};return a.prototype.validateKey=function(a){var b=new RegExp(\"^[a-zA-Z0-9_.:-]{1,128}$\");return b.test(a)},a.prototype.put=function(a,b,c){return this.validateKey(a)?void this.local.putValue(this.getIdentityId(),this.datasetName,a,b,c):c(new Error(\"Invalid key.\"))},a.prototype.remove=function(a,b){return this.validateKey(a)?void this.local.putValue(this.getIdentityId(),this.datasetName,a,null,b):b(new Error(\"Invalid key.\"))},a.prototype.get=function(a,b){return this.validateKey(a)?void this.local.getValue(this.getIdentityId(),this.datasetName,a,b):b(new Error(\"Invalid key.\"))},a.prototype.getAllRecords=function(a){this.local.getRecords(this.getIdentityId(),this.datasetName,a)},a.prototype.getDataStorage=function(a){this.getDatasetMetadata(function(b,c){return b?a(b):c?a(null,c.getDataStorage()):a(null,0)})},a.prototype.isChanged=function(a,b){return this.validateKey(a)?void this.local.getRecord(this.getIdentityId(),this.datasetName,a,function(a,c){b(null,c&&c.isModified())}):b(new Error(\"Invalid key.\"))},a.prototype.getDatasetMetadata=function(a){this.local.getDatasetMetadata(this.getIdentityId(),this.datasetName,a)},a.prototype.resolve=function(a,b){this.local.putRecords(this.getIdentityId(),this.datasetName,a,b)},a.prototype.putAll=function(a,b){var c=!0;for(var d in a)a.hasOwnProperty(d)&&(this.validateKey(d)||(c=!1));return c?void this.local.putAllValues(this.getIdentityId(),this.datasetName,a,b):b(new Error(\"Object contains invalid keys.\"))},a.prototype.getAll=function(a){var b,c={};this.local.getRecords(this.getIdentityId(),this.datasetName,function(d,e){if(d)return a(d);for(var f in e)e.hasOwnProperty(f)&&(b=e[f],b.isDeleted()||(c[b.getKey()]=b.getValue()));a(null,c)})},a.prototype.getIdentityId=function(){return this.provider.identityId},a.prototype.getModifiedRecords=function(a){this.local.getModifiedRecords(this.getIdentityId(),this.datasetName,a)},a.prototype.getLocalMergedDatasets=function(a){var b,c=[],d=this.datasetName+\".\";this.local.getDatasets(this.getIdentityId(),function(e,f){for(var g in f)f.hasOwnProperty(g)&&(b=f[g],0===b.getDatasetName().indexOf(d)&&c.push(b.getDatasetName()));a(null,c)})},a.prototype.synchronize=function(a,b){var c=this;return a=a||{},a.onSuccess=a.onSuccess||function(){},a.onFailure=a.onFailure||function(){},a.onConflict=a.onConflict||function(a,b,c){return c(!1)},a.onDatasetDeleted=a.onDatasetDeleted||function(a,b,c){return c(!1)},a.onDatasetsMerged=a.onDatasetsMerged||function(a,b,c){return c(!1)},void 0===b&&(b=this.MAX_RETRY),c.logger(\"Starting synchronization... (retires: \"+b+\")\"),0>b?a.onFailure(new Error(\"Synchronized failed: exceeded maximum retry count.\")):void this.getLocalMergedDatasets(function(d,e){return d&&a.onFailure(d),c.logger(\"Checking for locally merged datasets... found \"+e.length+\".\"),e.length>0?(c.logging(\"Deferring to .onDatasetsMerged.\"),a.onDatasetsMerged(c,e,function(d){return d?c.synchronize(a,--b):a.onFailure(new Error(\"Synchronization cancelled by onDatasetsMerged() callback returning false.\"))})):void c.local.getLastSyncCount(c.getIdentityId(),c.datasetName,function(d,e){return d?a.onFailure(d):(c.logger(\"Detecting last sync count... \"+e),void c.remote.listUpdates(c.datasetName,e,function(d,f){if(d)return a.onFailure(d);c.logger(\"Fetch remote updates... found \"+f.records.length+\".\");var g=f.getMergedDatasetNameList();if(c.logger(\"Checking for remote merged datasets... found \"+g.length+\".\"),g.length>0)return c.logger(\"Deferring to .onDatasetsMerged.\"),a.onDatasetsMerged(c,g,function(d){d?c._synchronizeInternal(a,--b):a.onFailure(new Error(\"Cancelled due to .onDatasetsMerged result.\"))});if(0!==e&&!f||f.isDeleted())return a.onDatasetDeleted(c,f.getDatasetName(),function(d){return c.logging(\"Dataset should be deleted. Deferring to .onDatasetDeleted.\"),d?(c.logging(\".onDatasetDeleted returned true, purging dataset locally.\"),c.local.purgeDataset(c.getIdentityId(),c.datasetName,function(d){return d?a.onFailure(d):c._synchronizeInternal(a,--b)})):(c.logging(\".onDatasetDeleted returned false, cancelling sync.\"),a.onFailure(new Error(\"Cancelled due to .onDatasetDeleted result.\")))});var h=f.getRecords(),i=f.getSyncCount(),j=f.getSyncSessionToken();c.logger(\"Checking for remote updates since last sync count... found \"+h.length+\".\"),h.length>0?c._synchronizeResolveLocal(h,function(d,f){return d?a.onFailure(d):(c.logger(\"Checking for conflicts... found \"+f.length+\".\"),void(f.length>0?(c.logger(\"Conflicts detected. Deferring to .onConflict.\"),a.onConflict(c,f,function(d){return d?void c._synchronizePushRemote(j,e,function(){return c.synchronize(a,--b)}):(c.logger(\".onConflict returned false. Cancelling sync.\"),a.onFailure(new Error(\"Sync cancelled. Conflict callback returned false.\")))})):(c.logger(\"No conflicts. Updating local records.\"),c.local.putRecords(c.getIdentityId(),c.datasetName,h,function(d){return d?a.onFailure(d):void c.local.updateLastSyncCount(c.getIdentityId(),c.datasetName,i,function(d){return d?a.onFailure(d):(c.logger(\"Finished resolving records. Restarting sync.\"),c.synchronize(a,--b))})}))))}):(c.logger(\"Nothing updated remotely. Pushing local changes to remote.\"),c._synchronizePushRemote(j,i,function(d){return d?(c.logger(\"Remote push failed. Likely concurrent sync conflict. Retrying...\"),c.synchronize(a,--b)):(c.logger(\"Sync successful.\"),a.onSuccess(c,h))}))}))})})},a.prototype._synchronizeResolveLocal=function(a,b){var c=this,d=[];return a&&a.length>0?void c.local.getRecords(c.getIdentityId(),c.datasetName,function(c,e){var f,g,h,i={};for(f=0;f<e.length;f++)i[e[f].getKey()]=e[f];for(f=0;f<a.length;f++)g=a[f].getKey(),h=i[g],h&&h.isModified()&&h.getValue()!==a[f].getValue()&&d.push(new AWS.CognitoSyncManager.Conflict(a[f],h));return b(null,d)}):b(null,d)},a.prototype._synchronizePushRemote=function(a,b,c){var d=this;this.getModifiedRecords(function(b,e){return e.length>0?void d.remote.putRecords(d.datasetName,e,a,function(a,b){a&&c(a),d.local.putRecords(d.getIdentityId(),d.datasetName,b,function(a){if(a)return c(a);var e=0;for(var f in b)b.hasOwnProperty(f)&&(e=e<b[f].getSyncCount()?b[f].getSyncCount():e);d.local.updateLastSyncCount(d.getIdentityId(),d.datasetName,e,function(a){return a?c(a):c(null,!0)})})}):c(null,!0)})},a}(),AWS=AWS||{},AWS.CognitoSyncManager=AWS.CognitoSyncManager||{},AWS.CognitoSyncManager.DatasetMetadata=function(){var a=function(a){if(a=a||{},this.datasetName=a.DatasetName||\"\",this.creationDate=new Date(a.CreationDate)||new Date,this.lastModifiedDate=new Date(a.LastModifiedDate)||new Date,this.lastModifiedBy=a.LastModifiedBy||\"\",this.dataStorage=a.DataStorage||0,this.recordCount=a.NumRecords||0,this.lastSyncCount=a.LastSyncCount||0,this.lastSyncDate=new Date(a.LastSyncDate)||new Date,this.dataStorage<0)throw new RangeError(\"Storage size cannot be negative.\");if(this.recordCount<0)throw new RangeError(\"Record count cannot be negative.\")};return a.prototype.getDatasetName=function(){return this.datasetName},a.prototype.setDatasetName=function(a){return this.datasetName=a,this},a.prototype.getCreationDate=function(){return this.creationDate},a.prototype.setCreationDate=function(a){return this.creationDate=new Date(a),this},a.prototype.getLastModifiedDate=function(){return this.lastModifiedDate},a.prototype.setLastModifiedDate=function(a){return this.lastModifiedDate=new Date(a),this},a.prototype.getLastModifiedBy=function(){return this.lastModifiedBy},a.prototype.setLastModifiedBy=function(a){return this.lastModifiedBy=a,this},a.prototype.getDataStorage=function(){return this.dataStorage},a.prototype.setDataStorage=function(a){return this.dataStorage=a,this},a.prototype.getRecordCount=function(){return this.recordCount},a.prototype.setRecordCount=function(a){return this.recordCount=a,this},a.prototype.getLastSyncCount=function(){return this.lastSyncCount},a.prototype.setLastSyncCount=function(a){return this.lastSyncCount=a,this},a.prototype.getLastSyncDate=function(){return this.lastSyncDate},a.prototype.setLastSyncDate=function(a){return this.lastSyncDate=a,this},a.prototype.toString=function(){return JSON.stringify(this.toJSON())},a.prototype.toJSON=function(){return{DatasetName:this.datasetName,CreationDate:this.creationDate,LastModifiedDate:this.lastModifiedDate,LastModifiedBy:this.lastModifiedBy,DataStorage:this.dataStorage,NumRecords:this.recordCount,LastSyncCount:this.lastSyncCount,LastSyncDate:this.lastSyncDate}},a}(),AWS=AWS||{},AWS.CognitoSyncManager=AWS.CognitoSyncManager||{},AWS.CognitoSyncManager.DatasetUpdates=function(){var a=function(a){this.datasetName=a,this.records=[],this.syncCount=0,this.syncSessionToken=\"\",this.exists=!0,this.deleted=!1,this.mergedDatasetNameList=[]};return a.prototype.getDatasetName=function(){return this.datasetName},a.prototype.setDatasetName=function(a){return this.datasetName=a,this},a.prototype.getRecords=function(){return this.records},a.prototype.addRecord=function(a){return this.records.push(a),this},a.prototype.getSyncCount=function(){return this.syncCount},a.prototype.setSyncCount=function(a){return this.syncCount=a,this},a.prototype.getSyncSessionToken=function(){return this.syncSessionToken},a.prototype.setSyncSessionToken=function(a){return this.syncSessionToken=a,this},a.prototype.isExists=function(){return this.exists},a.prototype.setExists=function(a){return this.exists=a,this},a.prototype.isDeleted=function(){return this.deleted},a.prototype.setDeleted=function(a){return this.deleted=a,this},a.prototype.getMergedDatasetNameList=function(){return this.mergedDatasetNameList},a.prototype.setMergedDatasetNameList=function(a){return this.mergedDatasetNameList=a,this},a}(),AWS=AWS||{},AWS.CognitoSyncManager=AWS.CognitoSyncManager||{},AWS.CognitoSyncManager.LocalStorage=function(){var a=function(a){a=a||{},this.store=null,this.meta=null,this.store=a.DataStore?new a.DataStore:new AWS.CognitoSyncManager.StoreInMemory};return a.prototype.getMetadataKey=function(a,b){return a+\".\"+b},a.prototype.loadMetadataCache=function(a,b){var c=this;this.store.get(\"_internal\",\"_metadata\",a,function(a,d){return a?b(a,null):(d||(d={}),c.meta=d,void b(null,d))})},a.prototype.saveMetadataCache=function(a,b,c){this.store.set(\"_internal\",\"_metadata\",a,b,function(a){return a?c(a):c(null,b)})},a.prototype.createDataset=function(a,b,c){var d=this;return this.getDatasetMetadata(a,b,function(e,f){var g=(new Date).getTime();f?c(null,b):(f=new AWS.CognitoSyncManager.DatasetMetadata({DatasetName:b,CreationDate:g,LastModifiedDate:g}),d.setDatasetMetadata(a,b,f,function(){}),c(null,b))}),this},a.prototype.getDatasetMetadata=function(a,b,c){var d=this.getMetadataKey(a,b);return null!==this.meta?this.meta[d]?c(null,new AWS.CognitoSyncManager.DatasetMetadata(this.meta[d])):c(null,void 0):this.loadMetadataCache(a,function(a,b){b[d]?c(null,new AWS.CognitoSyncManager.DatasetMetadata(b[d])):c(null,void 0)}),this},a.prototype.setDatasetMetadata=function(a,b,c,d){return this.meta[this.getMetadataKey(a,b)]=c.toJSON(),this.saveMetadataCache(a,this.meta,d),this},a.prototype.getValue=function(a,b,c,d){this.getRecord(a,b,c,function(a,b){return b?d(null,b.getValue()):d(null,void 0)})},a.prototype.putValue=function(a,b,c,d,e){var f=this;this.getRecord(a,b,c,function(g,h){return h&&h.getValue()==d?e(null,h):(h||(h=new AWS.CognitoSyncManager.Record),h.setKey(c).setValue(d).setModified(!0).setSyncCount(h?h.getSyncCount():0).setDeviceLastModifiedDate(new Date),void f.store.set(a,b,c,h.toJSON(),function(c){return c?e(c):void f.updateLastModifiedTimestamp(a,b,function(a){return e(a,h)})}))})},a.prototype.getValueMap=function(a,b,c){var d,e={};this.getRecords(a,b,function(a,b){for(var f in b)b.hasOwnProperty(f)&&(d=b[f],d.isDeleted()||(e[d.getKey()]=d.getValue()));c(null,e)})},a.prototype.putAllValues=function(a,b,c,d){var e=this,f=[];for(var g in c)c.hasOwnProperty(g)&&f.push(g);var h=function(g){var i;return g?d(g):void(f.length>0?(i=f.shift(),e.putValue(a,b,i,c[i],h)):d(null,!0))};h(null,null)},a.prototype.getDatasets=function(a,b){var c=[];if(null!==this.meta){for(var d in this.meta)this.meta.hasOwnProperty(d)&&c.push(new AWS.CognitoSyncManager.DatasetMetadata(this.meta[d]));return b(null,c)}this.loadMetadataCache(a,function(a,d){for(var e in d)d.hasOwnProperty(e)&&c.push(new AWS.CognitoSyncManager.DatasetMetadata(d[e]));return b(null,c)})},a.prototype.updateDatasetMetadata=function(a,b,c){var d=this;this.getDatasetMetadata(a,b.getDatasetName(),function(e,f){e&&c(e),f||(f=new AWS.CognitoSyncManager.DatasetMetadata),f.setDatasetName(b.getDatasetName()).setCreationDate(b.getCreationDate()).setLastModifiedDate(b.getLastModifiedDate()).setLastModifiedBy(b.getLastModifiedBy()).setLastSyncCount(b.getLastSyncCount()).setRecordCount(b.getRecordCount()).setDataStorage(b.getDataStorage()),d.meta[d.getMetadataKey(a,b.getDatasetName())]=f.toJSON(),d.saveMetadataCache(a,d.meta,function(a){return a?c(a):c(null,f)})})},a.prototype.getRecord=function(a,b,c,d){this.store.get(a,b,c,function(a,b){return b?d(null,new AWS.CognitoSyncManager.Record(b)):d(new Error(\"Key doesn't exist.\"),null)})},a.prototype.getRecords=function(a,b,c){var d=[];this.store.getAll(a,b,function(a,b){for(var e in b)b.hasOwnProperty(e)&&d.push(new AWS.CognitoSyncManager.Record(b[e]));c(null,d)})},a.prototype.putRecords=function(a,b,c,d){var e=this;c=c||[];var f=function(){c.length>0&&e.updateAndClearRecord(a,b,c.shift(),function(a){return a?d(a):0===c.length?d(null,!0):void f()})};f()},a.prototype.deleteDataset=function(a,b,c){var d=this;this.store.removeAll(a,b,function(e){return e?c(e):void d.getDatasetMetadata(a,b,function(b,e){return b?c(b):(e.setLastModifiedDate(new Date),e.setSyncCount(-1),void d.updateDatasetMetadata(a,e,function(a){return a?c(a):c(null,!0)}))})})},a.prototype.purgeDataset=function(a,b,c){this.deleteDataset(a,b,function(d){d&&c(d),delete this.meta[b],this.saveMetadataCache(a,b,this.meta,function(a,b){c(null,b)})})},a.prototype.getLastSyncCount=function(a,b,c){this.getDatasetMetadata(a,b,function(a,b){return b?c(null,b.getLastSyncCount()):void c(new Error(\"Dataset doesn't exist.\"),null)})},a.prototype.getModifiedRecords=function(a,b,c){var d=[];this.getRecords(a,b,function(a,b){for(var e=0;e<b.length;e++)b[e].isModified()&&d.push(b[e]);c(null,d)})},a.prototype.updateLastSyncCount=function(a,b,c,d){var e=this;this.getDatasetMetadata(a,b,function(b,f){b&&d(b),f.setLastSyncCount(c).setLastSyncDate(new Date),e.updateDatasetMetadata(a,f,function(a){a&&d(a),d(null,!0)})})},a.prototype.wipeData=function(a){this.store.wipe(a)},a.prototype.updateLastModifiedTimestamp=function(a,b,c){var d=this;this.getDatasetMetadata(a,b,function(b,e){return b?c(b):(e.setLastModifiedDate(new Date),void d.updateDatasetMetadata(a,e,function(a){return a?c(a):c(null,!0)}))})},a.prototype.removeRecord=function(a,b,c){this.store.remove(a,b,c,function(a){return a?callback(a):callback(null,!0)})},a.prototype.updateAndClearRecord=function(a,b,c,d){this.store.set(a,b,c.getKey(),c.toJSON(),function(a){return a?d(a):d(null,!0)})},a}(),AWS=AWS||{},AWS.CognitoSyncManager=AWS.CognitoSyncManager||{},AWS.CognitoSyncManager.Record=function(){var a=function(a){a=a||{},this.key=a.Key||\"\",this.value=a.Value||\"\",this.syncCount=a.SyncCount||0,this.lastModifiedDate=a.LastModifiedDate?new Date(a.LastModifiedDate):new Date,this.lastModifiedBy=a.LastModifiedBy||\"\",this.deviceLastModifiedDate=a.DeviceLastModifiedDate?new Date(a.DeviceLastModifiedDate):new Date,this.modified=a.Modified||!1};return a.prototype.getKey=function(){return this.key},a.prototype.setKey=function(a){return this.key=a,this},a.prototype.getValue=function(){return this.value},a.prototype.setValue=function(a){return this.value=a,this},a.prototype.getSyncCount=function(){return this.syncCount},a.prototype.setSyncCount=function(a){return this.syncCount=a,this},a.prototype.getLastModifiedDate=function(){return new Date(this.lastModifiedDate)},a.prototype.setLastModifiedDate=function(a){return this.lastModifiedDate=new Date(a),this},a.prototype.getLastModifiedBy=function(){return this.lastModifiedBy},a.prototype.setLastModifiedBy=function(a){return this.lastModifiedBy=a,this},a.prototype.getDeviceLastModifiedDate=function(){return new Date(this.deviceLastModifiedDate)},a.prototype.setDeviceLastModifiedDate=function(a){return this.deviceLastModifiedDate=new Date(a),this},a.prototype.isModified=function(){return this.modified},a.prototype.setModified=function(a){return this.modified=a,this},a.prototype.isDeleted=function(){return null===this.value},a.prototype.toString=function(){return JSON.stringify(this)},a.prototype.toJSON=function(){return{Key:this.key,Value:this.value,SyncCount:this.syncCount,LastModifiedDate:this.lastModifiedDate,LastModifiedBy:this.lastModifiedBy,DeviceLastModifiedDate:this.deviceLastModifiedDate,Modified:this.modified}},a}(),AWS=AWS||{},AWS.CognitoSyncManager=AWS.CognitoSyncManager||{},AWS.CognitoSyncManager.RemoteStorage=function(){var a=function(a,b){this.identityPoolId=a,this.provider=b,this.client=new AWS.CognitoSync};return a.prototype.userAgent=\"\",a.prototype.getIdentityId=function(){return this.provider.identityId},a.prototype.getDatasets=function(a){var b=this,c=[],d=null,e=function(a,c){b.client.listDatasets({IdentityId:b.getIdentityId(),IdentityPoolId:b.identityPoolId,MaxResults:64,NextToken:a},c)},f=function(b,g){for(var h=g.Datasets||[],i=0;i<h.length;i++)c.push(new AWS.CognitoSyncManager.DatasetMetadata(h[i]));d=g.NextToken,d?e(d,f):a(null,c)};e(d,f)},a.prototype.listUpdates=function(a,b,c){var d=this,e=null,f=new AWS.CognitoSyncManager.DatasetUpdates(a),g=function(c,e){d.client.listRecords({DatasetName:a,IdentityId:d.getIdentityId(),IdentityPoolId:d.identityPoolId,LastSyncCount:b,MaxResults:1024,NextToken:c},e)},h=function(a,b){if(a)return c(a);b=b||{};for(var d,i=b.Records||[],j=0;j<i.length;j++)d=new AWS.CognitoSyncManager.Record(i[j]),d.setModified(!1),f.addRecord(d);f.setSyncSessionToken(b.SyncSessionToken).setSyncCount(b.DatasetSyncCount).setExists(b.DatasetExists).setDeleted(b.DatasetDeletedAfterRequestedSyncCount),b.MergedDatasetNames&&f.setMergedDatasetNameList(b.MergedDatasetNames),e=b.NextToken,e?g(e,h):c(null,f)};g(null,h)},a.prototype.putRecords=function(a,b,c,d){var e,f=this,g=[];for(var h in b)b.hasOwnProperty(h)&&(e=b[h],g.push({Key:e.getKey(),Op:e.getValue()?\"replace\":\"remove\",SyncCount:e.getSyncCount(),DeviceLastModifiedDate:e.getDeviceLastModifiedDate(),Value:e.getValue()}));this.client.updateRecords({DatasetName:a,IdentityId:f.getIdentityId(),IdentityPoolId:f.identityPoolId,SyncSessionToken:c,RecordPatches:g},function(b,c){var e=\"string\"==typeof a?a:\"(invalid dataset name)\";if(b)return d(new Error(\"Failed to update records in dataset: \"+e+\" (\"+b.message+\")\"),null);for(var f,g=[],h=0;h<c.Records.length;h++)f=new AWS.CognitoSyncManager.Record(c.Records[h]),f.setModified(!1),g.push(f);return d(null,g)})},a.prototype.deleteDataset=function(a,b){this.client.deleteDataset({DatasetName:a,IdentityId:this.getIdentityId(),IdentityPoolId:this.identityPoolId},function(a,c){return a?b(new Error(\"Failed to delete dataset.\"),null):b(null,c)})},a.prototype.getDatasetMetadata=function(a,b){this.client.describeDataset({DatasetName:a,IdentityId:this.getIdentityId(),IdentityPoolId:this.identityPoolId},function(a,c){return a?b(new Error(\"Failed to get dataset metadata.\"),null):b(null,new AWS.CognitoSyncManager.DatasetMetadata(c.Dataset))})},a.prototype.setUserAgent=function(a){this.userAgent=a},a}(),AWS=AWS||{},AWS.CognitoSyncManager=AWS.CognitoSyncManager||{},AWS.CognitoSyncManager.StoreInMemory=function(){var a=function(){this.store={}};return a.prototype.makeKey=function(a,b){return a+\".\"+b},a.prototype.get=function(a,b,c,d){var e=this.makeKey(a,b);return a&&b?this.store[e]&&this.store[e][c]?d(null,this.store[e][c]):d(null,void 0):d(new Error(\"You must provide an identity id and dataset name.\"),null)},a.prototype.getAll=function(a,b,c){var d=this.makeKey(a,b);return a&&b?c(null,this.store[d]):c(new Error(\"You must provide an identity id and dataset name.\"),null)},a.prototype.set=function(a,b,c,d,e){var f=this.makeKey(a,b),g=this.store[f]||{};return g[c]=d,this.store[f]=g,e(null,g)},a.prototype.setAll=function(a,b,c,d){var e=this.makeKey(a,b);return this.store[e]=c,d(null,c)},a.prototype.remove=function(a,b,c,d){var e=this.makeKey(a,b),f=JSON.parse(this.store[e]);return f||(f={}),delete f[c],this.store[e]=JSON.stringify(f),d(null,!0)},a.prototype.removeAll=function(a,b,c){var d=this.makeKey(a,b);return delete this.store[d],c(null,!0)},a.prototype.wipe=function(a){return this.store={},a(null,!0)},a}(),AWS=AWS||{},AWS.CognitoSyncManager=AWS.CognitoSyncManager||{},AWS.CognitoSyncManager.StoreLocalStorage=function(){var a=function(){this.store=window.localStorage};return a.prototype.makeKey=function(a,b){return a+\".\"+b},a.prototype.get=function(a,b,c,d){var e=this.makeKey(a,b);if(!a||!b)return d(new Error(\"You must provide an identity id and dataset name.\"),null);var f=JSON.parse(this.store.getItem(e));return f&&f[c]?d(null,f[c]):d(null,void 0)},a.prototype.getAll=function(a,b,c){var d=this.makeKey(a,b);return a&&b?c(null,JSON.parse(this.store.getItem(d))):c(new Error(\"You must provide an identity id and dataset name.\"),null)},a.prototype.set=function(a,b,c,d,e){var f=this.makeKey(a,b),g=JSON.parse(this.store.getItem(f));return g||(g={}),g[c]=d,this.store.setItem(f,JSON.stringify(g)),e(null,g),this},a.prototype.setAll=function(a,b,c,d){var e=this.makeKey(a,b);return this.store.setItem(e,JSON.stringify(c)),d(null,c)},a.prototype.remove=function(a,b,c,d){var e=this.makeKey(a,b),f=JSON.parse(this.store.getItem(e));return f||(f={}),delete f[c],this.store.setItem(e,JSON.stringify(f)),d(null,!0)},a.prototype.removeAll=function(a,b,c){var d=this.makeKey(a,b);return this.store.removeItem(d),c(null,!0)},a.prototype.wipe=function(a){for(var b in this.store)this.store.hasOwnProperty(b)&&-1===b.indexOf(\"aws.cognito.identity\")&&this.store.removeItem(b);return a?a(null,!0):this},a}();\n",
      "type": "blob"
    }
  },
  "progenitor": {
    "url": "http://www.danielx.net/editor/"
  },
  "entryPoint": "main",
  "remoteDependencies": [
    "https://sdk.amazonaws.com/js/aws-sdk-2.1.22.js",
    "http://cdn.pubnub.com/pubnub-3.7.1.js"
  ],
  "repository": {
    "branch": "master",
    "default_branch": "master",
    "full_name": "STRd6/swag",
    "homepage": null,
    "description": "Serverless Working Applications Group",
    "html_url": "https://github.com/STRd6/swag",
    "url": "https://api.github.com/repos/STRd6/swag",
    "publishBranch": "gh-pages"
  },
  "dependencies": {}
});