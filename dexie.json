{
  "source": {
    "API.md": {
      "path": "API.md",
      "content": "OS\n===\n\nThese OS methods are exposed to apps via postMessage.\n\n`saveFile`\n----------\n\n`saveFile blob, [path]`\n\nSaves a file to the file system.\n\nPrompts for a path if no path is given.\n\nPrompts for override if a file exists at that path.\n\n\n`openFile`\n----------\n\n`openFile options`\n\nDisplay the OS file chooser.\n\nReturns a promise that is fulfilled with the selected file or rejected if\ncancelled.\n\n\n`readFile`\n----------\n\n`readFile path`\n\nRead a file from the system.\n\nReturns a promise fulfilled with a blob or rejected with an error.\n\n`list`\n------\n\n`list path`\n\nList directory contents. Returns a promise fulfilled with a directory listing\n\n    path: \"\"\n    folders: [\"\",...]\n    files: [\"\",...]\n\n\n`send`\n------\n\n`send appId, method, args...`\n\nSend a message to another app.\n\nApp\n===\n\nThese App methods are exposed to the OS to handle file interactions, user\ninteractions and App<->App interactions.\n\nDrop File\n\n`loadFile blob`\n\nDrop Directory\n\n`loadDirectory directoryListing`\n\n\nFS Notifications\n----------------\n\nShould be able to subscribe to notifications when file/directory contents change.\n\n\nStandard Streams and Backpressure\n---------------------------------\n\nApps should be able to read data as a stream. Streams should block and wait if\nthe process gets backed up. The blockage should propagate back reducing the output\nof the upstream processes. When the process becomes unblocked the upstream will\nunblock as well.\n\nJust doodling...\n\nHandler is called when data is written to the stream from the source. The\nhandler won't be called again until `next` is called. If `next` is called with\nan error the error will be propagated back.\n\nData can be any JS atom that can survive `postMessage`.[1]\n\n[1]: https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Structured_clone_algorithm\n\n    inputStream.attach (data, next) ->\n      outputStream.write(data)\n      .then ->\n        next()\n      .catch (e) ->\n        next(e)\n\n    inputStream.attach (data, next) ->\n      outputStream.write(data, next)\n\nCat\n\n    STDIN (data, next) ->\n      STDOUT(data, next)\n\nSplit\n\nDuplicate an input to two output streams\n\n    STDIN (data, next) ->\n      fn1 = null\n      fn2 = null\n\n      p1 = new Promise (resolve, reject) ->\n        fn1 = (arg) ->\n          if arguments.length\n            reject arg\n          else\n            resolve()\n\n      p2 = ...\n\n      Promise.all [p1, p2]\n      .then next\n\n      outStream1.write(data, f1)\n      outStream2.write(data, f2)\n\nJoin\n\nTODO: This could write one extra atom before backing up...\nProbably need to keep track of a promise for pending writes to wait on before\nwriting again.\n\n    S1 (data, next) ->\n      out data, next\n\n    S2 (data, next) ->\n      out data, next\n",
      "mode": "100644",
      "type": "blob"
    },
    "LICENSE": {
      "path": "LICENSE",
      "content": "The MIT License (MIT)\n\nCopyright (c) 2015 Daniel X Moore\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n",
      "mode": "100644",
      "type": "blob"
    },
    "README.md": {
      "path": "README.md",
      "content": "# S\\*W\\*A\\*G\n\nServerless Web Applications Group\n",
      "mode": "100644",
      "type": "blob"
    },
    "TODO.md": {
      "path": "TODO.md",
      "content": "TODO\n====\n\nObserve and display auth status (user name/email)\n\nHandle auth refresh when credentials expire\n\nMultiple Simultaneous Editors\n\nDrag to Editor (Files and Folders)\n\nWindowing System\n\nBasic OS API\n\nCache directory listings so we don't need to refetch when opening the directories again\n\nUpdate listing when writing files\n\nTOLater\n-------\n\nLog out button\n\nMaintain identity id from unauth -> auth user\n\n\nDone\n----\n\nEmbed pixel editor (load and save files)\n\nDelete File\n\nAuto-login\n\nDisplay Filetree\n\nExpand/collapse folders\n",
      "mode": "100644",
      "type": "blob"
    },
    "amazon_login.coffee": {
      "path": "amazon_login.coffee",
      "content": "{pinvoke} = require \"./util\"\n\namazon.Login.setClientId('amzn1.application-oa2-client.29b275f9076a406c90a66b025fab96bf')\n\nqueryUserInfo = (token) ->\n  fetch \"https://api.amazon.com/user/profile\",\n    headers:\n      Authorization: \"bearer #{token}\"\n      Accept: \"application/json\"\n  .then (response) ->\n    response.json()\n  .then (json) ->\n    console.log json\n  .catch (e) ->\n    console.error e\n\nmodule.exports =\n  awsLogin: (options) ->\n    new Promise (resolve, reject) ->\n      amazon.Login.authorize options, (resp) ->\n        if resp.error\n          return reject resp\n\n        console.log resp\n        token = resp.access_token\n        creds = AWS.config.credentials\n\n        logins =\n          'www.amazon.com': token\n\n        creds.params.Logins = logins\n        creds.expired = true\n\n        queryUserInfo(token)\n\n        # NOTE: This sets AWS.config.credentials as a side effect\n        pinvoke AWS.config.credentials, \"get\"\n        .then ->\n          resolve logins\n        , reject\n",
      "mode": "100644",
      "type": "blob"
    },
    "db.coffee": {
      "path": "db.coffee",
      "content": "module.exports = (dbName='fs') ->\n  db = new Dexie dbName\n\n  db.version(1).stores\n  \tfiles: 'path, blob, type, createdAt, updatedAt'\n\n  return db\n",
      "mode": "100644",
      "type": "blob"
    },
    "dynamo_stuff.coffee": {
      "path": "dynamo_stuff.coffee",
      "content": "{pinvoke} = require \"./util\"\n\nwriteToDynamoDB = (table, id, path, sha) ->\n  time = \"#{+new Date}\"\n\n  # Write the item to the table\n  params =\n    Item:\n      owner: {S: id}\n      path: {S: path}\n      created_at: {S: time}\n      sha: {S: sha}\n\n  pinvoke table, \"putItem\", params\n\nqueryDynamoDB = (table, id) ->\n  # TODO: Start from\n  # TODO: Additional requests when results are incomplete\n  table = table\n\n  params =\n    AttributesToGet: [\n      \"path\"\n      \"sha\"\n    ]\n    KeyConditions:\n      owner:\n        ComparisonOperator: \"EQ\"\n        AttributeValueList: [S: id]\n\n  pinvoke table, \"query\", params\n\nreadFromDynamoDB = (table, id, path) ->\n  params =\n    Key:\n      owner: {S: id}\n      path: {S: path}\n\n  # Read the item from the table\n  pinvoke table, \"getItem\", params\n",
      "mode": "100644",
      "type": "blob"
    },
    "experiments/dexie-fs.coffee": {
      "path": "experiments/dexie-fs.coffee",
      "content": "# FS\n\nDexieFS = require \"../fs/dexie-driver\"\nFilesystem = require \"../fs/filesystem\"\n\nfs = Filesystem DexieFS('fs')\n\nfs.cd \"goose\"\nfs.cd \"rad\"\n\nfs.cd \"/grass\"\n\nfs.ls \"/\"\n.then (results) ->\n  console.log results\n\nfs.write \"test\", new Blob ['duder']\n.then ->\n  fs.read(\"test\")\n  .then (file) ->\n    console.log file\n  .catch (e) ->\n    console.error e\n\n# TODO\n\n# Mount filesystems at directories\n#\n# /local\n# /s3\n# ...\n",
      "mode": "100644",
      "type": "blob"
    },
    "experiments/spreadsheet.coffee": {
      "path": "experiments/spreadsheet.coffee",
      "content": "style = document.createElement \"style\"\nstyle.innerHTML = require \"../style\"\ndocument.head.appendChild style\n\nObservable = require \"observable\"\n\nClusterize = require \"../lib/clusterize\"\n\no = (value, type) ->\n  attribute = Observable(value)\n  if type\n    attribute.type = type\n\n  attribute.value = attribute\n\n  return attribute\n\ndata = [0...10].map (i) ->\n  id: o i\n  name: o \"yolo\"\n  color: o \"#FF0000\", \"color\"\n\nRowTemplate = require \"../templates/row\"\n\nInputTemplate = require \"../templates/input\"\n\nRowView = (datum) ->\n  RowTemplate\n    cells: Object.keys(datum).map (key) ->\n      value = datum[key]\n\n      InputTemplate value\n\nTableTemplate = require \"../templates/table\"\n\n# TableView takes some data and returns an object with a container element\n# displaying the table data that can be inserted into the DOM.\n# The DOM elements are inserted in chunks so the table should scale to\n# displaying large volumes of data.\n# The view will have the ability to filter/sort the data.\n# When the layout changes the refresh method should be called to ensure the\n# scrollable and visible items are correct for the new container size.\nTableView = (data) ->\n  containerElement = TableTemplate\n    headers: Object.keys data[0]\n  tableBody = containerElement.children[0].children[1]\n\n  filterFn = (datum) ->\n    true\n\n  sortFn = (a, b) ->\n    a.id() - b.id()\n\n  filterAndSort = (data, filterFn, sortFn) ->\n    filterFn ?= -> true\n    filteredData = data.filter(filterFn)\n\n    if sortFn\n      filteredData.sort(sortFn)\n    else\n      filteredData\n\n  rowElements = ->\n    filterAndSort(data, filterFn, sortFn).map RowView\n\n  clusterize = new Clusterize\n    scrollElem: containerElement\n    contentElem: tableBody\n    rows:  rowElements()\n\n  element: containerElement\n  refresh: ->\n    clusterize.refresh()\n\nsampleMenuParsed = require \"../samples/notepad-menu\"\nMenuView = require \"../views/menu\"\n{element} = MenuView(sampleMenuParsed)\ndocument.body.appendChild element\n\ntableView = TableView(data)\ndocument.body.appendChild tableView.element\ntableView.refresh()\n",
      "mode": "100644",
      "type": "blob"
    },
    "fs/dexie-driver.coffee": {
      "path": "fs/dexie-driver.coffee",
      "content": "{uniq} = require \"../util\"\n\nmodule.exports = (db) ->\n  Files = db.files\n\n  read: (path) ->\n    Files.get(path)\n\n  write: (path, blob) ->\n    Files.put\n      path: path\n      blob: blob\n      type: blob.type\n      updatedAt: +new Date\n\n  delete: (path) ->\n    Files.delete(path)\n\n  list: (dir) ->\n    Files.where(\"path\").startsWith(dir).toArray()\n    .then (results) ->\n      uniq results.map ({path}) ->\n        path = path.replace(dir, \"\").replace(/\\/.*$/, \"/\")\n",
      "mode": "100644",
      "type": "blob"
    },
    "fs/filesystem.coffee": {
      "path": "fs/filesystem.coffee",
      "content": "module.exports = (driver) ->\n  SEPARATOR = \"/\"\n\n  pwd = SEPARATOR\n\n  normalizeDir = (dir) ->\n    normalizePath(dir).replace(/\\/?$/, SEPARATOR)\n\n  normalizePath = (path) ->\n    path.replace(/\\/\\/+/, SEPARATOR)\n    .replace(/\\/[^/]*\\/\\.\\./g, \"\") # handle .. paths\n    .replace(/\\/\\.\\//g, SEPARATOR) # handle . paths\n\n  join = (paths...) ->\n    normalizePath paths.join SEPARATOR\n\n  parsePath = (path) ->\n    if path.indexOf(SEPARATOR) is 0\n      normalizePath path\n    else\n      join(pwd, path)\n\n  read: (path) ->\n    path = parsePath path\n    driver.read(path)\n\n  write: (path, blob) ->\n    path = parsePath path\n    driver.write(path, blob)\n\n  ls: (dir=pwd) ->\n    dir = normalizeDir parsePath dir\n    driver.list(dir)\n\n  rm: (path) ->\n    path = parsePath path\n    driver.delete(path)\n\n  cd: (path) ->\n    pwd = normalizeDir parsePath path\n\n  pwd: ->\n    pwd\n",
      "mode": "100644",
      "type": "blob"
    },
    "fs/ram-driver.coffee": {
      "path": "fs/ram-driver.coffee",
      "content": "# A RAM backed filesystem\n# Files are objects with a path, blob, type, updatedAt and createdAt properties\n\nmodule.exports = (files=[]) ->\n  notFound = \"File not found\"\n\n  self =\n    # Returns a promise that is fulfilled with the file if found or rejected \n    # with an error if no file is found at that path\n    read: (path) ->\n      P ->\n        [file] = files.filter ({path:filePath}) ->\n          path is filePath\n\n        if file\n          return file\n        else\n          throw notFound\n\n    # Write a blob to the file system at the given path\n    write: (path, blob) ->\n      self.read path\n      .catch (error) ->\n        if error is notFound\n          return\n        else\n          throw error\n      .then (file) ->\n        now = +new Date\n\n        if file\n          file.blob = blob\n          file.type = blob.type\n          file.updatedAt = now\n        else\n          files.push\n            path: path\n            blob: blob\n            type: blob.type\n            updatedAt: now\n            createdAt: now\n\n    # Delete the file at the given path\n    delete: (path) ->\n      P ->\n        files = files.filter ({path:filePath}) ->\n          path != filePath\n\n        return\n\n    # List the files and folders within a path\n    # returns a promise that is fulfilled with an array of strings\n    # files are strings that don't end in '/'\n    # folders are strings that end in '/'\n    list: (dir) ->\n      P ->\n        files.filter ({path}) ->\n          startsWith path, dir\n\n      .then (results) ->\n        uniq results.map ({path}) ->\n          path = path.replace(dir, \"\").replace(/\\/.*$/, \"/\")\n\n# Helper that lifts a function to a Promise chain\nP = (fn) ->\n  Promise.resolve().then fn\n\n{startsWith, uniq} = require \"../util\"\n",
      "mode": "100644",
      "type": "blob"
    },
    "fs/s3-driver.coffee": {
      "path": "fs/s3-driver.coffee",
      "content": "{log, pinvoke, startsWith, endsWith} = require \"../util\"\n\ndelimiter = \"/\"\n\nstatus = (response) ->\n  if response.status >= 200 && response.status < 300\n    return response\n  else\n    throw response\n\njson = (response) ->\n  response.json()\n\nblob = (response) ->\n  response.blob()\n\nuploadToS3 = (bucket, key, file, options={}) ->\n  {cacheControl} = options\n\n  cacheControl ?= 0\n\n  pinvoke bucket, \"putObject\",\n    Key: key\n    ContentType: file.type\n    Body: file\n    CacheControl: \"max-age=#{cacheControl}\"\n\ngetFromS3 = (bucket, key) ->\n  fetch(\"https://#{bucket.config.params.Bucket}.s3.amazonaws.com/#{key}\")\n  .then status\n  .then blob\n\ndeleteFromS3 = (bucket, key) ->\n  pinvoke bucket, \"deleteObject\",\n    Key: key\n\nlist = (bucket, id, dir) ->\n  unless startsWith dir, delimiter\n    dir = \"#{delimiter}#{dir}\"\n\n  unless endsWith dir, delimiter\n    dir = \"#{dir}#{delimiter}\"\n\n  prefix = \"#{id}#{dir}\"\n\n  pinvoke bucket, \"listObjects\",\n    Prefix: prefix\n    Delimiter: delimiter\n  .then (result) ->\n    result.CommonPrefixes.map (p) ->\n      p.Prefix.replace(prefix, \"\")\n    .concat result.Contents.map (o) ->\n      o.Key.replace(prefix, \"\")\n\nmodule.exports = (id, bucket) ->\n  read: (path) ->\n    unless startsWith path, delimiter\n      path = delimiter + path\n\n    key = \"#{id}#{path}\"\n\n    getFromS3(bucket, key)\n    .then (blob) ->\n      path: path\n      blob: blob\n\n  write: (path, file) ->\n    unless startsWith path, delimiter\n      path = delimiter + path\n\n    key = \"#{id}#{path}\"\n\n    uploadToS3 bucket, key, file\n\n  delete: (path) ->\n    unless startsWith path, delimiter\n      path = delimiter + path\n\n    key = \"#{id}#{path}\"\n\n    deleteFromS3 bucket, key\n\n  list: (dir=\"/\") ->\n    list bucket, id, dir\n",
      "mode": "100644",
      "type": "blob"
    },
    "lib/clusterize.js": {
      "path": "lib/clusterize.js",
      "content": "/*! Clusterize.js - v0.16.1 - 2016-08-16\r\n* http://NeXTs.github.com/Clusterize.js/\r\n* Copyright (c) 2015 Denis Lukov; Licensed GPLv3 */\r\n\r\n;(function(name, definition) {\r\n    if (typeof module != 'undefined') module.exports = definition();\r\n    else if (typeof define == 'function' && typeof define.amd == 'object') define(definition);\r\n    else this[name] = definition();\r\n}('Clusterize', function() {\r\n  \"use strict\"\r\n\r\n  // detect ie9 and lower\r\n  // https://gist.github.com/padolsey/527683#comment-786682\r\n  var ie = (function(){\r\n    for( var v = 3,\r\n             el = document.createElement('b'),\r\n             all = el.all || [];\r\n         el.innerHTML = '<!--[if gt IE ' + (++v) + ']><i><![endif]-->',\r\n         all[0];\r\n       ){}\r\n    return v > 4 ? v : document.documentMode;\r\n  }()),\r\n  is_mac = navigator.platform.toLowerCase().indexOf('mac') + 1;\r\n  var Clusterize = function(data) {\r\n    if( ! (this instanceof Clusterize))\r\n      return new Clusterize(data);\r\n    var self = this;\r\n\r\n    var defaults = {\r\n      item_height: 0,\r\n      block_height: 0,\r\n      rows_in_block: 50,\r\n      rows_in_cluster: 0,\r\n      cluster_height: 0,\r\n      blocks_in_cluster: 4,\r\n      tag: null,\r\n      content_tag: null,\r\n      show_no_data_row: true,\r\n      no_data_class: 'clusterize-no-data',\r\n      no_data_text: 'No data',\r\n      keep_parity: true,\r\n      callbacks: {},\r\n      scroll_top: 0\r\n    }\r\n\r\n    // public parameters\r\n    self.options = {};\r\n    var options = ['rows_in_block', 'blocks_in_cluster', 'show_no_data_row', 'no_data_class', 'no_data_text', 'keep_parity', 'tag', 'callbacks'];\r\n    for(var i = 0, option; option = options[i]; i++) {\r\n      self.options[option] = typeof data[option] != 'undefined' && data[option] != null\r\n        ? data[option]\r\n        : defaults[option];\r\n    }\r\n\r\n    var elems = ['scroll', 'content'];\r\n    for(var i = 0, elem; elem = elems[i]; i++) {\r\n      self[elem + '_elem'] = data[elem + 'Id']\r\n        ? document.getElementById(data[elem + 'Id'])\r\n        : data[elem + 'Elem'];\r\n      if( ! self[elem + '_elem'])\r\n        throw new Error(\"Error! Could not find \" + elem + \" element\");\r\n    }\r\n\r\n    // tabindex forces the browser to keep focus on the scrolling list, fixes #11\r\n    if( ! self.content_elem.hasAttribute('tabindex'))\r\n      self.content_elem.setAttribute('tabindex', 0);\r\n\r\n    // private parameters\r\n    var rows = isArray(data.rows)\r\n        ? data.rows\r\n        : self.fetchMarkup(),\r\n      cache = {data: '', bottom: 0},\r\n      scroll_top = self.scroll_elem.scrollTop;\r\n\r\n    // get row height\r\n    self.exploreEnvironment(rows);\r\n\r\n    // append initial data\r\n    self.insertToDOM(rows, cache);\r\n\r\n    // restore the scroll position\r\n    self.scroll_elem.scrollTop = scroll_top;\r\n\r\n    // adding scroll handler\r\n    var last_cluster = false,\r\n    scroll_debounce = 0,\r\n    pointer_events_set = false,\r\n    scrollEv = function() {\r\n      // fixes scrolling issue on Mac #3\r\n      if (is_mac) {\r\n          if( ! pointer_events_set) self.content_elem.style.pointerEvents = 'none';\r\n          pointer_events_set = true;\r\n          clearTimeout(scroll_debounce);\r\n          scroll_debounce = setTimeout(function () {\r\n              self.content_elem.style.pointerEvents = 'auto';\r\n              pointer_events_set = false;\r\n          }, 50);\r\n      }\r\n      if (last_cluster != (last_cluster = self.getClusterNum()))\r\n        self.insertToDOM(rows, cache);\r\n      if (self.options.callbacks.scrollingProgress)\r\n        self.options.callbacks.scrollingProgress(self.getScrollProgress());\r\n    },\r\n    resize_debounce = 0,\r\n    resizeEv = function() {\r\n      clearTimeout(resize_debounce);\r\n      resize_debounce = setTimeout(self.refresh, 30);\r\n    }\r\n    on('scroll', self.scroll_elem, scrollEv);\r\n    on('resize', window, resizeEv);\r\n\r\n    // public methods\r\n    self.destroy = function(clean) {\r\n      off('scroll', self.scroll_elem, scrollEv);\r\n      off('resize', window, resizeEv);\r\n      self.html((clean ? self.generateEmptyRow() : rows));\r\n    }\r\n    self.refresh = function() {\r\n      self.getRowsHeight(rows) && self.update(rows);\r\n    }\r\n    self.update = function(new_rows) {\r\n      rows = isArray(new_rows)\r\n        ? new_rows\r\n        : [];\r\n      var scroll_top = self.scroll_elem.scrollTop;\r\n      // fixes #39\r\n      if(rows.length * self.options.item_height < scroll_top) {\r\n        self.scroll_elem.scrollTop = 0;\r\n        last_cluster = 0;\r\n      }\r\n      self.insertToDOM(rows, cache);\r\n      self.scroll_elem.scrollTop = scroll_top;\r\n    }\r\n    self.clear = function() {\r\n      self.update([]);\r\n    }\r\n    self.getRowsAmount = function() {\r\n      return rows.length;\r\n    }\r\n    self.getScrollProgress = function() {\r\n      return this.options.scroll_top / (rows.length * this.options.item_height) * 100 || 0;\r\n    }\r\n\r\n    var add = function(where, _new_rows) {\r\n      var new_rows = isArray(_new_rows)\r\n        ? _new_rows\r\n        : [];\r\n      if( ! new_rows.length) return;\r\n      rows = where == 'append'\r\n        ? rows.concat(new_rows)\r\n        : new_rows.concat(rows);\r\n      self.insertToDOM(rows, cache);\r\n    }\r\n    self.append = function(rows) {\r\n      add('append', rows);\r\n    }\r\n    self.prepend = function(rows) {\r\n      add('prepend', rows);\r\n    }\r\n  }\r\n\r\n  Clusterize.prototype = {\r\n    constructor: Clusterize,\r\n    // fetch existing markup\r\n    fetchMarkup: function() {\r\n      return this.getChildNodes(this.content_elem);\r\n    },\r\n    // get tag name, content tag name, tag height, calc cluster height\r\n    exploreEnvironment: function(rows) {\r\n      var opts = this.options;\r\n      opts.content_tag = this.content_elem.tagName.toLowerCase();\r\n      if( rows.length < 3) return;\r\n      if(this.content_elem.children.length <= 1) {\r\n        this.html([rows[0], rows[1], rows[2]]);\r\n      }\r\n      if( ! opts.tag) opts.tag = this.content_elem.children[0].tagName.toLowerCase();\r\n      this.getRowsHeight(rows);\r\n    },\r\n    getRowsHeight: function(rows) {\r\n      var opts = this.options,\r\n        prev_item_height = opts.item_height;\r\n      opts.cluster_height = 0;\r\n      if( ! rows.length) return;\r\n      var nodes = this.content_elem.children;\r\n      opts.item_height = nodes[Math.floor(nodes.length / 2)].offsetHeight;\r\n      // consider table's border-spacing\r\n      if(opts.tag == 'tr' && getStyle('borderCollapse', this.content_elem) != 'collapse')\r\n        opts.item_height += parseInt(getStyle('borderSpacing', this.content_elem), 10) || 0;\r\n      opts.block_height = opts.item_height * opts.rows_in_block;\r\n      opts.rows_in_cluster = opts.blocks_in_cluster * opts.rows_in_block;\r\n      opts.cluster_height = opts.blocks_in_cluster * opts.block_height;\r\n      return prev_item_height != opts.item_height;\r\n    },\r\n    // get current cluster number\r\n    getClusterNum: function () {\r\n      this.options.scroll_top = this.scroll_elem.scrollTop;\r\n      return Math.floor(this.options.scroll_top / (this.options.cluster_height - this.options.block_height)) || 0;\r\n    },\r\n    // generate empty row if no data provided\r\n    generateEmptyRow: function() {\r\n      var opts = this.options;\r\n      if( ! opts.tag || ! opts.show_no_data_row) return [];\r\n      var empty_row = document.createElement(opts.tag),\r\n        no_data_content = document.createTextNode(opts.no_data_text), td;\r\n      empty_row.className = opts.no_data_class;\r\n      if(opts.tag == 'tr') {\r\n        td = document.createElement('td');\r\n        // fixes #53\r\n        td.colSpan = 100;\r\n        td.appendChild(no_data_content);\r\n      }\r\n      empty_row.appendChild(td || no_data_content);\r\n      return [empty_row];\r\n    },\r\n    // generate cluster for current scroll position\r\n    generate: function (rows, cluster_num) {\r\n      var opts = this.options,\r\n        rows_len = rows.length;\r\n      if (rows_len < opts.rows_in_block) {\r\n        return {\r\n          top_offset: 0,\r\n          bottom_offset: 0,\r\n          rows_above: 0,\r\n          rows: rows_len ? rows : this.generateEmptyRow()\r\n        };\r\n      }\r\n      if( ! opts.cluster_height) {\r\n        this.exploreEnvironment(rows);\r\n      }\r\n      var items_start = Math.max((opts.rows_in_cluster - opts.rows_in_block) * cluster_num, 0),\r\n        items_end = items_start + opts.rows_in_cluster,\r\n        top_offset = Math.max(items_start * opts.item_height, 0),\r\n        bottom_offset = Math.max((rows_len - items_end) * opts.item_height, 0),\r\n        this_cluster_rows = [],\r\n        rows_above = items_start;\r\n      if(top_offset < 1) {\r\n        rows_above++;\r\n      }\r\n      for (var i = items_start; i < items_end; i++) {\r\n        rows[i] && this_cluster_rows.push(rows[i]);\r\n      }\r\n      return {\r\n        top_offset: top_offset,\r\n        bottom_offset: bottom_offset,\r\n        rows_above: rows_above,\r\n        rows: this_cluster_rows\r\n      };\r\n    },\r\n    renderExtraTag: function(class_name, height) {\r\n      var tag = document.createElement(this.options.tag),\r\n        clusterize_prefix = 'clusterize-';\r\n      tag.className = [clusterize_prefix + 'extra-row', clusterize_prefix + class_name].join(' ');\r\n      height && (tag.style.height = height + 'px');\r\n      return tag;\r\n    },\r\n    // if necessary verify data changed and insert to DOM\r\n    insertToDOM: function(rows, cache) {\r\n      var data = this.generate(rows, this.getClusterNum()),\r\n        this_cluster_rows = data.rows,\r\n        this_cluster_content_changed = this.checkChanges('data', this_cluster_rows, cache),\r\n        only_bottom_offset_changed = this.checkChanges('bottom', data.bottom_offset, cache),\r\n        callbacks = this.options.callbacks,\r\n        layout = [];\r\n\r\n      if(this_cluster_content_changed) {\r\n        if(data.top_offset) {\r\n          this.options.keep_parity && layout.push(this.renderExtraTag('keep-parity'));\r\n          layout.push(this.renderExtraTag('top-space', data.top_offset));\r\n        }\r\n        layout = layout.concat(this_cluster_rows);\r\n        data.bottom_offset && layout.push(this.renderExtraTag('bottom-space', data.bottom_offset));\r\n        callbacks.clusterWillChange && callbacks.clusterWillChange();\r\n        this.html(layout);\r\n        this.options.content_tag == 'ol' && this.content_elem.setAttribute('start', data.rows_above);\r\n        callbacks.clusterChanged && callbacks.clusterChanged();\r\n      } else if(only_bottom_offset_changed) {\r\n        this.content_elem.lastChild.style.height = data.bottom_offset + 'px';\r\n      }\r\n    },\r\n    \r\n    empty: function(element) {\r\n      while (element.lastChild) {\r\n        element.removeChild(element.lastChild);\r\n      }\r\n    },\r\n\r\n    html: function(data) {\r\n      var content_elem = this.content_elem;\r\n\r\n      this.empty(content_elem);\r\n\r\n      for (var i = 0; i < data.length; i++) {\r\n        content_elem.appendChild(data[i]);\r\n      }\r\n    },\r\n\r\n    getChildNodes: function(tag) {\r\n        var child_nodes = tag.children, nodes = [];\r\n        for (var i = 0, ii = child_nodes.length; i < ii; i++) {\r\n            nodes.push(child_nodes[i]);\r\n        }\r\n        return nodes;\r\n    },\r\n    checkChanges: function(type, value, cache) {\r\n      var changed = value != cache[type];\r\n      cache[type] = value;\r\n      return changed;\r\n    }\r\n  };\r\n\r\n  // support functions\r\n  function on(evt, element, fnc) {\r\n    return element.addEventListener ? element.addEventListener(evt, fnc, false) : element.attachEvent(\"on\" + evt, fnc);\r\n  }\r\n  function off(evt, element, fnc) {\r\n    return element.removeEventListener ? element.removeEventListener(evt, fnc, false) : element.detachEvent(\"on\" + evt, fnc);\r\n  }\r\n  function isArray(arr) {\r\n    return Object.prototype.toString.call(arr) === '[object Array]';\r\n  }\r\n  function getStyle(prop, elem) {\r\n    return window.getComputedStyle ? window.getComputedStyle(elem)[prop] : elem.currentStyle[prop];\r\n  }\r\n\r\n  return Clusterize;\r\n}));\r\n",
      "mode": "100644",
      "type": "blob"
    },
    "lib/directory_upload.js": {
      "path": "lib/directory_upload.js",
      "content": "/**********************************\n Directory Upload Proposal Polyfill\n Author: Ali Alabbas (Microsoft)\n **********************************/\n(function() {\n\t// Do not proceed with the polyfill if Directory interface is already natively available,\n\t// or if webkitdirectory is not supported (i.e. not Chrome, since the polyfill only works in Chrome)\n\tif (window.Directory || !('webkitdirectory' in document.createElement('input') && 'webkitGetAsEntry' in DataTransferItem.prototype)) {\n\t\treturn;\n\t}\n\n\tvar directoryAttr = 'directory',\n\t\tgetFilesMethod = 'getFilesAndDirectories',\n\t\tisSupportedProp = 'isFilesAndDirectoriesSupported',\n\t\tchooseDirMethod = 'chooseDirectory';\n\n\tvar separator = '/';\n\n\tvar Directory = function() {\n\t\tthis.name = '';\n\t\tthis.path = separator;\n\t\tthis._children = {};\n\t\tthis._items = false;\n\t};\n\n\tDirectory.prototype[getFilesMethod] = function() {\n\t\tvar that = this;\n\n\t\t// from drag and drop and file input drag and drop (webkitEntries)\n\t\tif (this._items) {\n\t\t\tvar getItem = function(entry) {\n\t\t\t\tif (entry.isDirectory) {\n\t\t\t\t\tvar dir = new Directory();\n\t\t\t\t\tdir.name = entry.name;\n\t\t\t\t\tdir.path = entry.fullPath;\n\t\t\t\t\tdir._items = entry;\n\n\t\t\t\t\treturn dir;\n\t\t\t\t} else {\n\t\t\t\t\treturn new Promise(function(resolve, reject) {\n\t\t\t\t\t\tentry.file(function(file) {\n\t\t\t\t\t\t\tresolve(file);\n\t\t\t\t\t\t}, reject);\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tif (this.path === separator) {\n\t\t\t\tvar promises = [];\n\n\t\t\t\tfor (var i = 0; i < this._items.length; i++) {\n\t\t\t\t\tvar entry;\n\n\t\t\t\t\t// from file input drag and drop (webkitEntries)\n\t\t\t\t\tif (this._items[i].isDirectory || this._items[i].isFile) {\n\t\t\t\t\t\tentry = this._items[i];\n\t\t\t\t\t} else {\n\t\t\t\t\t\tentry = this._items[i].webkitGetAsEntry();\n\t\t\t\t\t}\n\n\t\t\t\t\tpromises.push(getItem(entry));\n\t\t\t\t}\n\n\t\t\t\treturn Promise.all(promises);\n\t\t\t} else {\n\t\t\t\treturn new Promise(function(resolve, reject) {\n\t\t\t\t\tthat._items.createReader().readEntries(function(entries) {\n\t\t\t\t\t\tvar promises = [];\n\n\t\t\t\t\t\tfor (var i = 0; i < entries.length; i++) {\n\t\t\t\t\t\t\tvar entry = entries[i];\n\n\t\t\t\t\t\t\tpromises.push(getItem(entry));\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tresolve(Promise.all(promises));\n\t\t\t\t\t}, reject);\n\t\t\t\t});\n\t\t\t}\n\t\t// from file input manual selection\n\t\t} else {\n\t\t\tvar arr = [];\n\n\t\t\tfor (var child in this._children) {\n\t\t\t\tarr.push(this._children[child]);\n\t\t\t}\n\n\t\t\treturn Promise.resolve(arr);\n\t\t}\n\t};\n\n\t// set blank as default for all inputs\n\tHTMLInputElement.prototype[getFilesMethod] = function() {\n\t\treturn Promise.resolve([]);\n\t};\n\n\t// if OS is Mac, the combined directory and file picker is supported\n\tHTMLInputElement.prototype[isSupportedProp] = navigator.appVersion.indexOf(\"Mac\") !== -1;\n\n\tHTMLInputElement.prototype[directoryAttr] = undefined;\n\tHTMLInputElement.prototype[chooseDirMethod] = undefined;\n\n\t// expose Directory interface to window\n\twindow.Directory = Directory;\n\n\t/********************\n\t **** File Input ****\n\t ********************/\n\tvar convertInputs = function(nodes) {\n\t\tvar recurse = function(dir, path, fullPath, file) {\n\t\t\tvar pathPieces = path.split(separator);\n\t\t\tvar dirName = pathPieces.shift();\n\n\t\t\tif (pathPieces.length > 0) {\n\t\t\t\tvar subDir = new Directory();\n\t\t\t\tsubDir.name = dirName;\n\t\t\t\tsubDir.path = separator + fullPath;\n\n\t\t\t\tif (!dir._children[subDir.name]) {\n\t\t\t\t\tdir._children[subDir.name] = subDir;\n\t\t\t\t}\n\n\t\t\t\trecurse(dir._children[subDir.name], pathPieces.join(separator), fullPath, file);\n\t\t\t} else {\n\t\t\t\tdir._children[file.name] = file;\n\t\t\t}\n\t\t};\n\n\t\tfor (var i = 0; i < nodes.length; i++) {\n\t\t\tvar node = nodes[i];\n\n\t\t\tif (node.tagName === 'INPUT' && node.type === 'file') {\n\t\t\t\t// force multiple selection for default behavior\n\t\t\t\tif (!node.hasAttribute('multiple')) {\n\t\t\t\t\tnode.setAttribute('multiple', '');\n\t\t\t\t}\n\n\t\t\t\tvar shadow = node.createShadowRoot();\n\n\t\t\t\tnode[chooseDirMethod] = function() {\n\t\t\t\t\t// can't do this without an actual click\n\t\t\t\t\tconsole.log('This is unsupported. For security reasons the dialog cannot be triggered unless it is a response to some user triggered event such as a click on some other element.');\n\t\t\t\t};\n\n\t\t\t\tshadow.innerHTML = '<div style=\"border: 1px solid #999; padding: 3px; width: 235px; box-sizing: content-box; font-size: 14px; height: 21px;\">'\n\t\t\t\t\t+ '<div id=\"fileButtons\" style=\"box-sizing: content-box;\">'\n\t\t\t\t\t+ '<button id=\"button1\" style=\"width: 100px; box-sizing: content-box;\">Choose file(s)...</button>'\n\t\t\t\t\t+ '<button id=\"button2\" style=\"width: 100px; box-sizing: content-box; margin-left: 3px;\">Choose folder...</button>'\n\t\t\t\t\t+ '</div>'\n\t\t\t\t\t+ '<div id=\"filesChosen\" style=\"padding: 3px; display: none; box-sizing: content-box;\"><span id=\"filesChosenText\">files selected...</span>'\n\t\t\t\t\t+ '<a id=\"clear\" title=\"Clear selection\" href=\"javascript:;\" style=\"text-decoration: none; float: right; margin: -3px -1px 0 0; padding: 3px; font-weight: bold; font-size: 16px; color:#999; box-sizing: content-box;\">&times;</a>'\n\t\t\t\t\t+ '</div>'\n\t\t\t\t\t+ '</div>'\n\t\t\t\t\t+ '<input id=\"input1\" type=\"file\" multiple style=\"display: none;\">'\n\t\t\t\t\t+ '<input id=\"input2\" type=\"file\" webkitdirectory style=\"display: none;\">'\n\t\t\t\t\t+ '</div>';\n\n\t\t\t\tshadow.querySelector('#button1').onclick = function(e) {\n\t\t\t\t\te.preventDefault();\n\n\t\t\t\t\tshadow.querySelector('#input1').click();\n\t\t\t\t};\n\n\t\t\t\tshadow.querySelector('#button2').onclick = function(e) {\n\t\t\t\t\te.preventDefault();\n\n\t\t\t\t\tshadow.querySelector('#input2').click();\n\t\t\t\t};\n\n\t\t\t\tvar toggleView = function(defaultView, filesLength) {\n\t\t\t\t\tshadow.querySelector('#fileButtons').style.display = defaultView ? 'block' : 'none';\n\t\t\t\t\tshadow.querySelector('#filesChosen').style.display = defaultView ? 'none' : 'block';\n\n\t\t\t\t\tif (!defaultView) {\n\t\t\t\t\t\tshadow.querySelector('#filesChosenText').innerText = filesLength + ' file' + (filesLength > 1 ? 's' : '') + ' selected...';\n\t\t\t\t\t}\n\t\t\t\t};\n\n\t\t\t\tvar draggedAndDropped = false;\n\n\t\t\t\tvar getFiles = function() {\n\t\t\t\t\tvar files = node.files;\n\n\t\t\t\t\tif (draggedAndDropped) {\n\t\t\t\t\t\tfiles = node.webkitEntries;\n\t\t\t\t\t\tdraggedAndDropped = false;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (files.length === 0) {\n\t\t\t\t\t\t\tfiles = node.shadowRoot.querySelector('#input1').files;\n\n\t\t\t\t\t\t\tif (files.length === 0) {\n\t\t\t\t\t\t\t\tfiles = node.shadowRoot.querySelector('#input2').files;\n\n\t\t\t\t\t\t\t\tif (files.length === 0) {\n\t\t\t\t\t\t\t\t\tfiles = node.webkitEntries;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\treturn files;\n\t\t\t\t};\n\n\t\t\t\tvar changeHandler = function(e) {\n\t\t\t\t\tnode.dispatchEvent(new Event('change'));\n\n\t\t\t\t\ttoggleView(false, getFiles().length);\n\t\t\t\t};\n\n\t\t\t\tshadow.querySelector('#input1').onchange = shadow.querySelector('#input2').onchange = changeHandler;\n\n\t\t\t\tvar clear = function (e) {\n\t\t\t\t\ttoggleView(true);\n\n\t\t\t\t\tvar form = document.createElement('form');\n\t\t\t\t\tnode.parentNode.insertBefore(form, node);\n\t\t\t\t\tnode.parentNode.removeChild(node);\n\t\t\t\t\tform.appendChild(node);\n\t\t\t\t\tform.reset();\n\n\t\t\t\t\tform.parentNode.insertBefore(node, form);\n\t\t\t\t\tform.parentNode.removeChild(form);\n\n\t\t\t\t\t// reset does not instantly occur, need to give it some time\n\t\t\t\t\tsetTimeout(function() {\n\t\t\t\t\t\tnode.dispatchEvent(new Event('change'));\n\t\t\t\t\t}, 1);\n\t\t\t\t};\n\n\t\t\t\tshadow.querySelector('#clear').onclick = clear;\n\n\t\t\t\tnode.addEventListener('drop', function(e) {\n\t\t\t\t\tdraggedAndDropped = true;\n\t\t\t\t}, false);\n\n\t\t\t\tnode.addEventListener('change', function() {\n\t\t\t\t\tvar dir = new Directory();\n\n\t\t\t\t\tvar files = getFiles();\n\n\t\t\t\t\tif (files.length > 0) {\n\t\t\t\t\t\ttoggleView(false, files.length);\n\n\t\t\t\t\t\t// from file input drag and drop (webkitEntries)\n\t\t\t\t\t\tif (files[0].isFile || files[0].isDirectory) {\n\t\t\t\t\t\t\tdir._items = files;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tfor (var j = 0; j < files.length; j++) {\n\t\t\t\t\t\t\t\tvar file = files[j];\n\t\t\t\t\t\t\t\tvar path = file.webkitRelativePath;\n\t\t\t\t\t\t\t\tvar fullPath = path.substring(0, path.lastIndexOf(separator));\n\n\t\t\t\t\t\t\t\trecurse(dir, path, fullPath, file);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttoggleView(true, files.length);\n\t\t\t\t\t}\n\n\t\t\t\t\tthis[getFilesMethod] = function() {\n\t\t\t\t\t\treturn dir[getFilesMethod]();\n\t\t\t\t\t};\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t};\n\n\t// polyfill file inputs when the DOM loads\n\tdocument.addEventListener('DOMContentLoaded', function(event) {\n\t\tconvertInputs(document.getElementsByTagName('input'));\n\t});\n\n\t// polyfill file inputs that are created dynamically and inserted into the body\n\tvar observer = new MutationObserver(function(mutations, observer) {\n\t\tfor (var i = 0; i < mutations.length; i++) {\n\t\t\tif (mutations[i].addedNodes.length > 0) {\n\t\t\t\tconvertInputs(mutations[i].addedNodes);\n\t\t\t}\n\t\t}\n\t});\n\n\tobserver.observe(document.body, {childList: true, subtree: true});\n\n\t/***********************\n\t **** Drag and drop ****\n\t ***********************/\n\t// keep a reference to the original method\n\tvar _addEventListener = EventTarget.prototype.addEventListener;\n\n\tDataTransfer.prototype[getFilesMethod] = function() {\n\t\treturn Promise.resolve([]);\n\t};\n\n\tEventTarget.prototype.addEventListener = function(type, listener, useCapture) {\n\t\tif (type === 'drop') {\n\t\t\tvar _listener = listener;\n\n\t\t\tlistener = function(e) {\n\t\t\t\tvar dir = new Directory();\n\t\t\t\tdir._items = e.dataTransfer.items;\n\n\t\t\t\te.dataTransfer[getFilesMethod] = function() {\n\t\t\t\t\treturn dir[getFilesMethod]();\n\t\t\t\t};\n\n\t\t\t\t_listener(e);\n\t\t\t};\n\t\t}\n\n\t\t// call the original method\n\t\treturn _addEventListener.apply(this, arguments);\n\t};\n}());\n",
      "mode": "100644",
      "type": "blob"
    },
    "lib/drop.coffee": {
      "path": "lib/drop.coffee",
      "content": "module.exports = (element, handler) ->\n  cancel = (e) ->\n    e.preventDefault()\n    return false\n\n  element.addEventListener \"dragover\", cancel\n  element.addEventListener \"dragenter\", cancel\n  element.addEventListener \"drop\", (e) ->\n    e.preventDefault()\n\n    handler e\n",
      "mode": "100644",
      "type": "blob"
    },
    "lib/sha.coffee": {
      "path": "lib/sha.coffee",
      "content": "urlSafeBase64 = (base64) ->\n  base64.replace(/\\+/g, \"-\").replace(/\\//g, \"_\").replace(/\\=*$/, '')\n\narrayBufferToBase64 = (buffer) ->\n  bytes = new Uint8Array(buffer)\n\n  binary = \"\"\n\n  bytes.forEach (byte) ->\n    binary += String.fromCharCode(byte)\n\n  return btoa(binary)\n\nshaForBlob = (blob) ->\n  new Promise (resolve, reject) ->\n    reader = new FileReader\n\n    reader.onload = ->\n      buffer = reader.result\n      crypto.subtle.digest(\"SHA-256\", buffer)\n      .then resolve\n      .catch reject\n\n    reader.onerror = reject\n\n    reader.readAsArrayBuffer(blob)\n\ndemo = ->\n  [\"yolo\", \"duder\", \"hello\", \"wat\"].forEach (test) ->\n    blob = new Blob [test]\n\n    shaForBlob(blob)\n    .then arrayBufferToBase64\n    .then urlSafeBase64\n    .then log\n\nmodule.exports = (blob) ->\n  shaForBlob(blob)\n  .then arrayBufferToBase64\n  .then urlSafeBase64\n",
      "mode": "100644",
      "type": "blob"
    },
    "main.coffee": {
      "path": "main.coffee",
      "content": "\n\n# Add logins when creating Cognito credentials\n# http://docs.aws.amazon.com/cognito/latest/developerguide/authentication-flow.html\n# http://docs.aws.amazon.com/cognito/latest/developerguide/developer-authenticated-identities.html#updating-the-logins-map\n# Once you obtain an identity ID and session token from your backend, you will\n# to pass them into the AWS.CognitoIdentityCredentials provider. Here's an example:\n#AWS.config.credentials = new AWS.CognitoIdentityCredentials({\n   #IdentityPoolId: 'IDENTITY_POOL_ID',\n   #IdentityId: 'IDENTITY_ID_RETURNED_FROM_YOUR_PROVIDER',\n   #Logins: {\n      #'cognito-identity.amazonaws.com': 'TOKEN_RETURNED_FROM_YOUR_PROVIDER'\n   #}\n#});\n\nrequire \"./lib/directory_upload\"\n\nstyle = document.createElement \"style\"\nstyle.innerHTML = require \"./style\"\ndocument.head.appendChild style\n\n{log, emptyElement, pinvoke} = require \"./util\"\n\nDrop = require(\"./lib/drop\")\n\nFilesystem = require \"./fs/filesystem\"\nS3Driver = require \"./fs/s3-driver\"\nLocalDriver = require \"./fs/dexie-driver\"\nOS = require \"./os\"\nos = OS()\n\nglobal.os = os\n\nOSTemplate = require \"./templates/os\"\ndocument.body.appendChild OSTemplate os\n\ninitFileDrop = (element, processItem) ->\n  Drop element, (e) ->\n\n    handleFiles = (items, path=\"/\") ->\n      items.forEach (item) ->\n        if item.getFilesAndDirectories\n          item.getFilesAndDirectories().then (items) ->\n            handleFiles(items, item.path)\n        else\n          processItem item, path\n    e.dataTransfer.getFilesAndDirectories().then (items) ->\n      handleFiles(items)\n\ninitFileDrop document, (file, path) ->\n  # TODO: Why is this getting double slashes on single files?\n  key = \"#{path}/#{file.name}\".replace(/\\/+/, \"/\")\n  os.put key, file\n\nAWS.config.update\n  region: 'us-east-1'\n\nif false # S3\n  try\n    logins = JSON.parse localStorage.WHIMSY_FS_AWS_LOGIN\n\n  AWS.config.credentials = new AWS.CognitoIdentityCredentials\n    IdentityPoolId: 'us-east-1:4fe22da5-bb5e-4a78-a260-74ae0a140bf9'\n    Logins: logins\n\n  if logins\n    pinvoke AWS.config.credentials, \"get\"\n    .then receivedCredentials\n    .catch (e) ->\n      console.error e\n\n  {awsLogin} = require \"./amazon_login\"\n  loginTemplate = require(\"./templates/login\")\n    click: ->\n      options = { scope : 'profile' }\n      awsLogin(options)\n      .then (logins) ->\n        localStorage.WHIMSY_FS_AWS_LOGIN = JSON.stringify(logins)\n        receivedCredentials()\n\n  document.body.appendChild loginTemplate\n\n  receivedCredentials = ->\n    console.log AWS.config.credentials\n    id = AWS.config.credentials.identityId\n\n    document.body.removeChild loginTemplate\n\n    bucket = new AWS.S3\n      params:\n        Bucket: \"whimsy-fs\"\n\n    os.attachFS Filesystem S3Driver(id, bucket)\n\nelse\n  db = require(\"./db\")('fs')\n  os.attachFS Filesystem LocalDriver(db)\n\n  global.db = db\n",
      "mode": "100644",
      "type": "blob"
    },
    "os.coffee": {
      "path": "os.coffee",
      "content": "\nObservable = require \"observable\"\n\nTextEditor = require \"./text_editor\"\nPixelEditor = require \"./pixel_editor\"\n\nEditorTemplate = require \"./templates/editor\"\nFolderTemplate = require \"./templates/folder\"\nFolderPresenter = require \"./presenters/folder\"\nLauncherElement = require \"./templates/launcher\"\n\n{readAsText} = require \"../util\"\n\nmodule.exports = ->\n  appHandlers =\n    \"^text\": (file, path) ->\n      editor = TextEditor(self)\n\n      readAsText(file)\n      .then (contents) ->\n        editor.contents contents\n        editor.contentType file.type\n        editor.path path\n\n      return EditorTemplate editor\n\n    \"^image\": (file, path) ->\n      # img = document.createElement \"img\"\n      # img.src = URL.createObjectURL(file)\n\n      return PixelEditor(self, file, path)\n\n  self =\n    editorElement: Observable()\n\n    fileTreeElement: Observable()\n\n    attachFS: (fs) ->\n      self.fileTreeElement FolderTemplate FolderPresenter {path: \"/\"}, self\n\n      self.fs = -> fs\n\n    open: (path) ->\n      self.fs().read(path)\n      .then ({blob}) ->\n        type = blob.type\n        console.log \"Open: \", path, blob.type\n        handled = false\n\n        Object.keys(appHandlers).forEach (matcher) ->\n          return if handled\n\n          handler = appHandlers[matcher]\n          regex = new RegExp(matcher)\n\n          if regex.test(type)\n            handled = true\n            appElement = handler(blob, path)\n\n            self.editorElement appElement\n\n    list: (path) ->\n      self.fs().ls path\n\n    put: (path, file) ->\n      self.fs().write path, file\n\n    delete: (path) ->\n      self.fs().delete path\n\n    apps: [{\n      name: \"Pixel\"\n      launch: ->\n        self.editorElement PixelEditor(self)\n    }]\n\n  self.launcherElement = LauncherElement(self)\n\n  return self\n",
      "mode": "100644",
      "type": "blob"
    },
    "pixel_editor.coffee": {
      "path": "pixel_editor.coffee",
      "content": "Postmaster = require \"postmaster\"\n\nmodule.exports = (os, file, path) ->\n  frame = document.createElement \"iframe\"\n  frame.sandbox = \"allow-scripts allow-modals\"\n\n  postmaster = Postmaster\n    remoteTarget: -> frame.contentWindow\n\n    # Action to perform when the editor is loaded\n    childLoaded: ->\n      if file\n        postmaster.invokeRemote \"loadFile\", file\n\n      frame.contentWindow.focus()\n\n      return\n\n    # Action for the 'Save' button inside the editor\n    save: ({image}) ->\n      newPath = prompt \"Save As\", path\n\n      if newPath\n        path = newPath\n        os.put path, image\n\n      return\n\n  frame.src = \"https://danielx.net/pixel-editor/embedded/\"\n\n  frame\n",
      "mode": "100644",
      "type": "blob"
    },
    "pixie.cson": {
      "path": "pixie.cson",
      "content": "entryPoint: \"experiments/spreadsheet\"\nremoteDependencies: [\n  \"https://sdk.amazonaws.com/js/aws-sdk-2.2.42.min.js\"\n  \"https://api-cdn.amazon.com/sdk/login1.js\"\n  \"https://unpkg.com/dexie@1.4.1/dist/dexie.js\"\n]\ndependencies:\n  observable: \"distri/observable:master\"\n  postmaster: \"distri/postmaster:v0.5.0\"\nwidth: 1024\nheight: 720\n",
      "mode": "100644",
      "type": "blob"
    },
    "presenters/file.coffee": {
      "path": "presenters/file.coffee",
      "content": "module.exports = FilePresenter = (data, os, fp) ->\n  {name, path} = data\n\n  name: name\n  path: path\n  click: (e) ->\n    return if e.filetreeHandled\n    e.filetreeHandled = true\n\n    os.open path\n\n    return\n\n  remove: (e) ->\n    return if e.filetreeHandled\n    e.filetreeHandled = true\n\n    os.delete path\n\n    fp.files.remove name\n\n    return\n",
      "mode": "100644",
      "type": "blob"
    },
    "presenters/folder.coffee": {
      "path": "presenters/folder.coffee",
      "content": "Observable = require \"observable\"\n\nFolderTemplate = require \"../templates/folder\"\nFileTemplate = require \"../templates/file\"\n\nFilePresenter = require \"./file\"\n\n{endsWith} = require \"../util\"\n\nmodule.exports = FolderPresenter = (data, os) ->\n  {path, folders, files, name} = data\n  name ?= path\n  folders ?= []\n  files ?= []\n\n  self =\n    Folder: (data) ->\n      FolderTemplate FolderPresenter data, os\n    File: (data) ->\n      FileTemplate FilePresenter data, os, self\n    class: ->\n      \"expanded\" if self.expanded()\n    click: (e) ->\n      return if e.filetreeHandled\n      e.filetreeHandled = true\n\n      self.expanded.toggle()\n      if self.expanded()\n        self.refresh()\n\n      return false\n    expanded: Observable false\n    folders: Observable folders\n    files: Observable files\n    name: name\n    path: path\n    refresh: ->\n      console.log \"List:\", path\n      os.list(path).then (results) ->\n        files = results.filter (result) ->\n          !endsWith(result, \"/\")\n        folders = results.filter (result) ->\n          endsWith(result, \"/\")\n\n        self.files(files)\n        self.folders(folders)\n",
      "mode": "100644",
      "type": "blob"
    },
    "style.styl": {
      "path": "style.styl",
      "content": "*\n  box-sizing: border-box\n\nbody\n  font-family: \"HelveticaNeue-Light\", \"Helvetica Neue Light\", \"Helvetica Neue\", Helvetica, Arial, \"Lucida Grande\", sans-serif\n  font-weight: 300\n  margin: 0\n\nbody, html\n  height: 100%\n\n#LoginWithAmazon\n  position: absolute\n  top: 0\n\nfile\n  padding-left: 1em\n  position: relative\n\n  .path\n    overflow: hidden\n    text-overflow: ellipsis\n    white-space: nowrap\n\n  & > .delete\n    display: none\n    position: absolute\n    right: 1em\n    top: 0\n\n  &:hover\n    background-color: #FFA\n\n    & > .delete\n      display: inline-block\n\nfolder\n  display: block\n  padding-left: 1em\n\n  &::before\n    content: \"[+]\"\n\n  & > file, & > folder\n    display: none\n\n  &.expanded\n    &::before\n      content: \"[-]\"\n\n    & > file, & > folder\n      display: block\n\n.os\n  display: flex\n  height: 100%\n\n  & > folder\n    flex-grow: 0\n    padding-left: 0\n    width: 250px\n\n  & > iframe\n    flex-grow: 1\n    height: 100%\n\neditor\n  display: block\n  margin-top: 1em\n\ntextarea\n  display: block\n  width: 100%\n\nlauncher\n  display: block\n  position: absolute\n  bottom: 0\n\n// Tables\ncontainer\n  display: block\n  height: 100%\n  overflow: auto\n\ntable\n  border-collapse: collapse\n  width: 100%\n\nth\n  text-align: left\n\nthead\n  border-bottom: 1px solid black\n\ntd > input\n  border: none\n  background-color: transparent\n  width: 100%\n  height: 100%\n  padding: 0\n\ntr:nth-child(even)\n  background-color: #EEE\n\n// Menus\nli\n  list-style-type: none\n\n  > label\n    display: block\n\nul.menu-bar\n  background-color: lightgrey\n  margin: 0\n  padding: 0\n\n  > li\n    display: inline-block\n\nli.menu\n  > ul.options\n    display: none\n\n  &.active\n    > ul.options\n      background-color: lightgrey\n      display: block\n      padding: 0\n      position: absolute\n      > li\n        &:hover\n          background-color: blue\n          color: white\n",
      "mode": "100644",
      "type": "blob"
    },
    "templates/editor.jadelet": {
      "path": "templates/editor.jadelet",
      "content": "editor\n  label\n    span Path\n    input(value=@path)\n  label\n    span ContentType\n    input(value=@contentType)\n  textarea(value=@contents)\n  button(click=@save) Save\n",
      "mode": "100644",
      "type": "blob"
    },
    "templates/file.jadelet": {
      "path": "templates/file.jadelet",
      "content": "file(@click title=@name)\n  .path= @name\n  .delete(click=@remove) X\n",
      "mode": "100644",
      "type": "blob"
    },
    "templates/folder.jadelet": {
      "path": "templates/folder.jadelet",
      "content": "- Folder = @Folder\n- File = @File\n\nfolder(@click @class)\n  - path = @path\n  = @name\n  - @folders.forEach (folder) ->\n    = Folder name: folder, path: path + folder\n  - @files.forEach (file) ->\n    = File name: file, path: path + file\n",
      "mode": "100644",
      "type": "blob"
    },
    "templates/input.jadelet": {
      "path": "templates/input.jadelet",
      "content": "input(@value @type)\n",
      "mode": "100644",
      "type": "blob"
    },
    "templates/launcher.jadelet": {
      "path": "templates/launcher.jadelet",
      "content": "launcher\n  - @apps.forEach (app) ->\n    app(click=app.launch)= app.name\n",
      "mode": "100644",
      "type": "blob"
    },
    "templates/login.jadelet": {
      "path": "templates/login.jadelet",
      "content": "a#LoginWithAmazon(@click)\n  img(border=\"0\" alt=\"Login with Amazon\" src=\"https://images-na.ssl-images-amazon.com/images/G/01/lwa/btnLWA_gold_156x32.png\" width=\"156\" height=\"32\")\n",
      "mode": "100644",
      "type": "blob"
    },
    "templates/os.jadelet": {
      "path": "templates/os.jadelet",
      "content": ".os\n  = @fileTreeElement\n  = @editorElement\n  = @launcherElement\n",
      "mode": "100644",
      "type": "blob"
    },
    "templates/row.jadelet": {
      "path": "templates/row.jadelet",
      "content": "tr\n  - @cells.forEach (cell) ->\n    td= cell\n",
      "mode": "100644",
      "type": "blob"
    },
    "templates/table.jadelet": {
      "path": "templates/table.jadelet",
      "content": "container\n  table\n    thead\n      tr\n        - @headers.forEach (header) ->\n          th= header\n    tbody\n",
      "mode": "100644",
      "type": "blob"
    },
    "test/dexie-fs.coffee": {
      "path": "test/dexie-fs.coffee",
      "content": "DexieDriver = require \"../fs/dexie-driver\"\nFilesystem = require \"../fs/filesystem\"\nDB = require \"../db\"\n\n{readAsText} = require \"../util\"\n\ndescribe \"Dexie FS\", ->\n  db = DB('fs')\n  fs = Filesystem DexieDriver(db)\n\n  it \"should write, read, and delete files\", (done) ->\n    blob = new Blob [\"yolo\"]\n\n    fs.write \"test\", blob\n    .then ->\n      fs.read(\"test\")\n    .then ({blob}) ->\n      readAsText blob\n    .then (content) ->\n      assert.equal content, \"yolo\"\n    .then ->\n      done()\n    .catch done\n\n  it \"should list files in the directory\", (done) ->\n    blob = new Blob [\"yolo\"]\n\n    Promise.all [\n      \"test2\"\n      \"yolo/yo\"\n      \"yolo/yo2\"\n    ].map (path) ->\n      fs.write path, blob\n    .then ->\n      fs.ls \"yolo\"\n    .then (results) ->\n      assert.equal results.length, 2\n      done()\n    .catch done\n",
      "mode": "100644",
      "type": "blob"
    },
    "test/ram-fs.coffee": {
      "path": "test/ram-fs.coffee",
      "content": "RAMDriver = require \"../fs/ram-driver\"\nFilesystem = require \"../fs/filesystem\"\n\n{readAsText} = require \"../util\"\n\ndescribe \"RAM FS\", ->\n  fs = Filesystem RAMDriver()\n\n  it \"should write, read, and delete files\", (done) ->\n    blob = new Blob [\"yolo\"]\n\n    fs.write \"test\", blob\n    .then ->\n      fs.read(\"test\")\n    .then ({blob}) ->\n      readAsText blob\n    .then (content) ->\n      assert.equal content, \"yolo\"\n    .then ->\n      done()\n    .catch done\n\n  it \"should list files in the directory\", (done) ->\n    blob = new Blob [\"yolo\"]\n\n    Promise.all [\n      \"test2\"\n      \"yolo/yo\"\n      \"yolo/yo2/wat\"\n      \"yolo/yo2/cool\"\n    ].map (path) ->\n      fs.write path, blob\n    .then ->\n      fs.ls \"yolo\"\n    .then (results) ->\n      assert.equal results.length, 2\n      assert.equal results[0], \"yo\"\n      assert.equal results[1], \"yo2/\"\n      done()\n    .catch done\n",
      "mode": "100644",
      "type": "blob"
    },
    "test/s3-fs.coffee": {
      "path": "test/s3-fs.coffee",
      "content": "S3Driver = require \"../fs/s3-driver\"\nFilesystem = require \"../fs/filesystem\"\n\n{readAsText} = require \"../util\"\n{awsLogin} = require \"../amazon_login\"\n\nAWS.config.update\n  region: 'us-east-1'\n\nAWS.config.credentials = new AWS.CognitoIdentityCredentials\n  IdentityPoolId: 'us-east-1:4fe22da5-bb5e-4a78-a260-74ae0a140bf9'\n\nsetup = ->\n  options = { scope : 'profile' }\n  awsLogin options\n  .then (logins) ->\n    id = AWS.config.credentials.identityId\n    bucket = new AWS.S3\n      params:\n        Bucket: \"whimsy-fs\"\n\n    fs = Filesystem S3Driver(id, bucket)\n    fs.cd \"test\"\n\n    fs\n\ndescribe \"S3 FS\", ->\n->\n  it \"should write, read, and delete files\", (done) ->\n    @timeout(10000)\n\n    setup()\n    .then (fs) ->\n      blob = new Blob [\"yolo\"]\n\n      fs.write \"test\", blob\n      .then ->\n        fs.read(\"test\")\n      .then ({blob}) ->\n        readAsText blob\n      .then (content) ->\n        assert.equal content, \"yolo\"\n      .then ->\n        done()\n    .catch done\n\n  it \"should list files in the directory\", (done) ->\n    @timeout(5000)\n\n    setup()\n    .then (fs) ->\n      blob = new Blob [\"yolo\"]\n\n      Promise.all [\n        \"test2\"\n        \"yolo/yo\"\n        \"yolo/yo2\"\n      ].map (path) ->\n        fs.write path, blob\n      .then ->\n        fs.ls \"yolo\"\n      .then (results) ->\n        console.log \"RES\", results\n        assert.equal results.length, 2\n        done()\n    .catch done\n",
      "mode": "100644",
      "type": "blob"
    },
    "text_editor.coffee": {
      "path": "text_editor.coffee",
      "content": "Observable = require \"observable\"\n\nmodule.exports = (os) ->\n  self =\n    contents: Observable \"Hello\"\n    contentType: Observable \"text/plain\"\n    path: Observable \"test.txt\"\n    save: ->\n      blob = new Blob [self.contents()], type: self.contentType()\n      os.put self.path(), blob\n",
      "mode": "100644",
      "type": "blob"
    },
    "util.coffee": {
      "path": "util.coffee",
      "content": "module.exports =\n  log: (obj, rest...) ->\n    console.log obj, rest...\n    return obj\n\n  # TODO: Hook into progress where possible: .on 'httpUploadProgress'\n  pinvoke: (object, method, params...) ->\n    new Promise (resolve, reject) ->\n      object[method] params..., (err, result) ->\n        if err\n          reject err\n          return\n\n        resolve result\n\n  startsWith: (str, prefix) ->\n    str.lastIndexOf(prefix, 0) is 0\n\n  endsWith: (str, suffix) ->\n    str.indexOf(suffix, str.length - suffix.length) != -1\n\n  emptyElement: (element) ->\n    while element.lastChild\n      element.lastChild.remove()\n\n  readAsText: (file) ->\n    new Promise (resolve, reject) ->\n      reader = new FileReader\n      reader.onload = ->\n        resolve reader.result\n      reader.onerror = reject\n      reader.readAsText(file)\n\n  uniq: (array) ->\n    Array.from new Set array\n",
      "mode": "100644",
      "type": "blob"
    },
    "whimsy-fs.md": {
      "path": "whimsy-fs.md",
      "content": "\\*S\\*W\\*A\\*G\\*\n==============\n\nLet's use AWS Cognito to be all serverless all the time!\n\nUse S3 as a filesystem.\n\nurls can be constructed by\n\n       https://s3.amazonaws.com/#{bucket}/#{userId}/#{sha}\n    -> https://#{base_cdn}/#{userId}/#{sha}\n       https://#{user_cdn}/#{sha}\n\nPricing: https://aws.amazon.com/s3/pricing/\n\nS3 Bucket Config\n----------------\n\nYou need to set up CORS on the S3 Bucket to allow posting from the browser\n\n    <CORSConfiguration xmlns=\"http://s3.amazonaws.com/doc/2006-03-01\">\n       <CORSRule>\n          <AllowedOrigin>*</AllowedOrigin>\n          <AllowedMethod>GET</AllowedMethod>\n          <AllowedMethod>PUT</AllowedMethod>\n          <AllowedMethod>POST</AllowedMethod>\n          <AllowedMethod>DELETE</AllowedMethod>\n          <AllowedHeader>*</AllowedHeader>\n       </CORSRule>\n    </CORSConfiguration>\n\nSet up public read policy on S3 Bucket\n\n    {\n    \t\"Version\": \"2012-10-17\",\n    \t\"Statement\": [\n    \t\t{\n    \t\t\t\"Effect\": \"Allow\",\n    \t\t\t\"Principal\": \"*\",\n    \t\t\t\"Action\": [\n    \t\t\t\t\"s3:GetObject\"\n    \t\t\t],\n    \t\t\t\"Resource\": [\n    \t\t\t\t\"arn:aws:s3:::whimsy-fs/*\"\n    \t\t\t]\n    \t\t}\n    \t]\n    }\n\nCloudfront Config\n-----------------\n\nhttps only\n\nPoint at S3 bucket\n\nEnable options and whitelist headers for CORS\n\n\nRoute53 Config\n--------------\n\nfs.whimsy.space\n\nCreate A (Alias record) pointing to cloudfront distribution\n\n\nAWS Cognito User Policy\n-----------------------\n\n    {\n        \"Version\": \"2012-10-17\",\n        \"Statement\": [\n            {\n                \"Effect\": \"Allow\",\n                \"Action\": [\n                    \"dynamodb:GetItem\",\n                    \"dynamodb:BatchGetItem\",\n                    \"dynamodb:Query\",\n                    \"dynamodb:PutItem\",\n                    \"dynamodb:UpdateItem\",\n                    \"dynamodb:DeleteItem\",\n                    \"dynamodb:BatchWriteItem\"\n                ],\n                \"Resource\": [\n                    \"arn:aws:dynamodb:us-east-1:186123361267:table/whimsy-fs\"\n                ],\n                \"Condition\": {\n                    \"ForAllValues:StringEquals\": {\n                        \"dynamodb:LeadingKeys\": [\n                            \"${cognito-identity.amazonaws.com:sub}\"\n                        ]\n                    }\n                }\n            },\n            {\n                \"Action\": [\n                    \"s3:ListBucket\"\n                ],\n                \"Effect\": \"Allow\",\n                \"Resource\": [\n                    \"arn:aws:s3:::whimsy-fs\"\n                ],\n                \"Condition\": {\n                    \"StringLike\": {\n                        \"s3:prefix\": [\n                            \"${cognito-identity.amazonaws.com:sub}/*\"\n                        ]\n                    }\n                }\n            },\n            {\n                \"Action\": [\n                    \"s3:GetObject\",\n                    \"s3:PutObject\",\n                    \"s3:DeleteObject\"\n                ],\n                \"Effect\": \"Allow\",\n                \"Resource\": [\n                    \"arn:aws:s3:::whimsy-fs/${cognito-identity.amazonaws.com:sub}/*\"\n                ]\n            }\n        ]\n    }\n\nUsing Amazon Login for Auth\n---------------------------\n\nCould also instead use FB, Google, pretty much any OAuth\n\nSet up app at https://sellercentral.amazon.com/gp/homepage.html the interface is\nhideous yet functional.\n\nUpdate Cognito Identity Pool with Amazon App Id\n\nOptionally add Twitter, Goog, FB, etc.\n\n\nDiscontinued Tangents\n=====================\n\nDynamoDB Semantic Records linking to S3 Content Addressable Store\n\nDynamoDB Table\n\n      Primary keys     Index    Link to CAS\n        |       |        |           |\n    +-------+------+-----------+----------+------------------------\n    | owner | path | createdAt |    sha   |  extra... (tags, etc.)\n\n\nSaving a File\n-------------\n\nsha is base64 url-encoded sha256 of file contents\n\nCompute sha, save to S3 and DynamoDB\n\nS3 path is \"${cognito-identity.amazonaws.com:sub}/#{sha}\"\n\nDynamoDB path is logical path ex: /Desktop/yolo.png\nowner is \"${cognito-identity.amazonaws.com:sub}\"\ncreatedAt number: unix epoch timestamp\nsha is the same sha that matches s3\narbitrary extra meta data can be added\n\n",
      "mode": "100644",
      "type": "blob"
    },
    "templates/menu.jadelet": {
      "path": "templates/menu.jadelet",
      "content": "ul.menu-bar= @items\n",
      "mode": "100644"
    },
    "menu.md": {
      "path": "menu.md",
      "content": "DSL For Creating Menus\n======================\n\nExample from Notepad\n\n    File\n      New\n      Open\n      Save\n      Save As\n    Edit\n      Undo\n      Redo\n      -\n      Cut\n      Copy\n      Paste\n      Delete\n      -\n      Find\n      Find Next\n      Replace\n      Go To\n      -\n      Select All\n      Time/Date\n    Format\n      Word Wrap\n      Font...\n    View\n      Status Bar\n    Help\n      View Help\n      -\n      About Notepad\n\nTop level menus are not indented, their options are indented beneath them.\nSeparators are indicated by `-`. Submenus can be indented further:\n\n    File\n      New\n      Open\n      Save\n      -\n      Import\n        Audio...\n        Labels...\n        MIDI...\n        Raw Data...\n      -\n\nWindows seems to use `...` after options to indicate that the option will open\na window for further configuration.",
      "mode": "100644"
    },
    "test/menu.coffee": {
      "path": "test/menu.coffee",
      "content": "parse = require \"../lib/indent-parse\"\n\ndescribe \"Menu Parser\", ->\n  it \"should parse menus into lists\", ->\n    data = \"\"\"\n      File\n    \"\"\"\n\n    results = parse(data)\n    assert.deepEqual [\"File\"], results\n\n  it \"should parse empty\", ->\n    data = \"\"\"\n    \"\"\"\n\n    assert.deepEqual [], parse(data)\n\n  it \"should deal with nesting ok\", ->\n    data = \"\"\"\n      File\n        Open\n        Save\n      Edit\n        Copy\n        Paste\n      Help\n    \"\"\"\n\n    results = parse(data)\n    assert.deepEqual [\n      [\"File\", [\"Open\", \"Save\"]]\n      [\"Edit\", [\"Copy\", \"Paste\"]]\n      \"Help\"\n    ], results\n\n  it \"should parse big ol' menus\", ->\n    results = parse \"\"\"\n      File\n        New\n        Open\n        Save\n        Save As\n      Edit\n        Undo\n        Redo\n        -\n        Cut\n        Copy\n        Paste\n        Delete\n        -\n        Find\n        Find Next\n        Replace\n        Go To\n        -\n        Select All\n        Time/Date\n      Format\n        Word Wrap\n        Font...\n      View\n        Status Bar\n      Help\n        View Help\n        -\n        About Notepad\n    \"\"\"\n\n    assert.deepEqual [\n      [\"File\", [\"New\", \"Open\", \"Save\", \"Save As\"]]\n      [\"Edit\", [\"Undo\", \"Redo\", \"-\", \"Cut\", \"Copy\", \"Paste\", \"Delete\", \"-\", \"Find\", \"Find Next\", \"Replace\", \"Go To\", \"-\", \"Select All\", \"Time/Date\"]]\n      [\"Format\", [\"Word Wrap\", \"Font...\"]]\n      [\"View\", [\"Status Bar\"]]\n      [\"Help\", [\"View Help\", \"-\", \"About Notepad\"]]\n    ], results\n\n  it \"should parse hella nested menus\", ->\n    results = parse \"\"\"\n      File\n        Special\n          Nested\n            Super\n              Awesome\n    \"\"\"\n\n    assert.deepEqual [\n      [\"File\", [\n        [\"Special\", [\n          [\"Nested\", [\n            [\"Super\", [\n              \"Awesome\"\n            ]]\n          ]]\n        ]]\n      ]]\n    ], results\n",
      "mode": "100644"
    },
    "lib/indent-parse.coffee": {
      "path": "lib/indent-parse.coffee",
      "content": "top = (stack) ->\n  stack[stack.length - 1]\n\nparse = (source) ->\n  stack = [[]]\n  indentation = /^(  )*/\n  depth = 0\n\n  source.split(\"\\n\").forEach (line, lineNumber) ->\n    match = line.match(indentation)[0]\n    text = line.replace(match, \"\")\n    newDepth = match.length / 2\n\n    return unless text.trim().length\n    current = text\n\n    if newDepth > depth\n      unless newDepth is depth + 1\n        throw new Error \"Unexpected indentation on line #{lineNumber}\"\n      # We're one level further in\n      # Convert the simple string to a [label, items] pair\n      items = []\n      prev = top(stack)\n      prev.push [prev.pop(), items]\n      stack.push items\n    else if newDepth < depth\n      # Pop stack to correct depth\n      stack = stack.slice(0, newDepth + 1)\n\n    depth = newDepth\n\n    top(stack).push current\n\n  return stack[0]\n\nmodule.exports = parse\n",
      "mode": "100644"
    },
    "samples/notepad-menu.coffee": {
      "path": "samples/notepad-menu.coffee",
      "content": "parse = require \"../lib/indent-parse\"\n\nmodule.exports = parse \"\"\"\n  File\n    New\n    Open\n    Save\n    Save As\n  Edit\n    Undo\n    Redo\n    -\n    Cut\n    Copy\n    Paste\n    Delete\n    -\n    Find\n    Find Next\n    Replace\n    Go To\n    -\n    Select All\n    Time/Date\n  Format\n    Word Wrap\n    Font...\n  View\n    Status Bar\n  Help\n    View Help\n    -\n    About Notepad\n\"\"\"\n",
      "mode": "100644"
    },
    "views/menu.coffee": {
      "path": "views/menu.coffee",
      "content": "Observable = require \"observable\"\n\nMenuTemplate = require \"../templates/menu\"\nMenuItemTemplate = require \"../templates/menu-item\"\nMenuSeparator = require \"../templates/menu-separator\"\nSubmenuTemplate = require \"../templates/submenu\"\n\nisDescendant = (element, ancestor) ->\n  while (parent = element.parentElement)\n    return true if element is ancestor\n    element = parent\n\nPresenter = (data) ->\n  \nMenuItemView = (item) ->\n  active = Observable false\n\n  if Array.isArray(item) # Submenu\n    [label, items] = item\n\n    SubmenuTemplate\n      class: \"menu\"\n      activeClass: ->\n        \"active\" if active()\n      click: ->\n        active true\n      mouseover: (e) ->\n        console.log \"over\", e\n        # active true\n      mouseout: (e) ->\n        console.log \"out\", e\n      label: label\n      content: items.map MenuItemView\n\n  else\n    if item is \"-\" # separator\n      MenuSeparator()\n    else\n      MenuItemTemplate\n        click: ->\n          console.log item\n        label: item\n\nmodule.exports = (data) ->\n  presenter = Presenter(data)\n\n  menuItems = data.map MenuItemView\n\n  element = MenuTemplate\n    items: menuItems\n\n  element: element\n\n###\nli.menu.active\n  span File\n  ul.options\n    li Open\n    li Save\n###\n",
      "mode": "100644"
    },
    "templates/menu-item.jadelet": {
      "path": "templates/menu-item.jadelet",
      "content": "li(@class @click)\n  label= @label\n",
      "mode": "100644"
    },
    "templates/submenu.jadelet": {
      "path": "templates/submenu.jadelet",
      "content": "li(@class class=@activeClass @click @mouseover @mouseout)\n  label= @label\n  ul.options= @content\n",
      "mode": "100644"
    },
    "templates/menu-separator.jadelet": {
      "path": "templates/menu-separator.jadelet",
      "content": "li\n  hr\n",
      "mode": "100644"
    }
  },
  "distribution": {
    "amazon_login": {
      "path": "amazon_login",
      "content": "(function() {\n  var pinvoke, queryUserInfo;\n\n  pinvoke = require(\"./util\").pinvoke;\n\n  amazon.Login.setClientId('amzn1.application-oa2-client.29b275f9076a406c90a66b025fab96bf');\n\n  queryUserInfo = function(token) {\n    return fetch(\"https://api.amazon.com/user/profile\", {\n      headers: {\n        Authorization: \"bearer \" + token,\n        Accept: \"application/json\"\n      }\n    }).then(function(response) {\n      return response.json();\n    }).then(function(json) {\n      return console.log(json);\n    })[\"catch\"](function(e) {\n      return console.error(e);\n    });\n  };\n\n  module.exports = {\n    awsLogin: function(options) {\n      return new Promise(function(resolve, reject) {\n        return amazon.Login.authorize(options, function(resp) {\n          var creds, logins, token;\n          if (resp.error) {\n            return reject(resp);\n          }\n          console.log(resp);\n          token = resp.access_token;\n          creds = AWS.config.credentials;\n          logins = {\n            'www.amazon.com': token\n          };\n          creds.params.Logins = logins;\n          creds.expired = true;\n          queryUserInfo(token);\n          return pinvoke(AWS.config.credentials, \"get\").then(function() {\n            return resolve(logins);\n          }, reject);\n        });\n      });\n    }\n  };\n\n}).call(this);\n",
      "type": "blob"
    },
    "db": {
      "path": "db",
      "content": "(function() {\n  module.exports = function(dbName) {\n    var db;\n    if (dbName == null) {\n      dbName = 'fs';\n    }\n    db = new Dexie(dbName);\n    db.version(1).stores({\n      files: 'path, blob, type, createdAt, updatedAt'\n    });\n    return db;\n  };\n\n}).call(this);\n",
      "type": "blob"
    },
    "dynamo_stuff": {
      "path": "dynamo_stuff",
      "content": "(function() {\n  var pinvoke, queryDynamoDB, readFromDynamoDB, writeToDynamoDB;\n\n  pinvoke = require(\"./util\").pinvoke;\n\n  writeToDynamoDB = function(table, id, path, sha) {\n    var params, time;\n    time = \"\" + (+(new Date));\n    params = {\n      Item: {\n        owner: {\n          S: id\n        },\n        path: {\n          S: path\n        },\n        created_at: {\n          S: time\n        },\n        sha: {\n          S: sha\n        }\n      }\n    };\n    return pinvoke(table, \"putItem\", params);\n  };\n\n  queryDynamoDB = function(table, id) {\n    var params;\n    table = table;\n    params = {\n      AttributesToGet: [\"path\", \"sha\"],\n      KeyConditions: {\n        owner: {\n          ComparisonOperator: \"EQ\",\n          AttributeValueList: [\n            {\n              S: id\n            }\n          ]\n        }\n      }\n    };\n    return pinvoke(table, \"query\", params);\n  };\n\n  readFromDynamoDB = function(table, id, path) {\n    var params;\n    params = {\n      Key: {\n        owner: {\n          S: id\n        },\n        path: {\n          S: path\n        }\n      }\n    };\n    return pinvoke(table, \"getItem\", params);\n  };\n\n}).call(this);\n",
      "type": "blob"
    },
    "experiments/dexie-fs": {
      "path": "experiments/dexie-fs",
      "content": "(function() {\n  var DexieFS, Filesystem, fs;\n\n  DexieFS = require(\"../fs/dexie-driver\");\n\n  Filesystem = require(\"../fs/filesystem\");\n\n  fs = Filesystem(DexieFS('fs'));\n\n  fs.cd(\"goose\");\n\n  fs.cd(\"rad\");\n\n  fs.cd(\"/grass\");\n\n  fs.ls(\"/\").then(function(results) {\n    return console.log(results);\n  });\n\n  fs.write(\"test\", new Blob(['duder'])).then(function() {\n    return fs.read(\"test\").then(function(file) {\n      return console.log(file);\n    })[\"catch\"](function(e) {\n      return console.error(e);\n    });\n  });\n\n}).call(this);\n",
      "type": "blob"
    },
    "experiments/spreadsheet": {
      "path": "experiments/spreadsheet",
      "content": "(function() {\n  var Clusterize, InputTemplate, MenuView, Observable, RowTemplate, RowView, TableTemplate, TableView, data, element, o, sampleMenuParsed, style, tableView;\n\n  style = document.createElement(\"style\");\n\n  style.innerHTML = require(\"../style\");\n\n  document.head.appendChild(style);\n\n  Observable = require(\"observable\");\n\n  Clusterize = require(\"../lib/clusterize\");\n\n  o = function(value, type) {\n    var attribute;\n    attribute = Observable(value);\n    if (type) {\n      attribute.type = type;\n    }\n    attribute.value = attribute;\n    return attribute;\n  };\n\n  data = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9].map(function(i) {\n    return {\n      id: o(i),\n      name: o(\"yolo\"),\n      color: o(\"#FF0000\", \"color\")\n    };\n  });\n\n  RowTemplate = require(\"../templates/row\");\n\n  InputTemplate = require(\"../templates/input\");\n\n  RowView = function(datum) {\n    return RowTemplate({\n      cells: Object.keys(datum).map(function(key) {\n        var value;\n        value = datum[key];\n        return InputTemplate(value);\n      })\n    });\n  };\n\n  TableTemplate = require(\"../templates/table\");\n\n  TableView = function(data) {\n    var clusterize, containerElement, filterAndSort, filterFn, rowElements, sortFn, tableBody;\n    containerElement = TableTemplate({\n      headers: Object.keys(data[0])\n    });\n    tableBody = containerElement.children[0].children[1];\n    filterFn = function(datum) {\n      return true;\n    };\n    sortFn = function(a, b) {\n      return a.id() - b.id();\n    };\n    filterAndSort = function(data, filterFn, sortFn) {\n      var filteredData;\n      if (filterFn == null) {\n        filterFn = function() {\n          return true;\n        };\n      }\n      filteredData = data.filter(filterFn);\n      if (sortFn) {\n        return filteredData.sort(sortFn);\n      } else {\n        return filteredData;\n      }\n    };\n    rowElements = function() {\n      return filterAndSort(data, filterFn, sortFn).map(RowView);\n    };\n    clusterize = new Clusterize({\n      scrollElem: containerElement,\n      contentElem: tableBody,\n      rows: rowElements()\n    });\n    return {\n      element: containerElement,\n      refresh: function() {\n        return clusterize.refresh();\n      }\n    };\n  };\n\n  sampleMenuParsed = require(\"../samples/notepad-menu\");\n\n  MenuView = require(\"../views/menu\");\n\n  element = MenuView(sampleMenuParsed).element;\n\n  document.body.appendChild(element);\n\n  tableView = TableView(data);\n\n  document.body.appendChild(tableView.element);\n\n  tableView.refresh();\n\n}).call(this);\n",
      "type": "blob"
    },
    "fs/dexie-driver": {
      "path": "fs/dexie-driver",
      "content": "(function() {\n  var uniq;\n\n  uniq = require(\"../util\").uniq;\n\n  module.exports = function(db) {\n    var Files;\n    Files = db.files;\n    return {\n      read: function(path) {\n        return Files.get(path);\n      },\n      write: function(path, blob) {\n        return Files.put({\n          path: path,\n          blob: blob,\n          type: blob.type,\n          updatedAt: +(new Date)\n        });\n      },\n      \"delete\": function(path) {\n        return Files[\"delete\"](path);\n      },\n      list: function(dir) {\n        return Files.where(\"path\").startsWith(dir).toArray().then(function(results) {\n          return uniq(results.map(function(_arg) {\n            var path;\n            path = _arg.path;\n            return path = path.replace(dir, \"\").replace(/\\/.*$/, \"/\");\n          }));\n        });\n      }\n    };\n  };\n\n}).call(this);\n",
      "type": "blob"
    },
    "fs/filesystem": {
      "path": "fs/filesystem",
      "content": "(function() {\n  var __slice = [].slice;\n\n  module.exports = function(driver) {\n    var SEPARATOR, join, normalizeDir, normalizePath, parsePath, pwd;\n    SEPARATOR = \"/\";\n    pwd = SEPARATOR;\n    normalizeDir = function(dir) {\n      return normalizePath(dir).replace(/\\/?$/, SEPARATOR);\n    };\n    normalizePath = function(path) {\n      return path.replace(/\\/\\/+/, SEPARATOR).replace(/\\/[^/]*\\/\\.\\./g, \"\").replace(/\\/\\.\\//g, SEPARATOR);\n    };\n    join = function() {\n      var paths;\n      paths = 1 <= arguments.length ? __slice.call(arguments, 0) : [];\n      return normalizePath(paths.join(SEPARATOR));\n    };\n    parsePath = function(path) {\n      if (path.indexOf(SEPARATOR) === 0) {\n        return normalizePath(path);\n      } else {\n        return join(pwd, path);\n      }\n    };\n    return {\n      read: function(path) {\n        path = parsePath(path);\n        return driver.read(path);\n      },\n      write: function(path, blob) {\n        path = parsePath(path);\n        return driver.write(path, blob);\n      },\n      ls: function(dir) {\n        if (dir == null) {\n          dir = pwd;\n        }\n        dir = normalizeDir(parsePath(dir));\n        return driver.list(dir);\n      },\n      rm: function(path) {\n        path = parsePath(path);\n        return driver[\"delete\"](path);\n      },\n      cd: function(path) {\n        return pwd = normalizeDir(parsePath(path));\n      },\n      pwd: function() {\n        return pwd;\n      }\n    };\n  };\n\n}).call(this);\n",
      "type": "blob"
    },
    "fs/ram-driver": {
      "path": "fs/ram-driver",
      "content": "(function() {\n  var P, startsWith, uniq, _ref;\n\n  module.exports = function(files) {\n    var notFound, self;\n    if (files == null) {\n      files = [];\n    }\n    notFound = \"File not found\";\n    return self = {\n      read: function(path) {\n        return P(function() {\n          var file;\n          file = files.filter(function(_arg) {\n            var filePath;\n            filePath = _arg.path;\n            return path === filePath;\n          })[0];\n          if (file) {\n            return file;\n          } else {\n            throw notFound;\n          }\n        });\n      },\n      write: function(path, blob) {\n        return self.read(path)[\"catch\"](function(error) {\n          if (error === notFound) {\n\n          } else {\n            throw error;\n          }\n        }).then(function(file) {\n          var now;\n          now = +(new Date);\n          if (file) {\n            file.blob = blob;\n            file.type = blob.type;\n            return file.updatedAt = now;\n          } else {\n            return files.push({\n              path: path,\n              blob: blob,\n              type: blob.type,\n              updatedAt: now,\n              createdAt: now\n            });\n          }\n        });\n      },\n      \"delete\": function(path) {\n        return P(function() {\n          files = files.filter(function(_arg) {\n            var filePath;\n            filePath = _arg.path;\n            return path !== filePath;\n          });\n        });\n      },\n      list: function(dir) {\n        return P(function() {\n          return files.filter(function(_arg) {\n            var path;\n            path = _arg.path;\n            return startsWith(path, dir);\n          });\n        }).then(function(results) {\n          return uniq(results.map(function(_arg) {\n            var path;\n            path = _arg.path;\n            return path = path.replace(dir, \"\").replace(/\\/.*$/, \"/\");\n          }));\n        });\n      }\n    };\n  };\n\n  P = function(fn) {\n    return Promise.resolve().then(fn);\n  };\n\n  _ref = require(\"../util\"), startsWith = _ref.startsWith, uniq = _ref.uniq;\n\n}).call(this);\n",
      "type": "blob"
    },
    "fs/s3-driver": {
      "path": "fs/s3-driver",
      "content": "(function() {\n  var blob, deleteFromS3, delimiter, endsWith, getFromS3, json, list, log, pinvoke, startsWith, status, uploadToS3, _ref;\n\n  _ref = require(\"../util\"), log = _ref.log, pinvoke = _ref.pinvoke, startsWith = _ref.startsWith, endsWith = _ref.endsWith;\n\n  delimiter = \"/\";\n\n  status = function(response) {\n    if (response.status >= 200 && response.status < 300) {\n      return response;\n    } else {\n      throw response;\n    }\n  };\n\n  json = function(response) {\n    return response.json();\n  };\n\n  blob = function(response) {\n    return response.blob();\n  };\n\n  uploadToS3 = function(bucket, key, file, options) {\n    var cacheControl;\n    if (options == null) {\n      options = {};\n    }\n    cacheControl = options.cacheControl;\n    if (cacheControl == null) {\n      cacheControl = 0;\n    }\n    return pinvoke(bucket, \"putObject\", {\n      Key: key,\n      ContentType: file.type,\n      Body: file,\n      CacheControl: \"max-age=\" + cacheControl\n    });\n  };\n\n  getFromS3 = function(bucket, key) {\n    return fetch(\"https://\" + bucket.config.params.Bucket + \".s3.amazonaws.com/\" + key).then(status).then(blob);\n  };\n\n  deleteFromS3 = function(bucket, key) {\n    return pinvoke(bucket, \"deleteObject\", {\n      Key: key\n    });\n  };\n\n  list = function(bucket, id, dir) {\n    var prefix;\n    if (!startsWith(dir, delimiter)) {\n      dir = \"\" + delimiter + dir;\n    }\n    if (!endsWith(dir, delimiter)) {\n      dir = \"\" + dir + delimiter;\n    }\n    prefix = \"\" + id + dir;\n    return pinvoke(bucket, \"listObjects\", {\n      Prefix: prefix,\n      Delimiter: delimiter\n    }).then(function(result) {\n      return result.CommonPrefixes.map(function(p) {\n        return p.Prefix.replace(prefix, \"\");\n      }).concat(result.Contents.map(function(o) {\n        return o.Key.replace(prefix, \"\");\n      }));\n    });\n  };\n\n  module.exports = function(id, bucket) {\n    return {\n      read: function(path) {\n        var key;\n        if (!startsWith(path, delimiter)) {\n          path = delimiter + path;\n        }\n        key = \"\" + id + path;\n        return getFromS3(bucket, key).then(function(blob) {\n          return {\n            path: path,\n            blob: blob\n          };\n        });\n      },\n      write: function(path, file) {\n        var key;\n        if (!startsWith(path, delimiter)) {\n          path = delimiter + path;\n        }\n        key = \"\" + id + path;\n        return uploadToS3(bucket, key, file);\n      },\n      \"delete\": function(path) {\n        var key;\n        if (!startsWith(path, delimiter)) {\n          path = delimiter + path;\n        }\n        key = \"\" + id + path;\n        return deleteFromS3(bucket, key);\n      },\n      list: function(dir) {\n        if (dir == null) {\n          dir = \"/\";\n        }\n        return list(bucket, id, dir);\n      }\n    };\n  };\n\n}).call(this);\n",
      "type": "blob"
    },
    "lib/clusterize": {
      "path": "lib/clusterize",
      "content": "/*! Clusterize.js - v0.16.1 - 2016-08-16\r\n* http://NeXTs.github.com/Clusterize.js/\r\n* Copyright (c) 2015 Denis Lukov; Licensed GPLv3 */\r\n\r\n;(function(name, definition) {\r\n    if (typeof module != 'undefined') module.exports = definition();\r\n    else if (typeof define == 'function' && typeof define.amd == 'object') define(definition);\r\n    else this[name] = definition();\r\n}('Clusterize', function() {\r\n  \"use strict\"\r\n\r\n  // detect ie9 and lower\r\n  // https://gist.github.com/padolsey/527683#comment-786682\r\n  var ie = (function(){\r\n    for( var v = 3,\r\n             el = document.createElement('b'),\r\n             all = el.all || [];\r\n         el.innerHTML = '<!--[if gt IE ' + (++v) + ']><i><![endif]-->',\r\n         all[0];\r\n       ){}\r\n    return v > 4 ? v : document.documentMode;\r\n  }()),\r\n  is_mac = navigator.platform.toLowerCase().indexOf('mac') + 1;\r\n  var Clusterize = function(data) {\r\n    if( ! (this instanceof Clusterize))\r\n      return new Clusterize(data);\r\n    var self = this;\r\n\r\n    var defaults = {\r\n      item_height: 0,\r\n      block_height: 0,\r\n      rows_in_block: 50,\r\n      rows_in_cluster: 0,\r\n      cluster_height: 0,\r\n      blocks_in_cluster: 4,\r\n      tag: null,\r\n      content_tag: null,\r\n      show_no_data_row: true,\r\n      no_data_class: 'clusterize-no-data',\r\n      no_data_text: 'No data',\r\n      keep_parity: true,\r\n      callbacks: {},\r\n      scroll_top: 0\r\n    }\r\n\r\n    // public parameters\r\n    self.options = {};\r\n    var options = ['rows_in_block', 'blocks_in_cluster', 'show_no_data_row', 'no_data_class', 'no_data_text', 'keep_parity', 'tag', 'callbacks'];\r\n    for(var i = 0, option; option = options[i]; i++) {\r\n      self.options[option] = typeof data[option] != 'undefined' && data[option] != null\r\n        ? data[option]\r\n        : defaults[option];\r\n    }\r\n\r\n    var elems = ['scroll', 'content'];\r\n    for(var i = 0, elem; elem = elems[i]; i++) {\r\n      self[elem + '_elem'] = data[elem + 'Id']\r\n        ? document.getElementById(data[elem + 'Id'])\r\n        : data[elem + 'Elem'];\r\n      if( ! self[elem + '_elem'])\r\n        throw new Error(\"Error! Could not find \" + elem + \" element\");\r\n    }\r\n\r\n    // tabindex forces the browser to keep focus on the scrolling list, fixes #11\r\n    if( ! self.content_elem.hasAttribute('tabindex'))\r\n      self.content_elem.setAttribute('tabindex', 0);\r\n\r\n    // private parameters\r\n    var rows = isArray(data.rows)\r\n        ? data.rows\r\n        : self.fetchMarkup(),\r\n      cache = {data: '', bottom: 0},\r\n      scroll_top = self.scroll_elem.scrollTop;\r\n\r\n    // get row height\r\n    self.exploreEnvironment(rows);\r\n\r\n    // append initial data\r\n    self.insertToDOM(rows, cache);\r\n\r\n    // restore the scroll position\r\n    self.scroll_elem.scrollTop = scroll_top;\r\n\r\n    // adding scroll handler\r\n    var last_cluster = false,\r\n    scroll_debounce = 0,\r\n    pointer_events_set = false,\r\n    scrollEv = function() {\r\n      // fixes scrolling issue on Mac #3\r\n      if (is_mac) {\r\n          if( ! pointer_events_set) self.content_elem.style.pointerEvents = 'none';\r\n          pointer_events_set = true;\r\n          clearTimeout(scroll_debounce);\r\n          scroll_debounce = setTimeout(function () {\r\n              self.content_elem.style.pointerEvents = 'auto';\r\n              pointer_events_set = false;\r\n          }, 50);\r\n      }\r\n      if (last_cluster != (last_cluster = self.getClusterNum()))\r\n        self.insertToDOM(rows, cache);\r\n      if (self.options.callbacks.scrollingProgress)\r\n        self.options.callbacks.scrollingProgress(self.getScrollProgress());\r\n    },\r\n    resize_debounce = 0,\r\n    resizeEv = function() {\r\n      clearTimeout(resize_debounce);\r\n      resize_debounce = setTimeout(self.refresh, 30);\r\n    }\r\n    on('scroll', self.scroll_elem, scrollEv);\r\n    on('resize', window, resizeEv);\r\n\r\n    // public methods\r\n    self.destroy = function(clean) {\r\n      off('scroll', self.scroll_elem, scrollEv);\r\n      off('resize', window, resizeEv);\r\n      self.html((clean ? self.generateEmptyRow() : rows));\r\n    }\r\n    self.refresh = function() {\r\n      self.getRowsHeight(rows) && self.update(rows);\r\n    }\r\n    self.update = function(new_rows) {\r\n      rows = isArray(new_rows)\r\n        ? new_rows\r\n        : [];\r\n      var scroll_top = self.scroll_elem.scrollTop;\r\n      // fixes #39\r\n      if(rows.length * self.options.item_height < scroll_top) {\r\n        self.scroll_elem.scrollTop = 0;\r\n        last_cluster = 0;\r\n      }\r\n      self.insertToDOM(rows, cache);\r\n      self.scroll_elem.scrollTop = scroll_top;\r\n    }\r\n    self.clear = function() {\r\n      self.update([]);\r\n    }\r\n    self.getRowsAmount = function() {\r\n      return rows.length;\r\n    }\r\n    self.getScrollProgress = function() {\r\n      return this.options.scroll_top / (rows.length * this.options.item_height) * 100 || 0;\r\n    }\r\n\r\n    var add = function(where, _new_rows) {\r\n      var new_rows = isArray(_new_rows)\r\n        ? _new_rows\r\n        : [];\r\n      if( ! new_rows.length) return;\r\n      rows = where == 'append'\r\n        ? rows.concat(new_rows)\r\n        : new_rows.concat(rows);\r\n      self.insertToDOM(rows, cache);\r\n    }\r\n    self.append = function(rows) {\r\n      add('append', rows);\r\n    }\r\n    self.prepend = function(rows) {\r\n      add('prepend', rows);\r\n    }\r\n  }\r\n\r\n  Clusterize.prototype = {\r\n    constructor: Clusterize,\r\n    // fetch existing markup\r\n    fetchMarkup: function() {\r\n      return this.getChildNodes(this.content_elem);\r\n    },\r\n    // get tag name, content tag name, tag height, calc cluster height\r\n    exploreEnvironment: function(rows) {\r\n      var opts = this.options;\r\n      opts.content_tag = this.content_elem.tagName.toLowerCase();\r\n      if( rows.length < 3) return;\r\n      if(this.content_elem.children.length <= 1) {\r\n        this.html([rows[0], rows[1], rows[2]]);\r\n      }\r\n      if( ! opts.tag) opts.tag = this.content_elem.children[0].tagName.toLowerCase();\r\n      this.getRowsHeight(rows);\r\n    },\r\n    getRowsHeight: function(rows) {\r\n      var opts = this.options,\r\n        prev_item_height = opts.item_height;\r\n      opts.cluster_height = 0;\r\n      if( ! rows.length) return;\r\n      var nodes = this.content_elem.children;\r\n      opts.item_height = nodes[Math.floor(nodes.length / 2)].offsetHeight;\r\n      // consider table's border-spacing\r\n      if(opts.tag == 'tr' && getStyle('borderCollapse', this.content_elem) != 'collapse')\r\n        opts.item_height += parseInt(getStyle('borderSpacing', this.content_elem), 10) || 0;\r\n      opts.block_height = opts.item_height * opts.rows_in_block;\r\n      opts.rows_in_cluster = opts.blocks_in_cluster * opts.rows_in_block;\r\n      opts.cluster_height = opts.blocks_in_cluster * opts.block_height;\r\n      return prev_item_height != opts.item_height;\r\n    },\r\n    // get current cluster number\r\n    getClusterNum: function () {\r\n      this.options.scroll_top = this.scroll_elem.scrollTop;\r\n      return Math.floor(this.options.scroll_top / (this.options.cluster_height - this.options.block_height)) || 0;\r\n    },\r\n    // generate empty row if no data provided\r\n    generateEmptyRow: function() {\r\n      var opts = this.options;\r\n      if( ! opts.tag || ! opts.show_no_data_row) return [];\r\n      var empty_row = document.createElement(opts.tag),\r\n        no_data_content = document.createTextNode(opts.no_data_text), td;\r\n      empty_row.className = opts.no_data_class;\r\n      if(opts.tag == 'tr') {\r\n        td = document.createElement('td');\r\n        // fixes #53\r\n        td.colSpan = 100;\r\n        td.appendChild(no_data_content);\r\n      }\r\n      empty_row.appendChild(td || no_data_content);\r\n      return [empty_row];\r\n    },\r\n    // generate cluster for current scroll position\r\n    generate: function (rows, cluster_num) {\r\n      var opts = this.options,\r\n        rows_len = rows.length;\r\n      if (rows_len < opts.rows_in_block) {\r\n        return {\r\n          top_offset: 0,\r\n          bottom_offset: 0,\r\n          rows_above: 0,\r\n          rows: rows_len ? rows : this.generateEmptyRow()\r\n        };\r\n      }\r\n      if( ! opts.cluster_height) {\r\n        this.exploreEnvironment(rows);\r\n      }\r\n      var items_start = Math.max((opts.rows_in_cluster - opts.rows_in_block) * cluster_num, 0),\r\n        items_end = items_start + opts.rows_in_cluster,\r\n        top_offset = Math.max(items_start * opts.item_height, 0),\r\n        bottom_offset = Math.max((rows_len - items_end) * opts.item_height, 0),\r\n        this_cluster_rows = [],\r\n        rows_above = items_start;\r\n      if(top_offset < 1) {\r\n        rows_above++;\r\n      }\r\n      for (var i = items_start; i < items_end; i++) {\r\n        rows[i] && this_cluster_rows.push(rows[i]);\r\n      }\r\n      return {\r\n        top_offset: top_offset,\r\n        bottom_offset: bottom_offset,\r\n        rows_above: rows_above,\r\n        rows: this_cluster_rows\r\n      };\r\n    },\r\n    renderExtraTag: function(class_name, height) {\r\n      var tag = document.createElement(this.options.tag),\r\n        clusterize_prefix = 'clusterize-';\r\n      tag.className = [clusterize_prefix + 'extra-row', clusterize_prefix + class_name].join(' ');\r\n      height && (tag.style.height = height + 'px');\r\n      return tag;\r\n    },\r\n    // if necessary verify data changed and insert to DOM\r\n    insertToDOM: function(rows, cache) {\r\n      var data = this.generate(rows, this.getClusterNum()),\r\n        this_cluster_rows = data.rows,\r\n        this_cluster_content_changed = this.checkChanges('data', this_cluster_rows, cache),\r\n        only_bottom_offset_changed = this.checkChanges('bottom', data.bottom_offset, cache),\r\n        callbacks = this.options.callbacks,\r\n        layout = [];\r\n\r\n      if(this_cluster_content_changed) {\r\n        if(data.top_offset) {\r\n          this.options.keep_parity && layout.push(this.renderExtraTag('keep-parity'));\r\n          layout.push(this.renderExtraTag('top-space', data.top_offset));\r\n        }\r\n        layout = layout.concat(this_cluster_rows);\r\n        data.bottom_offset && layout.push(this.renderExtraTag('bottom-space', data.bottom_offset));\r\n        callbacks.clusterWillChange && callbacks.clusterWillChange();\r\n        this.html(layout);\r\n        this.options.content_tag == 'ol' && this.content_elem.setAttribute('start', data.rows_above);\r\n        callbacks.clusterChanged && callbacks.clusterChanged();\r\n      } else if(only_bottom_offset_changed) {\r\n        this.content_elem.lastChild.style.height = data.bottom_offset + 'px';\r\n      }\r\n    },\r\n    \r\n    empty: function(element) {\r\n      while (element.lastChild) {\r\n        element.removeChild(element.lastChild);\r\n      }\r\n    },\r\n\r\n    html: function(data) {\r\n      var content_elem = this.content_elem;\r\n\r\n      this.empty(content_elem);\r\n\r\n      for (var i = 0; i < data.length; i++) {\r\n        content_elem.appendChild(data[i]);\r\n      }\r\n    },\r\n\r\n    getChildNodes: function(tag) {\r\n        var child_nodes = tag.children, nodes = [];\r\n        for (var i = 0, ii = child_nodes.length; i < ii; i++) {\r\n            nodes.push(child_nodes[i]);\r\n        }\r\n        return nodes;\r\n    },\r\n    checkChanges: function(type, value, cache) {\r\n      var changed = value != cache[type];\r\n      cache[type] = value;\r\n      return changed;\r\n    }\r\n  };\r\n\r\n  // support functions\r\n  function on(evt, element, fnc) {\r\n    return element.addEventListener ? element.addEventListener(evt, fnc, false) : element.attachEvent(\"on\" + evt, fnc);\r\n  }\r\n  function off(evt, element, fnc) {\r\n    return element.removeEventListener ? element.removeEventListener(evt, fnc, false) : element.detachEvent(\"on\" + evt, fnc);\r\n  }\r\n  function isArray(arr) {\r\n    return Object.prototype.toString.call(arr) === '[object Array]';\r\n  }\r\n  function getStyle(prop, elem) {\r\n    return window.getComputedStyle ? window.getComputedStyle(elem)[prop] : elem.currentStyle[prop];\r\n  }\r\n\r\n  return Clusterize;\r\n}));\r\n",
      "type": "blob"
    },
    "lib/directory_upload": {
      "path": "lib/directory_upload",
      "content": "/**********************************\n Directory Upload Proposal Polyfill\n Author: Ali Alabbas (Microsoft)\n **********************************/\n(function() {\n\t// Do not proceed with the polyfill if Directory interface is already natively available,\n\t// or if webkitdirectory is not supported (i.e. not Chrome, since the polyfill only works in Chrome)\n\tif (window.Directory || !('webkitdirectory' in document.createElement('input') && 'webkitGetAsEntry' in DataTransferItem.prototype)) {\n\t\treturn;\n\t}\n\n\tvar directoryAttr = 'directory',\n\t\tgetFilesMethod = 'getFilesAndDirectories',\n\t\tisSupportedProp = 'isFilesAndDirectoriesSupported',\n\t\tchooseDirMethod = 'chooseDirectory';\n\n\tvar separator = '/';\n\n\tvar Directory = function() {\n\t\tthis.name = '';\n\t\tthis.path = separator;\n\t\tthis._children = {};\n\t\tthis._items = false;\n\t};\n\n\tDirectory.prototype[getFilesMethod] = function() {\n\t\tvar that = this;\n\n\t\t// from drag and drop and file input drag and drop (webkitEntries)\n\t\tif (this._items) {\n\t\t\tvar getItem = function(entry) {\n\t\t\t\tif (entry.isDirectory) {\n\t\t\t\t\tvar dir = new Directory();\n\t\t\t\t\tdir.name = entry.name;\n\t\t\t\t\tdir.path = entry.fullPath;\n\t\t\t\t\tdir._items = entry;\n\n\t\t\t\t\treturn dir;\n\t\t\t\t} else {\n\t\t\t\t\treturn new Promise(function(resolve, reject) {\n\t\t\t\t\t\tentry.file(function(file) {\n\t\t\t\t\t\t\tresolve(file);\n\t\t\t\t\t\t}, reject);\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tif (this.path === separator) {\n\t\t\t\tvar promises = [];\n\n\t\t\t\tfor (var i = 0; i < this._items.length; i++) {\n\t\t\t\t\tvar entry;\n\n\t\t\t\t\t// from file input drag and drop (webkitEntries)\n\t\t\t\t\tif (this._items[i].isDirectory || this._items[i].isFile) {\n\t\t\t\t\t\tentry = this._items[i];\n\t\t\t\t\t} else {\n\t\t\t\t\t\tentry = this._items[i].webkitGetAsEntry();\n\t\t\t\t\t}\n\n\t\t\t\t\tpromises.push(getItem(entry));\n\t\t\t\t}\n\n\t\t\t\treturn Promise.all(promises);\n\t\t\t} else {\n\t\t\t\treturn new Promise(function(resolve, reject) {\n\t\t\t\t\tthat._items.createReader().readEntries(function(entries) {\n\t\t\t\t\t\tvar promises = [];\n\n\t\t\t\t\t\tfor (var i = 0; i < entries.length; i++) {\n\t\t\t\t\t\t\tvar entry = entries[i];\n\n\t\t\t\t\t\t\tpromises.push(getItem(entry));\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tresolve(Promise.all(promises));\n\t\t\t\t\t}, reject);\n\t\t\t\t});\n\t\t\t}\n\t\t// from file input manual selection\n\t\t} else {\n\t\t\tvar arr = [];\n\n\t\t\tfor (var child in this._children) {\n\t\t\t\tarr.push(this._children[child]);\n\t\t\t}\n\n\t\t\treturn Promise.resolve(arr);\n\t\t}\n\t};\n\n\t// set blank as default for all inputs\n\tHTMLInputElement.prototype[getFilesMethod] = function() {\n\t\treturn Promise.resolve([]);\n\t};\n\n\t// if OS is Mac, the combined directory and file picker is supported\n\tHTMLInputElement.prototype[isSupportedProp] = navigator.appVersion.indexOf(\"Mac\") !== -1;\n\n\tHTMLInputElement.prototype[directoryAttr] = undefined;\n\tHTMLInputElement.prototype[chooseDirMethod] = undefined;\n\n\t// expose Directory interface to window\n\twindow.Directory = Directory;\n\n\t/********************\n\t **** File Input ****\n\t ********************/\n\tvar convertInputs = function(nodes) {\n\t\tvar recurse = function(dir, path, fullPath, file) {\n\t\t\tvar pathPieces = path.split(separator);\n\t\t\tvar dirName = pathPieces.shift();\n\n\t\t\tif (pathPieces.length > 0) {\n\t\t\t\tvar subDir = new Directory();\n\t\t\t\tsubDir.name = dirName;\n\t\t\t\tsubDir.path = separator + fullPath;\n\n\t\t\t\tif (!dir._children[subDir.name]) {\n\t\t\t\t\tdir._children[subDir.name] = subDir;\n\t\t\t\t}\n\n\t\t\t\trecurse(dir._children[subDir.name], pathPieces.join(separator), fullPath, file);\n\t\t\t} else {\n\t\t\t\tdir._children[file.name] = file;\n\t\t\t}\n\t\t};\n\n\t\tfor (var i = 0; i < nodes.length; i++) {\n\t\t\tvar node = nodes[i];\n\n\t\t\tif (node.tagName === 'INPUT' && node.type === 'file') {\n\t\t\t\t// force multiple selection for default behavior\n\t\t\t\tif (!node.hasAttribute('multiple')) {\n\t\t\t\t\tnode.setAttribute('multiple', '');\n\t\t\t\t}\n\n\t\t\t\tvar shadow = node.createShadowRoot();\n\n\t\t\t\tnode[chooseDirMethod] = function() {\n\t\t\t\t\t// can't do this without an actual click\n\t\t\t\t\tconsole.log('This is unsupported. For security reasons the dialog cannot be triggered unless it is a response to some user triggered event such as a click on some other element.');\n\t\t\t\t};\n\n\t\t\t\tshadow.innerHTML = '<div style=\"border: 1px solid #999; padding: 3px; width: 235px; box-sizing: content-box; font-size: 14px; height: 21px;\">'\n\t\t\t\t\t+ '<div id=\"fileButtons\" style=\"box-sizing: content-box;\">'\n\t\t\t\t\t+ '<button id=\"button1\" style=\"width: 100px; box-sizing: content-box;\">Choose file(s)...</button>'\n\t\t\t\t\t+ '<button id=\"button2\" style=\"width: 100px; box-sizing: content-box; margin-left: 3px;\">Choose folder...</button>'\n\t\t\t\t\t+ '</div>'\n\t\t\t\t\t+ '<div id=\"filesChosen\" style=\"padding: 3px; display: none; box-sizing: content-box;\"><span id=\"filesChosenText\">files selected...</span>'\n\t\t\t\t\t+ '<a id=\"clear\" title=\"Clear selection\" href=\"javascript:;\" style=\"text-decoration: none; float: right; margin: -3px -1px 0 0; padding: 3px; font-weight: bold; font-size: 16px; color:#999; box-sizing: content-box;\">&times;</a>'\n\t\t\t\t\t+ '</div>'\n\t\t\t\t\t+ '</div>'\n\t\t\t\t\t+ '<input id=\"input1\" type=\"file\" multiple style=\"display: none;\">'\n\t\t\t\t\t+ '<input id=\"input2\" type=\"file\" webkitdirectory style=\"display: none;\">'\n\t\t\t\t\t+ '</div>';\n\n\t\t\t\tshadow.querySelector('#button1').onclick = function(e) {\n\t\t\t\t\te.preventDefault();\n\n\t\t\t\t\tshadow.querySelector('#input1').click();\n\t\t\t\t};\n\n\t\t\t\tshadow.querySelector('#button2').onclick = function(e) {\n\t\t\t\t\te.preventDefault();\n\n\t\t\t\t\tshadow.querySelector('#input2').click();\n\t\t\t\t};\n\n\t\t\t\tvar toggleView = function(defaultView, filesLength) {\n\t\t\t\t\tshadow.querySelector('#fileButtons').style.display = defaultView ? 'block' : 'none';\n\t\t\t\t\tshadow.querySelector('#filesChosen').style.display = defaultView ? 'none' : 'block';\n\n\t\t\t\t\tif (!defaultView) {\n\t\t\t\t\t\tshadow.querySelector('#filesChosenText').innerText = filesLength + ' file' + (filesLength > 1 ? 's' : '') + ' selected...';\n\t\t\t\t\t}\n\t\t\t\t};\n\n\t\t\t\tvar draggedAndDropped = false;\n\n\t\t\t\tvar getFiles = function() {\n\t\t\t\t\tvar files = node.files;\n\n\t\t\t\t\tif (draggedAndDropped) {\n\t\t\t\t\t\tfiles = node.webkitEntries;\n\t\t\t\t\t\tdraggedAndDropped = false;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (files.length === 0) {\n\t\t\t\t\t\t\tfiles = node.shadowRoot.querySelector('#input1').files;\n\n\t\t\t\t\t\t\tif (files.length === 0) {\n\t\t\t\t\t\t\t\tfiles = node.shadowRoot.querySelector('#input2').files;\n\n\t\t\t\t\t\t\t\tif (files.length === 0) {\n\t\t\t\t\t\t\t\t\tfiles = node.webkitEntries;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\treturn files;\n\t\t\t\t};\n\n\t\t\t\tvar changeHandler = function(e) {\n\t\t\t\t\tnode.dispatchEvent(new Event('change'));\n\n\t\t\t\t\ttoggleView(false, getFiles().length);\n\t\t\t\t};\n\n\t\t\t\tshadow.querySelector('#input1').onchange = shadow.querySelector('#input2').onchange = changeHandler;\n\n\t\t\t\tvar clear = function (e) {\n\t\t\t\t\ttoggleView(true);\n\n\t\t\t\t\tvar form = document.createElement('form');\n\t\t\t\t\tnode.parentNode.insertBefore(form, node);\n\t\t\t\t\tnode.parentNode.removeChild(node);\n\t\t\t\t\tform.appendChild(node);\n\t\t\t\t\tform.reset();\n\n\t\t\t\t\tform.parentNode.insertBefore(node, form);\n\t\t\t\t\tform.parentNode.removeChild(form);\n\n\t\t\t\t\t// reset does not instantly occur, need to give it some time\n\t\t\t\t\tsetTimeout(function() {\n\t\t\t\t\t\tnode.dispatchEvent(new Event('change'));\n\t\t\t\t\t}, 1);\n\t\t\t\t};\n\n\t\t\t\tshadow.querySelector('#clear').onclick = clear;\n\n\t\t\t\tnode.addEventListener('drop', function(e) {\n\t\t\t\t\tdraggedAndDropped = true;\n\t\t\t\t}, false);\n\n\t\t\t\tnode.addEventListener('change', function() {\n\t\t\t\t\tvar dir = new Directory();\n\n\t\t\t\t\tvar files = getFiles();\n\n\t\t\t\t\tif (files.length > 0) {\n\t\t\t\t\t\ttoggleView(false, files.length);\n\n\t\t\t\t\t\t// from file input drag and drop (webkitEntries)\n\t\t\t\t\t\tif (files[0].isFile || files[0].isDirectory) {\n\t\t\t\t\t\t\tdir._items = files;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tfor (var j = 0; j < files.length; j++) {\n\t\t\t\t\t\t\t\tvar file = files[j];\n\t\t\t\t\t\t\t\tvar path = file.webkitRelativePath;\n\t\t\t\t\t\t\t\tvar fullPath = path.substring(0, path.lastIndexOf(separator));\n\n\t\t\t\t\t\t\t\trecurse(dir, path, fullPath, file);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttoggleView(true, files.length);\n\t\t\t\t\t}\n\n\t\t\t\t\tthis[getFilesMethod] = function() {\n\t\t\t\t\t\treturn dir[getFilesMethod]();\n\t\t\t\t\t};\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t};\n\n\t// polyfill file inputs when the DOM loads\n\tdocument.addEventListener('DOMContentLoaded', function(event) {\n\t\tconvertInputs(document.getElementsByTagName('input'));\n\t});\n\n\t// polyfill file inputs that are created dynamically and inserted into the body\n\tvar observer = new MutationObserver(function(mutations, observer) {\n\t\tfor (var i = 0; i < mutations.length; i++) {\n\t\t\tif (mutations[i].addedNodes.length > 0) {\n\t\t\t\tconvertInputs(mutations[i].addedNodes);\n\t\t\t}\n\t\t}\n\t});\n\n\tobserver.observe(document.body, {childList: true, subtree: true});\n\n\t/***********************\n\t **** Drag and drop ****\n\t ***********************/\n\t// keep a reference to the original method\n\tvar _addEventListener = EventTarget.prototype.addEventListener;\n\n\tDataTransfer.prototype[getFilesMethod] = function() {\n\t\treturn Promise.resolve([]);\n\t};\n\n\tEventTarget.prototype.addEventListener = function(type, listener, useCapture) {\n\t\tif (type === 'drop') {\n\t\t\tvar _listener = listener;\n\n\t\t\tlistener = function(e) {\n\t\t\t\tvar dir = new Directory();\n\t\t\t\tdir._items = e.dataTransfer.items;\n\n\t\t\t\te.dataTransfer[getFilesMethod] = function() {\n\t\t\t\t\treturn dir[getFilesMethod]();\n\t\t\t\t};\n\n\t\t\t\t_listener(e);\n\t\t\t};\n\t\t}\n\n\t\t// call the original method\n\t\treturn _addEventListener.apply(this, arguments);\n\t};\n}());\n",
      "type": "blob"
    },
    "lib/drop": {
      "path": "lib/drop",
      "content": "(function() {\n  module.exports = function(element, handler) {\n    var cancel;\n    cancel = function(e) {\n      e.preventDefault();\n      return false;\n    };\n    element.addEventListener(\"dragover\", cancel);\n    element.addEventListener(\"dragenter\", cancel);\n    return element.addEventListener(\"drop\", function(e) {\n      e.preventDefault();\n      return handler(e);\n    });\n  };\n\n}).call(this);\n",
      "type": "blob"
    },
    "lib/sha": {
      "path": "lib/sha",
      "content": "(function() {\n  var arrayBufferToBase64, demo, shaForBlob, urlSafeBase64;\n\n  urlSafeBase64 = function(base64) {\n    return base64.replace(/\\+/g, \"-\").replace(/\\//g, \"_\").replace(/\\=*$/, '');\n  };\n\n  arrayBufferToBase64 = function(buffer) {\n    var binary, bytes;\n    bytes = new Uint8Array(buffer);\n    binary = \"\";\n    bytes.forEach(function(byte) {\n      return binary += String.fromCharCode(byte);\n    });\n    return btoa(binary);\n  };\n\n  shaForBlob = function(blob) {\n    return new Promise(function(resolve, reject) {\n      var reader;\n      reader = new FileReader;\n      reader.onload = function() {\n        var buffer;\n        buffer = reader.result;\n        return crypto.subtle.digest(\"SHA-256\", buffer).then(resolve)[\"catch\"](reject);\n      };\n      reader.onerror = reject;\n      return reader.readAsArrayBuffer(blob);\n    });\n  };\n\n  demo = function() {\n    return [\"yolo\", \"duder\", \"hello\", \"wat\"].forEach(function(test) {\n      var blob;\n      blob = new Blob([test]);\n      return shaForBlob(blob).then(arrayBufferToBase64).then(urlSafeBase64).then(log);\n    });\n  };\n\n  module.exports = function(blob) {\n    return shaForBlob(blob).then(arrayBufferToBase64).then(urlSafeBase64);\n  };\n\n}).call(this);\n",
      "type": "blob"
    },
    "main": {
      "path": "main",
      "content": "(function() {\n  var Drop, Filesystem, LocalDriver, OS, OSTemplate, S3Driver, awsLogin, db, emptyElement, initFileDrop, log, loginTemplate, logins, os, pinvoke, receivedCredentials, style, _ref;\n\n  require(\"./lib/directory_upload\");\n\n  style = document.createElement(\"style\");\n\n  style.innerHTML = require(\"./style\");\n\n  document.head.appendChild(style);\n\n  _ref = require(\"./util\"), log = _ref.log, emptyElement = _ref.emptyElement, pinvoke = _ref.pinvoke;\n\n  Drop = require(\"./lib/drop\");\n\n  Filesystem = require(\"./fs/filesystem\");\n\n  S3Driver = require(\"./fs/s3-driver\");\n\n  LocalDriver = require(\"./fs/dexie-driver\");\n\n  OS = require(\"./os\");\n\n  os = OS();\n\n  global.os = os;\n\n  OSTemplate = require(\"./templates/os\");\n\n  document.body.appendChild(OSTemplate(os));\n\n  initFileDrop = function(element, processItem) {\n    return Drop(element, function(e) {\n      var handleFiles;\n      handleFiles = function(items, path) {\n        if (path == null) {\n          path = \"/\";\n        }\n        return items.forEach(function(item) {\n          if (item.getFilesAndDirectories) {\n            return item.getFilesAndDirectories().then(function(items) {\n              return handleFiles(items, item.path);\n            });\n          } else {\n            return processItem(item, path);\n          }\n        });\n      };\n      return e.dataTransfer.getFilesAndDirectories().then(function(items) {\n        return handleFiles(items);\n      });\n    });\n  };\n\n  initFileDrop(document, function(file, path) {\n    var key;\n    key = (\"\" + path + \"/\" + file.name).replace(/\\/+/, \"/\");\n    return os.put(key, file);\n  });\n\n  AWS.config.update({\n    region: 'us-east-1'\n  });\n\n  if (false) {\n    try {\n      logins = JSON.parse(localStorage.WHIMSY_FS_AWS_LOGIN);\n    } catch (_error) {}\n    AWS.config.credentials = new AWS.CognitoIdentityCredentials({\n      IdentityPoolId: 'us-east-1:4fe22da5-bb5e-4a78-a260-74ae0a140bf9',\n      Logins: logins\n    });\n    if (logins) {\n      pinvoke(AWS.config.credentials, \"get\").then(receivedCredentials)[\"catch\"](function(e) {\n        return console.error(e);\n      });\n    }\n    awsLogin = require(\"./amazon_login\").awsLogin;\n    loginTemplate = require(\"./templates/login\")({\n      click: function() {\n        var options;\n        options = {\n          scope: 'profile'\n        };\n        return awsLogin(options).then(function(logins) {\n          localStorage.WHIMSY_FS_AWS_LOGIN = JSON.stringify(logins);\n          return receivedCredentials();\n        });\n      }\n    });\n    document.body.appendChild(loginTemplate);\n    receivedCredentials = function() {\n      var bucket, id;\n      console.log(AWS.config.credentials);\n      id = AWS.config.credentials.identityId;\n      document.body.removeChild(loginTemplate);\n      bucket = new AWS.S3({\n        params: {\n          Bucket: \"whimsy-fs\"\n        }\n      });\n      return os.attachFS(Filesystem(S3Driver(id, bucket)));\n    };\n  } else {\n    db = require(\"./db\")('fs');\n    os.attachFS(Filesystem(LocalDriver(db)));\n    global.db = db;\n  }\n\n}).call(this);\n",
      "type": "blob"
    },
    "os": {
      "path": "os",
      "content": "(function() {\n  var EditorTemplate, FolderPresenter, FolderTemplate, LauncherElement, Observable, PixelEditor, TextEditor, readAsText;\n\n  Observable = require(\"observable\");\n\n  TextEditor = require(\"./text_editor\");\n\n  PixelEditor = require(\"./pixel_editor\");\n\n  EditorTemplate = require(\"./templates/editor\");\n\n  FolderTemplate = require(\"./templates/folder\");\n\n  FolderPresenter = require(\"./presenters/folder\");\n\n  LauncherElement = require(\"./templates/launcher\");\n\n  readAsText = require(\"../util\").readAsText;\n\n  module.exports = function() {\n    var appHandlers, self;\n    appHandlers = {\n      \"^text\": function(file, path) {\n        var editor;\n        editor = TextEditor(self);\n        readAsText(file).then(function(contents) {\n          editor.contents(contents);\n          editor.contentType(file.type);\n          return editor.path(path);\n        });\n        return EditorTemplate(editor);\n      },\n      \"^image\": function(file, path) {\n        return PixelEditor(self, file, path);\n      }\n    };\n    self = {\n      editorElement: Observable(),\n      fileTreeElement: Observable(),\n      attachFS: function(fs) {\n        self.fileTreeElement(FolderTemplate(FolderPresenter({\n          path: \"/\"\n        }, self)));\n        return self.fs = function() {\n          return fs;\n        };\n      },\n      open: function(path) {\n        return self.fs().read(path).then(function(_arg) {\n          var blob, handled, type;\n          blob = _arg.blob;\n          type = blob.type;\n          console.log(\"Open: \", path, blob.type);\n          handled = false;\n          return Object.keys(appHandlers).forEach(function(matcher) {\n            var appElement, handler, regex;\n            if (handled) {\n              return;\n            }\n            handler = appHandlers[matcher];\n            regex = new RegExp(matcher);\n            if (regex.test(type)) {\n              handled = true;\n              appElement = handler(blob, path);\n              return self.editorElement(appElement);\n            }\n          });\n        });\n      },\n      list: function(path) {\n        return self.fs().ls(path);\n      },\n      put: function(path, file) {\n        return self.fs().write(path, file);\n      },\n      \"delete\": function(path) {\n        return self.fs()[\"delete\"](path);\n      },\n      apps: [\n        {\n          name: \"Pixel\",\n          launch: function() {\n            return self.editorElement(PixelEditor(self));\n          }\n        }\n      ]\n    };\n    self.launcherElement = LauncherElement(self);\n    return self;\n  };\n\n}).call(this);\n",
      "type": "blob"
    },
    "pixel_editor": {
      "path": "pixel_editor",
      "content": "(function() {\n  var Postmaster;\n\n  Postmaster = require(\"postmaster\");\n\n  module.exports = function(os, file, path) {\n    var frame, postmaster;\n    frame = document.createElement(\"iframe\");\n    frame.sandbox = \"allow-scripts allow-modals\";\n    postmaster = Postmaster({\n      remoteTarget: function() {\n        return frame.contentWindow;\n      },\n      childLoaded: function() {\n        if (file) {\n          postmaster.invokeRemote(\"loadFile\", file);\n        }\n        frame.contentWindow.focus();\n      },\n      save: function(_arg) {\n        var image, newPath;\n        image = _arg.image;\n        newPath = prompt(\"Save As\", path);\n        if (newPath) {\n          path = newPath;\n          os.put(path, image);\n        }\n      }\n    });\n    frame.src = \"https://danielx.net/pixel-editor/embedded/\";\n    return frame;\n  };\n\n}).call(this);\n",
      "type": "blob"
    },
    "pixie": {
      "path": "pixie",
      "content": "module.exports = {\"entryPoint\":\"experiments/spreadsheet\",\"remoteDependencies\":[\"https://sdk.amazonaws.com/js/aws-sdk-2.2.42.min.js\",\"https://api-cdn.amazon.com/sdk/login1.js\",\"https://unpkg.com/dexie@1.4.1/dist/dexie.js\"],\"dependencies\":{\"observable\":\"distri/observable:master\",\"postmaster\":\"distri/postmaster:v0.5.0\"},\"width\":1024,\"height\":720};",
      "type": "blob"
    },
    "presenters/file": {
      "path": "presenters/file",
      "content": "(function() {\n  var FilePresenter;\n\n  module.exports = FilePresenter = function(data, os, fp) {\n    var name, path;\n    name = data.name, path = data.path;\n    return {\n      name: name,\n      path: path,\n      click: function(e) {\n        if (e.filetreeHandled) {\n          return;\n        }\n        e.filetreeHandled = true;\n        os.open(path);\n      },\n      remove: function(e) {\n        if (e.filetreeHandled) {\n          return;\n        }\n        e.filetreeHandled = true;\n        os[\"delete\"](path);\n        fp.files.remove(name);\n      }\n    };\n  };\n\n}).call(this);\n",
      "type": "blob"
    },
    "presenters/folder": {
      "path": "presenters/folder",
      "content": "(function() {\n  var FilePresenter, FileTemplate, FolderPresenter, FolderTemplate, Observable, endsWith;\n\n  Observable = require(\"observable\");\n\n  FolderTemplate = require(\"../templates/folder\");\n\n  FileTemplate = require(\"../templates/file\");\n\n  FilePresenter = require(\"./file\");\n\n  endsWith = require(\"../util\").endsWith;\n\n  module.exports = FolderPresenter = function(data, os) {\n    var files, folders, name, path, self;\n    path = data.path, folders = data.folders, files = data.files, name = data.name;\n    if (name == null) {\n      name = path;\n    }\n    if (folders == null) {\n      folders = [];\n    }\n    if (files == null) {\n      files = [];\n    }\n    return self = {\n      Folder: function(data) {\n        return FolderTemplate(FolderPresenter(data, os));\n      },\n      File: function(data) {\n        return FileTemplate(FilePresenter(data, os, self));\n      },\n      \"class\": function() {\n        if (self.expanded()) {\n          return \"expanded\";\n        }\n      },\n      click: function(e) {\n        if (e.filetreeHandled) {\n          return;\n        }\n        e.filetreeHandled = true;\n        self.expanded.toggle();\n        if (self.expanded()) {\n          self.refresh();\n        }\n        return false;\n      },\n      expanded: Observable(false),\n      folders: Observable(folders),\n      files: Observable(files),\n      name: name,\n      path: path,\n      refresh: function() {\n        console.log(\"List:\", path);\n        return os.list(path).then(function(results) {\n          files = results.filter(function(result) {\n            return !endsWith(result, \"/\");\n          });\n          folders = results.filter(function(result) {\n            return endsWith(result, \"/\");\n          });\n          self.files(files);\n          return self.folders(folders);\n        });\n      }\n    };\n  };\n\n}).call(this);\n",
      "type": "blob"
    },
    "style": {
      "path": "style",
      "content": "module.exports = \"* {\\n  box-sizing: border-box;\\n}\\nbody {\\n  font-family: \\\"HelveticaNeue-Light\\\", \\\"Helvetica Neue Light\\\", \\\"Helvetica Neue\\\", Helvetica, Arial, \\\"Lucida Grande\\\", sans-serif;\\n  font-weight: 300;\\n  margin: 0;\\n}\\nbody,\\nhtml {\\n  height: 100%;\\n}\\n#LoginWithAmazon {\\n  position: absolute;\\n  top: 0;\\n}\\nfile {\\n  padding-left: 1em;\\n  position: relative;\\n}\\nfile .path {\\n  overflow: hidden;\\n  text-overflow: ellipsis;\\n  white-space: nowrap;\\n}\\nfile > .delete {\\n  display: none;\\n  position: absolute;\\n  right: 1em;\\n  top: 0;\\n}\\nfile:hover {\\n  background-color: #ffa;\\n}\\nfile:hover > .delete {\\n  display: inline-block;\\n}\\nfolder {\\n  display: block;\\n  padding-left: 1em;\\n}\\nfolder::before {\\n  content: \\\"[+]\\\";\\n}\\nfolder > file,\\nfolder > folder {\\n  display: none;\\n}\\nfolder.expanded::before {\\n  content: \\\"[-]\\\";\\n}\\nfolder.expanded > file,\\nfolder.expanded > folder {\\n  display: block;\\n}\\n.os {\\n  display: flex;\\n  height: 100%;\\n}\\n.os > folder {\\n  flex-grow: 0;\\n  padding-left: 0;\\n  width: 250px;\\n}\\n.os > iframe {\\n  flex-grow: 1;\\n  height: 100%;\\n}\\neditor {\\n  display: block;\\n  margin-top: 1em;\\n}\\ntextarea {\\n  display: block;\\n  width: 100%;\\n}\\nlauncher {\\n  display: block;\\n  position: absolute;\\n  bottom: 0;\\n}\\ncontainer {\\n  display: block;\\n  height: 100%;\\n  overflow: auto;\\n}\\ntable {\\n  border-collapse: collapse;\\n  width: 100%;\\n}\\nth {\\n  text-align: left;\\n}\\nthead {\\n  border-bottom: 1px solid #000;\\n}\\ntd > input {\\n  border: none;\\n  background-color: transparent;\\n  width: 100%;\\n  height: 100%;\\n  padding: 0;\\n}\\ntr:nth-child(even) {\\n  background-color: #eee;\\n}\\nli {\\n  list-style-type: none;\\n}\\nli > label {\\n  display: block;\\n}\\nul.menu-bar {\\n  background-color: #d3d3d3;\\n  margin: 0;\\n  padding: 0;\\n}\\nul.menu-bar > li {\\n  display: inline-block;\\n}\\nli.menu > ul.options {\\n  display: none;\\n}\\nli.menu.active > ul.options {\\n  background-color: #d3d3d3;\\n  display: block;\\n  padding: 0;\\n  position: absolute;\\n}\\nli.menu.active > ul.options > li:hover {\\n  background-color: #00f;\\n  color: #fff;\\n}\\n\";",
      "type": "blob"
    },
    "templates/editor": {
      "path": "templates/editor",
      "content": "module.exports = function(data) {\n  \"use strict\";\n  return (function() {\n    var __root;\n    __root = require(\"/lib/hamlet-runtime\")(this);\n    __root.buffer(__root.element(\"editor\", this, {}, function(__root) {\n      __root.buffer(__root.element(\"label\", this, {}, function(__root) {\n        __root.buffer(__root.element(\"span\", this, {}, function(__root) {\n          __root.buffer(\"Path\\n\");\n        }));\n        __root.buffer(__root.element(\"input\", this, {\n          \"value\": this.path\n        }, function(__root) {}));\n      }));\n      __root.buffer(__root.element(\"label\", this, {}, function(__root) {\n        __root.buffer(__root.element(\"span\", this, {}, function(__root) {\n          __root.buffer(\"ContentType\\n\");\n        }));\n        __root.buffer(__root.element(\"input\", this, {\n          \"value\": this.contentType\n        }, function(__root) {}));\n      }));\n      __root.buffer(__root.element(\"textarea\", this, {\n        \"value\": this.contents\n      }, function(__root) {}));\n      __root.buffer(__root.element(\"button\", this, {\n        \"click\": this.save\n      }, function(__root) {\n        __root.buffer(\"Save\\n\");\n      }));\n    }));\n    return __root.root;\n  }).call(data);\n};\n",
      "type": "blob"
    },
    "templates/file": {
      "path": "templates/file",
      "content": "module.exports = function(data) {\n  \"use strict\";\n  return (function() {\n    var __root;\n    __root = require(\"/lib/hamlet-runtime\")(this);\n    __root.buffer(__root.element(\"file\", this, {\n      \"click\": this.click,\n      \"title\": this.name\n    }, function(__root) {\n      __root.buffer(__root.element(\"div\", this, {\n        \"class\": [\"path\"]\n      }, function(__root) {\n        __root.buffer(this.name);\n      }));\n      __root.buffer(__root.element(\"div\", this, {\n        \"class\": [\"delete\"],\n        \"click\": this.remove\n      }, function(__root) {\n        __root.buffer(\"X\\n\");\n      }));\n    }));\n    return __root.root;\n  }).call(data);\n};\n",
      "type": "blob"
    },
    "templates/folder": {
      "path": "templates/folder",
      "content": "module.exports = function(data) {\n  \"use strict\";\n  return (function() {\n    var File, Folder, __root;\n    __root = require(\"/lib/hamlet-runtime\")(this);\n    Folder = this.Folder;\n    File = this.File;\n    __root.buffer(__root.element(\"folder\", this, {\n      \"class\": [this[\"class\"]],\n      \"click\": this.click\n    }, function(__root) {\n      var path;\n      path = this.path;\n      __root.buffer(this.name);\n      this.folders.forEach(function(folder) {\n        return __root.buffer(Folder({\n          name: folder,\n          path: path + folder\n        }));\n      });\n      this.files.forEach(function(file) {\n        return __root.buffer(File({\n          name: file,\n          path: path + file\n        }));\n      });\n    }));\n    return __root.root;\n  }).call(data);\n};\n",
      "type": "blob"
    },
    "templates/input": {
      "path": "templates/input",
      "content": "module.exports = function(data) {\n  \"use strict\";\n  return (function() {\n    var __root;\n    __root = require(\"/lib/hamlet-runtime\")(this);\n    __root.buffer(__root.element(\"input\", this, {\n      \"value\": this.value,\n      \"type\": this.type\n    }, function(__root) {}));\n    return __root.root;\n  }).call(data);\n};\n",
      "type": "blob"
    },
    "templates/launcher": {
      "path": "templates/launcher",
      "content": "module.exports = function(data) {\n  \"use strict\";\n  return (function() {\n    var __root;\n    __root = require(\"/lib/hamlet-runtime\")(this);\n    __root.buffer(__root.element(\"launcher\", this, {}, function(__root) {\n      this.apps.forEach(function(app) {\n        return __root.buffer(__root.element(\"app\", this, {\n          \"click\": app.launch\n        }, function(__root) {\n          __root.buffer(app.name);\n        }));\n      });\n    }));\n    return __root.root;\n  }).call(data);\n};\n",
      "type": "blob"
    },
    "templates/login": {
      "path": "templates/login",
      "content": "module.exports = function(data) {\n  \"use strict\";\n  return (function() {\n    var __root;\n    __root = require(\"/lib/hamlet-runtime\")(this);\n    __root.buffer(__root.element(\"a\", this, {\n      id: [\"LoginWithAmazon\"],\n      \"click\": this.click\n    }, function(__root) {\n      __root.buffer(__root.element(\"img\", this, {\n        \"border\": \"0\",\n        \"alt\": \"Login with Amazon\",\n        \"src\": \"https://images-na.ssl-images-amazon.com/images/G/01/lwa/btnLWA_gold_156x32.png\",\n        \"width\": \"156\",\n        \"height\": \"32\"\n      }, function(__root) {}));\n    }));\n    return __root.root;\n  }).call(data);\n};\n",
      "type": "blob"
    },
    "templates/os": {
      "path": "templates/os",
      "content": "module.exports = function(data) {\n  \"use strict\";\n  return (function() {\n    var __root;\n    __root = require(\"/lib/hamlet-runtime\")(this);\n    __root.buffer(__root.element(\"div\", this, {\n      \"class\": [\"os\"]\n    }, function(__root) {\n      __root.buffer(this.fileTreeElement);\n      __root.buffer(this.editorElement);\n      __root.buffer(this.launcherElement);\n    }));\n    return __root.root;\n  }).call(data);\n};\n",
      "type": "blob"
    },
    "templates/row": {
      "path": "templates/row",
      "content": "module.exports = function(data) {\n  \"use strict\";\n  return (function() {\n    var __root;\n    __root = require(\"/lib/hamlet-runtime\")(this);\n    __root.buffer(__root.element(\"tr\", this, {}, function(__root) {\n      this.cells.forEach(function(cell) {\n        return __root.buffer(__root.element(\"td\", this, {}, function(__root) {\n          __root.buffer(cell);\n        }));\n      });\n    }));\n    return __root.root;\n  }).call(data);\n};\n",
      "type": "blob"
    },
    "templates/table": {
      "path": "templates/table",
      "content": "module.exports = function(data) {\n  \"use strict\";\n  return (function() {\n    var __root;\n    __root = require(\"/lib/hamlet-runtime\")(this);\n    __root.buffer(__root.element(\"container\", this, {}, function(__root) {\n      __root.buffer(__root.element(\"table\", this, {}, function(__root) {\n        __root.buffer(__root.element(\"thead\", this, {}, function(__root) {\n          __root.buffer(__root.element(\"tr\", this, {}, function(__root) {\n            this.headers.forEach(function(header) {\n              return __root.buffer(__root.element(\"th\", this, {}, function(__root) {\n                __root.buffer(header);\n              }));\n            });\n          }));\n        }));\n        __root.buffer(__root.element(\"tbody\", this, {}, function(__root) {}));\n      }));\n    }));\n    return __root.root;\n  }).call(data);\n};\n",
      "type": "blob"
    },
    "test/dexie-fs": {
      "path": "test/dexie-fs",
      "content": "(function() {\n  var DB, DexieDriver, Filesystem, readAsText;\n\n  DexieDriver = require(\"../fs/dexie-driver\");\n\n  Filesystem = require(\"../fs/filesystem\");\n\n  DB = require(\"../db\");\n\n  readAsText = require(\"../util\").readAsText;\n\n  describe(\"Dexie FS\", function() {\n    var db, fs;\n    db = DB('fs');\n    fs = Filesystem(DexieDriver(db));\n    it(\"should write, read, and delete files\", function(done) {\n      var blob;\n      blob = new Blob([\"yolo\"]);\n      return fs.write(\"test\", blob).then(function() {\n        return fs.read(\"test\");\n      }).then(function(_arg) {\n        var blob;\n        blob = _arg.blob;\n        return readAsText(blob);\n      }).then(function(content) {\n        return assert.equal(content, \"yolo\");\n      }).then(function() {\n        return done();\n      })[\"catch\"](done);\n    });\n    return it(\"should list files in the directory\", function(done) {\n      var blob;\n      blob = new Blob([\"yolo\"]);\n      return Promise.all([\"test2\", \"yolo/yo\", \"yolo/yo2\"].map(function(path) {\n        return fs.write(path, blob);\n      })).then(function() {\n        return fs.ls(\"yolo\");\n      }).then(function(results) {\n        assert.equal(results.length, 2);\n        return done();\n      })[\"catch\"](done);\n    });\n  });\n\n}).call(this);\n",
      "type": "blob"
    },
    "test/ram-fs": {
      "path": "test/ram-fs",
      "content": "(function() {\n  var Filesystem, RAMDriver, readAsText;\n\n  RAMDriver = require(\"../fs/ram-driver\");\n\n  Filesystem = require(\"../fs/filesystem\");\n\n  readAsText = require(\"../util\").readAsText;\n\n  describe(\"RAM FS\", function() {\n    var fs;\n    fs = Filesystem(RAMDriver());\n    it(\"should write, read, and delete files\", function(done) {\n      var blob;\n      blob = new Blob([\"yolo\"]);\n      return fs.write(\"test\", blob).then(function() {\n        return fs.read(\"test\");\n      }).then(function(_arg) {\n        var blob;\n        blob = _arg.blob;\n        return readAsText(blob);\n      }).then(function(content) {\n        return assert.equal(content, \"yolo\");\n      }).then(function() {\n        return done();\n      })[\"catch\"](done);\n    });\n    return it(\"should list files in the directory\", function(done) {\n      var blob;\n      blob = new Blob([\"yolo\"]);\n      return Promise.all([\"test2\", \"yolo/yo\", \"yolo/yo2/wat\", \"yolo/yo2/cool\"].map(function(path) {\n        return fs.write(path, blob);\n      })).then(function() {\n        return fs.ls(\"yolo\");\n      }).then(function(results) {\n        assert.equal(results.length, 2);\n        assert.equal(results[0], \"yo\");\n        assert.equal(results[1], \"yo2/\");\n        return done();\n      })[\"catch\"](done);\n    });\n  });\n\n}).call(this);\n",
      "type": "blob"
    },
    "test/s3-fs": {
      "path": "test/s3-fs",
      "content": "(function() {\n  var Filesystem, S3Driver, awsLogin, readAsText, setup;\n\n  S3Driver = require(\"../fs/s3-driver\");\n\n  Filesystem = require(\"../fs/filesystem\");\n\n  readAsText = require(\"../util\").readAsText;\n\n  awsLogin = require(\"../amazon_login\").awsLogin;\n\n  AWS.config.update({\n    region: 'us-east-1'\n  });\n\n  AWS.config.credentials = new AWS.CognitoIdentityCredentials({\n    IdentityPoolId: 'us-east-1:4fe22da5-bb5e-4a78-a260-74ae0a140bf9'\n  });\n\n  setup = function() {\n    var options;\n    options = {\n      scope: 'profile'\n    };\n    return awsLogin(options).then(function(logins) {\n      var bucket, fs, id;\n      id = AWS.config.credentials.identityId;\n      bucket = new AWS.S3({\n        params: {\n          Bucket: \"whimsy-fs\"\n        }\n      });\n      fs = Filesystem(S3Driver(id, bucket));\n      fs.cd(\"test\");\n      return fs;\n    });\n  };\n\n  describe(\"S3 FS\", function() {});\n\n  (function() {\n    it(\"should write, read, and delete files\", function(done) {\n      this.timeout(10000);\n      return setup().then(function(fs) {\n        var blob;\n        blob = new Blob([\"yolo\"]);\n        return fs.write(\"test\", blob).then(function() {\n          return fs.read(\"test\");\n        }).then(function(_arg) {\n          var blob;\n          blob = _arg.blob;\n          return readAsText(blob);\n        }).then(function(content) {\n          return assert.equal(content, \"yolo\");\n        }).then(function() {\n          return done();\n        });\n      })[\"catch\"](done);\n    });\n    return it(\"should list files in the directory\", function(done) {\n      this.timeout(5000);\n      return setup().then(function(fs) {\n        var blob;\n        blob = new Blob([\"yolo\"]);\n        return Promise.all([\"test2\", \"yolo/yo\", \"yolo/yo2\"].map(function(path) {\n          return fs.write(path, blob);\n        })).then(function() {\n          return fs.ls(\"yolo\");\n        }).then(function(results) {\n          console.log(\"RES\", results);\n          assert.equal(results.length, 2);\n          return done();\n        });\n      })[\"catch\"](done);\n    });\n  });\n\n}).call(this);\n",
      "type": "blob"
    },
    "text_editor": {
      "path": "text_editor",
      "content": "(function() {\n  var Observable;\n\n  Observable = require(\"observable\");\n\n  module.exports = function(os) {\n    var self;\n    return self = {\n      contents: Observable(\"Hello\"),\n      contentType: Observable(\"text/plain\"),\n      path: Observable(\"test.txt\"),\n      save: function() {\n        var blob;\n        blob = new Blob([self.contents()], {\n          type: self.contentType()\n        });\n        return os.put(self.path(), blob);\n      }\n    };\n  };\n\n}).call(this);\n",
      "type": "blob"
    },
    "util": {
      "path": "util",
      "content": "(function() {\n  var __slice = [].slice;\n\n  module.exports = {\n    log: function() {\n      var obj, rest;\n      obj = arguments[0], rest = 2 <= arguments.length ? __slice.call(arguments, 1) : [];\n      console.log.apply(console, [obj].concat(__slice.call(rest)));\n      return obj;\n    },\n    pinvoke: function() {\n      var method, object, params;\n      object = arguments[0], method = arguments[1], params = 3 <= arguments.length ? __slice.call(arguments, 2) : [];\n      return new Promise(function(resolve, reject) {\n        return object[method].apply(object, __slice.call(params).concat([function(err, result) {\n          if (err) {\n            reject(err);\n            return;\n          }\n          return resolve(result);\n        }]));\n      });\n    },\n    startsWith: function(str, prefix) {\n      return str.lastIndexOf(prefix, 0) === 0;\n    },\n    endsWith: function(str, suffix) {\n      return str.indexOf(suffix, str.length - suffix.length) !== -1;\n    },\n    emptyElement: function(element) {\n      var _results;\n      _results = [];\n      while (element.lastChild) {\n        _results.push(element.lastChild.remove());\n      }\n      return _results;\n    },\n    readAsText: function(file) {\n      return new Promise(function(resolve, reject) {\n        var reader;\n        reader = new FileReader;\n        reader.onload = function() {\n          return resolve(reader.result);\n        };\n        reader.onerror = reject;\n        return reader.readAsText(file);\n      });\n    },\n    uniq: function(array) {\n      return Array.from(new Set(array));\n    }\n  };\n\n}).call(this);\n",
      "type": "blob"
    },
    "templates/menu": {
      "path": "templates/menu",
      "content": "module.exports = function(data) {\n  \"use strict\";\n  return (function() {\n    var __root;\n    __root = require(\"/lib/hamlet-runtime\")(this);\n    __root.buffer(__root.element(\"ul\", this, {\n      \"class\": [\"menu-bar\"]\n    }, function(__root) {\n      __root.buffer(this.items);\n    }));\n    return __root.root;\n  }).call(data);\n};\n",
      "type": "blob"
    },
    "test/menu": {
      "path": "test/menu",
      "content": "(function() {\n  var parse;\n\n  parse = require(\"../lib/indent-parse\");\n\n  describe(\"Menu Parser\", function() {\n    it(\"should parse menus into lists\", function() {\n      var data, results;\n      data = \"File\";\n      results = parse(data);\n      return assert.deepEqual([\"File\"], results);\n    });\n    it(\"should parse empty\", function() {\n      var data;\n      data = \"\";\n      return assert.deepEqual([], parse(data));\n    });\n    it(\"should deal with nesting ok\", function() {\n      var data, results;\n      data = \"File\\n  Open\\n  Save\\nEdit\\n  Copy\\n  Paste\\nHelp\";\n      results = parse(data);\n      return assert.deepEqual([[\"File\", [\"Open\", \"Save\"]], [\"Edit\", [\"Copy\", \"Paste\"]], \"Help\"], results);\n    });\n    it(\"should parse big ol' menus\", function() {\n      var results;\n      results = parse(\"File\\n  New\\n  Open\\n  Save\\n  Save As\\nEdit\\n  Undo\\n  Redo\\n  -\\n  Cut\\n  Copy\\n  Paste\\n  Delete\\n  -\\n  Find\\n  Find Next\\n  Replace\\n  Go To\\n  -\\n  Select All\\n  Time/Date\\nFormat\\n  Word Wrap\\n  Font...\\nView\\n  Status Bar\\nHelp\\n  View Help\\n  -\\n  About Notepad\");\n      return assert.deepEqual([[\"File\", [\"New\", \"Open\", \"Save\", \"Save As\"]], [\"Edit\", [\"Undo\", \"Redo\", \"-\", \"Cut\", \"Copy\", \"Paste\", \"Delete\", \"-\", \"Find\", \"Find Next\", \"Replace\", \"Go To\", \"-\", \"Select All\", \"Time/Date\"]], [\"Format\", [\"Word Wrap\", \"Font...\"]], [\"View\", [\"Status Bar\"]], [\"Help\", [\"View Help\", \"-\", \"About Notepad\"]]], results);\n    });\n    return it(\"should parse hella nested menus\", function() {\n      var results;\n      results = parse(\"File\\n  Special\\n    Nested\\n      Super\\n        Awesome\");\n      return assert.deepEqual([[\"File\", [[\"Special\", [[\"Nested\", [[\"Super\", [\"Awesome\"]]]]]]]]], results);\n    });\n  });\n\n}).call(this);\n",
      "type": "blob"
    },
    "lib/indent-parse": {
      "path": "lib/indent-parse",
      "content": "(function() {\n  var parse, top;\n\n  top = function(stack) {\n    return stack[stack.length - 1];\n  };\n\n  parse = function(source) {\n    var depth, indentation, stack;\n    stack = [[]];\n    indentation = /^(  )*/;\n    depth = 0;\n    source.split(\"\\n\").forEach(function(line, lineNumber) {\n      var current, items, match, newDepth, prev, text;\n      match = line.match(indentation)[0];\n      text = line.replace(match, \"\");\n      newDepth = match.length / 2;\n      if (!text.trim().length) {\n        return;\n      }\n      current = text;\n      if (newDepth > depth) {\n        if (newDepth !== depth + 1) {\n          throw new Error(\"Unexpected indentation on line \" + lineNumber);\n        }\n        items = [];\n        prev = top(stack);\n        prev.push([prev.pop(), items]);\n        stack.push(items);\n      } else if (newDepth < depth) {\n        stack = stack.slice(0, newDepth + 1);\n      }\n      depth = newDepth;\n      return top(stack).push(current);\n    });\n    return stack[0];\n  };\n\n  module.exports = parse;\n\n}).call(this);\n",
      "type": "blob"
    },
    "samples/notepad-menu": {
      "path": "samples/notepad-menu",
      "content": "(function() {\n  var parse;\n\n  parse = require(\"../lib/indent-parse\");\n\n  module.exports = parse(\"File\\n  New\\n  Open\\n  Save\\n  Save As\\nEdit\\n  Undo\\n  Redo\\n  -\\n  Cut\\n  Copy\\n  Paste\\n  Delete\\n  -\\n  Find\\n  Find Next\\n  Replace\\n  Go To\\n  -\\n  Select All\\n  Time/Date\\nFormat\\n  Word Wrap\\n  Font...\\nView\\n  Status Bar\\nHelp\\n  View Help\\n  -\\n  About Notepad\");\n\n}).call(this);\n",
      "type": "blob"
    },
    "views/menu": {
      "path": "views/menu",
      "content": "(function() {\n  var MenuItemTemplate, MenuItemView, MenuSeparator, MenuTemplate, Observable, Presenter, SubmenuTemplate, isDescendant;\n\n  Observable = require(\"observable\");\n\n  MenuTemplate = require(\"../templates/menu\");\n\n  MenuItemTemplate = require(\"../templates/menu-item\");\n\n  MenuSeparator = require(\"../templates/menu-separator\");\n\n  SubmenuTemplate = require(\"../templates/submenu\");\n\n  isDescendant = function(element, ancestor) {\n    var parent;\n    while ((parent = element.parentElement)) {\n      if (element === ancestor) {\n        return true;\n      }\n      element = parent;\n    }\n  };\n\n  Presenter = function(data) {};\n\n  MenuItemView = function(item) {\n    var active, items, label;\n    active = Observable(false);\n    if (Array.isArray(item)) {\n      label = item[0], items = item[1];\n      return SubmenuTemplate({\n        \"class\": \"menu\",\n        activeClass: function() {\n          if (active()) {\n            return \"active\";\n          }\n        },\n        click: function() {\n          return active(true);\n        },\n        mouseover: function(e) {\n          return console.log(\"over\", e);\n        },\n        mouseout: function(e) {\n          return console.log(\"out\", e);\n        },\n        label: label,\n        content: items.map(MenuItemView)\n      });\n    } else {\n      if (item === \"-\") {\n        return MenuSeparator();\n      } else {\n        return MenuItemTemplate({\n          click: function() {\n            return console.log(item);\n          },\n          label: item\n        });\n      }\n    }\n  };\n\n  module.exports = function(data) {\n    var element, menuItems, presenter;\n    presenter = Presenter(data);\n    menuItems = data.map(MenuItemView);\n    element = MenuTemplate({\n      items: menuItems\n    });\n    return {\n      element: element\n    };\n  };\n\n\n  /*\n  li.menu.active\n    span File\n    ul.options\n      li Open\n      li Save\n   */\n\n}).call(this);\n",
      "type": "blob"
    },
    "templates/menu-item": {
      "path": "templates/menu-item",
      "content": "module.exports = function(data) {\n  \"use strict\";\n  return (function() {\n    var __root;\n    __root = require(\"/lib/hamlet-runtime\")(this);\n    __root.buffer(__root.element(\"li\", this, {\n      \"class\": [this[\"class\"]],\n      \"click\": this.click\n    }, function(__root) {\n      __root.buffer(__root.element(\"label\", this, {}, function(__root) {\n        __root.buffer(this.label);\n      }));\n    }));\n    return __root.root;\n  }).call(data);\n};\n",
      "type": "blob"
    },
    "templates/submenu": {
      "path": "templates/submenu",
      "content": "module.exports = function(data) {\n  \"use strict\";\n  return (function() {\n    var __root;\n    __root = require(\"/lib/hamlet-runtime\")(this);\n    __root.buffer(__root.element(\"li\", this, {\n      \"class\": [this[\"class\"], this.activeClass],\n      \"click\": this.click,\n      \"mouseover\": this.mouseover,\n      \"mouseout\": this.mouseout\n    }, function(__root) {\n      __root.buffer(__root.element(\"label\", this, {}, function(__root) {\n        __root.buffer(this.label);\n      }));\n      __root.buffer(__root.element(\"ul\", this, {\n        \"class\": [\"options\"]\n      }, function(__root) {\n        __root.buffer(this.content);\n      }));\n    }));\n    return __root.root;\n  }).call(data);\n};\n",
      "type": "blob"
    },
    "templates/menu-separator": {
      "path": "templates/menu-separator",
      "content": "module.exports = function(data) {\n  \"use strict\";\n  return (function() {\n    var __root;\n    __root = require(\"/lib/hamlet-runtime\")(this);\n    __root.buffer(__root.element(\"li\", this, {}, function(__root) {\n      __root.buffer(__root.element(\"hr\", this, {}, function(__root) {}));\n    }));\n    return __root.root;\n  }).call(data);\n};\n",
      "type": "blob"
    },
    "lib/hamlet-runtime": {
      "path": "lib/hamlet-runtime",
      "content": "(function(f){if(typeof exports===\"object\"&&typeof module!==\"undefined\"){module.exports=f()}else if(typeof define===\"function\"&&define.amd){define([],f)}else{var g;if(typeof window!==\"undefined\"){g=window}else if(typeof global!==\"undefined\"){g=global}else if(typeof self!==\"undefined\"){g=self}else{g=this}g.HamletRuntime = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n// Generated by CoffeeScript 1.7.1\n(function() {\n  \"use strict\";\n  var Observable, Runtime, bindEvent, bindObservable, bufferTo, classes, createElement, empty, eventNames, get, id, isEvent, isFragment, makeElement, observeAttribute, observeAttributes, observeContent, specialBindings, valueBind, valueIndexOf;\n\n  Observable = require(\"o_0\");\n\n  eventNames = \"abort\\nblur\\nchange\\nclick\\ncontextmenu\\ndblclick\\ndrag\\ndragend\\ndragenter\\ndragexit\\ndragleave\\ndragover\\ndragstart\\ndrop\\nerror\\nfocus\\ninput\\nkeydown\\nkeypress\\nkeyup\\nload\\nmousedown\\nmousemove\\nmouseout\\nmouseover\\nmouseup\\nreset\\nresize\\nscroll\\nselect\\nsubmit\\ntouchcancel\\ntouchend\\ntouchenter\\ntouchleave\\ntouchmove\\ntouchstart\\nunload\".split(\"\\n\");\n\n  isEvent = function(name) {\n    return eventNames.indexOf(name) !== -1;\n  };\n\n  isFragment = function(node) {\n    return (node != null ? node.nodeType : void 0) === 11;\n  };\n\n  valueBind = function(element, value, context) {\n    Observable(function() {\n      var update;\n      value = Observable(value, context);\n      switch (element.nodeName) {\n        case \"SELECT\":\n          element.oninput = element.onchange = function() {\n            var optionValue, _ref, _value;\n            _ref = this.children[this.selectedIndex], optionValue = _ref.value, _value = _ref._value;\n            return value(_value || optionValue);\n          };\n          update = function(newValue) {\n            var options;\n            element._value = newValue;\n            if ((options = element._options)) {\n              if (newValue.value != null) {\n                return element.value = (typeof newValue.value === \"function\" ? newValue.value() : void 0) || newValue.value;\n              } else {\n                return element.selectedIndex = valueIndexOf(options, newValue);\n              }\n            } else {\n              return element.value = newValue;\n            }\n          };\n          return bindObservable(element, value, context, update);\n        default:\n          element.oninput = element.onchange = function() {\n            return value(element.value);\n          };\n          if (typeof element.attachEvent === \"function\") {\n            element.attachEvent(\"onkeydown\", function() {\n              return setTimeout(function() {\n                return value(element.value);\n              }, 0);\n            });\n          }\n          return bindObservable(element, value, context, function(newValue) {\n            if (element.value !== newValue) {\n              return element.value = newValue;\n            }\n          });\n      }\n    });\n  };\n\n  specialBindings = {\n    INPUT: {\n      checked: function(element, value, context) {\n        element.onchange = function() {\n          return typeof value === \"function\" ? value(element.checked) : void 0;\n        };\n        return bindObservable(element, value, context, function(newValue) {\n          return element.checked = newValue;\n        });\n      }\n    },\n    SELECT: {\n      options: function(element, values, context) {\n        var updateValues;\n        values = Observable(values, context);\n        updateValues = function(values) {\n          empty(element);\n          element._options = values;\n          return values.map(function(value, index) {\n            var option, optionName, optionValue;\n            option = createElement(\"option\");\n            option._value = value;\n            if (typeof value === \"object\") {\n              optionValue = (value != null ? value.value : void 0) || index;\n            } else {\n              optionValue = value.toString();\n            }\n            bindObservable(option, optionValue, value, function(newValue) {\n              return option.value = newValue;\n            });\n            optionName = (value != null ? value.name : void 0) || value;\n            bindObservable(option, optionName, value, function(newValue) {\n              return option.textContent = option.innerText = newValue;\n            });\n            element.appendChild(option);\n            if (value === element._value) {\n              element.selectedIndex = index;\n            }\n            return option;\n          });\n        };\n        return bindObservable(element, values, context, updateValues);\n      }\n    }\n  };\n\n  observeAttribute = function(element, context, name, value) {\n    var binding, nodeName, _ref;\n    nodeName = element.nodeName;\n    if (name === \"value\") {\n      valueBind(element, value);\n    } else if (binding = (_ref = specialBindings[nodeName]) != null ? _ref[name] : void 0) {\n      binding(element, value, context);\n    } else if (name.match(/^on/) && isEvent(name.substr(2))) {\n      bindEvent(element, name, value, context);\n    } else if (isEvent(name)) {\n      bindEvent(element, \"on\" + name, value, context);\n    } else {\n      bindObservable(element, value, context, function(newValue) {\n        if ((newValue != null) && newValue !== false) {\n          return element.setAttribute(name, newValue);\n        } else {\n          return element.removeAttribute(name);\n        }\n      });\n    }\n    return element;\n  };\n\n  observeAttributes = function(element, context, attributes) {\n    return Object.keys(attributes).forEach(function(name) {\n      var value;\n      value = attributes[name];\n      return observeAttribute(element, context, name, value);\n    });\n  };\n\n  bindObservable = function(element, value, context, update) {\n    var observable, observe, unobserve;\n    observable = Observable(value, context);\n    observe = function() {\n      observable.observe(update);\n      return update(observable());\n    };\n    unobserve = function() {\n      return observable.stopObserving(update);\n    };\n    observe();\n    return element;\n  };\n\n  bindEvent = function(element, name, fn, context) {\n    return element[name] = function() {\n      return fn.apply(context, arguments);\n    };\n  };\n\n  id = function(element, context, sources) {\n    var lastId, update, value;\n    value = Observable.concat.apply(Observable, sources.map(function(source) {\n      return Observable(source, context);\n    }));\n    update = function(newId) {\n      return element.id = newId;\n    };\n    lastId = function() {\n      return value.last();\n    };\n    return bindObservable(element, lastId, context, update);\n  };\n\n  classes = function(element, context, sources) {\n    var classNames, update, value;\n    value = Observable.concat.apply(Observable, sources.map(function(source) {\n      return Observable(source, context);\n    }));\n    update = function(classNames) {\n      return element.className = classNames;\n    };\n    classNames = function() {\n      return value.join(\" \");\n    };\n    return bindObservable(element, classNames, context, update);\n  };\n\n  createElement = function(name) {\n    return document.createElement(name);\n  };\n\n  observeContent = function(element, context, contentFn) {\n    var append, contents, update;\n    contents = [];\n    contentFn.call(context, {\n      buffer: bufferTo(context, contents),\n      element: makeElement\n    });\n    append = function(item) {\n      if (item == null) {\n\n      } else if (typeof item === \"string\") {\n        return element.appendChild(document.createTextNode(item));\n      } else if (typeof item === \"number\") {\n        return element.appendChild(document.createTextNode(item));\n      } else if (typeof item === \"boolean\") {\n        return element.appendChild(document.createTextNode(item));\n      } else if (typeof item.each === \"function\") {\n        return item.each(append);\n      } else if (typeof item.forEach === \"function\") {\n        return item.forEach(append);\n      } else {\n        return element.appendChild(item);\n      }\n    };\n    update = function(contents) {\n      empty(element);\n      return contents.forEach(append);\n    };\n    return update(contents);\n  };\n\n  bufferTo = function(context, collection) {\n    return function(content) {\n      if (typeof content === 'function') {\n        content = Observable(content, context);\n      }\n      collection.push(content);\n      return content;\n    };\n  };\n\n  makeElement = function(name, context, attributes, fn) {\n    var element;\n    if (attributes == null) {\n      attributes = {};\n    }\n    element = createElement(name);\n    Observable(function() {\n      if (attributes.id != null) {\n        id(element, context, attributes.id);\n        return delete attributes.id;\n      }\n    });\n    Observable(function() {\n      if (attributes[\"class\"] != null) {\n        classes(element, context, attributes[\"class\"]);\n        return delete attributes[\"class\"];\n      }\n    });\n    Observable(function() {\n      return observeAttributes(element, context, attributes);\n    }, context);\n    if (element.nodeName !== \"SELECT\") {\n      Observable(function() {\n        return observeContent(element, context, fn);\n      }, context);\n    }\n    return element;\n  };\n\n  Runtime = function(context) {\n    var self;\n    self = {\n      buffer: function(content) {\n        if (self.root) {\n          throw \"Cannot have multiple root elements\";\n        }\n        return self.root = content;\n      },\n      element: makeElement,\n      filter: function(name, content) {}\n    };\n    return self;\n  };\n\n  Runtime.VERSION = require(\"../package.json\").version;\n\n  Runtime.Observable = Observable;\n\n  module.exports = Runtime;\n\n  empty = function(node) {\n    var child, _results;\n    _results = [];\n    while (child = node.firstChild) {\n      _results.push(node.removeChild(child));\n    }\n    return _results;\n  };\n\n  valueIndexOf = function(options, value) {\n    if (typeof value === \"object\") {\n      return options.indexOf(value);\n    } else {\n      return options.map(function(option) {\n        return option.toString();\n      }).indexOf(value.toString());\n    }\n  };\n\n  get = function(x) {\n    if (typeof x === 'function') {\n      return x();\n    } else {\n      return x;\n    }\n  };\n\n}).call(this);\n\n},{\"../package.json\":3,\"o_0\":2}],2:[function(require,module,exports){\n(function (global){\n// Generated by CoffeeScript 1.8.0\n(function() {\n  var Observable, PROXY_LENGTH, computeDependencies, copy, extend, flatten, get, last, magicDependency, remove, splat, tryCallWithFinallyPop,\n    __slice = [].slice;\n\n  module.exports = Observable = function(value, context) {\n    var changed, fn, listeners, notify, notifyReturning, self;\n    if (typeof (value != null ? value.observe : void 0) === \"function\") {\n      return value;\n    }\n    listeners = [];\n    notify = function(newValue) {\n      return copy(listeners).forEach(function(listener) {\n        return listener(newValue);\n      });\n    };\n    if (typeof value === 'function') {\n      fn = value;\n      self = function() {\n        magicDependency(self);\n        return value;\n      };\n      changed = function() {\n        value = computeDependencies(self, fn, changed, context);\n        return notify(value);\n      };\n      changed();\n    } else {\n      self = function(newValue) {\n        if (arguments.length > 0) {\n          if (value !== newValue) {\n            value = newValue;\n            notify(newValue);\n          }\n        } else {\n          magicDependency(self);\n        }\n        return value;\n      };\n    }\n    self.each = function(callback) {\n      magicDependency(self);\n      if (value != null) {\n        [value].forEach(function(item) {\n          return callback.call(item, item);\n        });\n      }\n      return self;\n    };\n    if (Array.isArray(value)) {\n      [\"concat\", \"every\", \"filter\", \"forEach\", \"indexOf\", \"join\", \"lastIndexOf\", \"map\", \"reduce\", \"reduceRight\", \"slice\", \"some\"].forEach(function(method) {\n        return self[method] = function() {\n          var args;\n          args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];\n          magicDependency(self);\n          return value[method].apply(value, args);\n        };\n      });\n      [\"pop\", \"push\", \"reverse\", \"shift\", \"splice\", \"sort\", \"unshift\"].forEach(function(method) {\n        return self[method] = function() {\n          var args;\n          args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];\n          return notifyReturning(value[method].apply(value, args));\n        };\n      });\n      if (PROXY_LENGTH) {\n        Object.defineProperty(self, 'length', {\n          get: function() {\n            magicDependency(self);\n            return value.length;\n          },\n          set: function(length) {\n            value.length = length;\n            return notifyReturning(value.length);\n          }\n        });\n      }\n      notifyReturning = function(returnValue) {\n        notify(value);\n        return returnValue;\n      };\n      extend(self, {\n        each: function(callback) {\n          self.forEach(function(item, index) {\n            return callback.call(item, item, index, self);\n          });\n          return self;\n        },\n        remove: function(object) {\n          var index;\n          index = value.indexOf(object);\n          if (index >= 0) {\n            return notifyReturning(value.splice(index, 1)[0]);\n          }\n        },\n        get: function(index) {\n          magicDependency(self);\n          return value[index];\n        },\n        first: function() {\n          magicDependency(self);\n          return value[0];\n        },\n        last: function() {\n          magicDependency(self);\n          return value[value.length - 1];\n        },\n        size: function() {\n          magicDependency(self);\n          return value.length;\n        }\n      });\n    }\n    extend(self, {\n      listeners: listeners,\n      observe: function(listener) {\n        return listeners.push(listener);\n      },\n      stopObserving: function(fn) {\n        return remove(listeners, fn);\n      },\n      toggle: function() {\n        return self(!value);\n      },\n      increment: function(n) {\n        return self(value + n);\n      },\n      decrement: function(n) {\n        return self(value - n);\n      },\n      toString: function() {\n        return \"Observable(\" + value + \")\";\n      }\n    });\n    return self;\n  };\n\n  Observable.concat = function() {\n    var arg, args, collection, i, o, _i, _len;\n    args = new Array(arguments.length);\n    for (i = _i = 0, _len = arguments.length; _i < _len; i = ++_i) {\n      arg = arguments[i];\n      args[i] = arguments[i];\n    }\n    collection = Observable(args);\n    o = Observable(function() {\n      return flatten(collection.map(splat));\n    });\n    o.push = collection.push;\n    return o;\n  };\n\n  extend = function(target) {\n    var i, name, source, _i, _len;\n    for (i = _i = 0, _len = arguments.length; _i < _len; i = ++_i) {\n      source = arguments[i];\n      if (i > 0) {\n        for (name in source) {\n          target[name] = source[name];\n        }\n      }\n    }\n    return target;\n  };\n\n  global.OBSERVABLE_ROOT_HACK = [];\n\n  magicDependency = function(self) {\n    var observerSet;\n    observerSet = last(global.OBSERVABLE_ROOT_HACK);\n    if (observerSet) {\n      return observerSet.add(self);\n    }\n  };\n\n  tryCallWithFinallyPop = function(fn, context) {\n    try {\n      return fn.call(context);\n    } finally {\n      global.OBSERVABLE_ROOT_HACK.pop();\n    }\n  };\n\n  computeDependencies = function(self, fn, update, context) {\n    var deps, value, _ref;\n    deps = new Set;\n    global.OBSERVABLE_ROOT_HACK.push(deps);\n    value = tryCallWithFinallyPop(fn, context);\n    if ((_ref = self._deps) != null) {\n      _ref.forEach(function(observable) {\n        return observable.stopObserving(update);\n      });\n    }\n    self._deps = deps;\n    deps.forEach(function(observable) {\n      return observable.observe(update);\n    });\n    return value;\n  };\n\n  try {\n    Object.defineProperty((function() {}), 'length', {\n      get: function() {},\n      set: function() {}\n    });\n    PROXY_LENGTH = true;\n  } catch (_error) {\n    PROXY_LENGTH = false;\n  }\n\n  remove = function(array, value) {\n    var index;\n    index = array.indexOf(value);\n    if (index >= 0) {\n      return array.splice(index, 1)[0];\n    }\n  };\n\n  copy = function(array) {\n    return array.concat([]);\n  };\n\n  get = function(arg) {\n    if (typeof arg === \"function\") {\n      return arg();\n    } else {\n      return arg;\n    }\n  };\n\n  splat = function(item) {\n    var result, results;\n    results = [];\n    if (item == null) {\n      return results;\n    }\n    if (typeof item.forEach === \"function\") {\n      item.forEach(function(i) {\n        return results.push(i);\n      });\n    } else {\n      result = get(item);\n      if (result != null) {\n        results.push(result);\n      }\n    }\n    return results;\n  };\n\n  last = function(array) {\n    return array[array.length - 1];\n  };\n\n  flatten = function(array) {\n    return array.reduce(function(a, b) {\n      return a.concat(b);\n    }, []);\n  };\n\n}).call(this);\n\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{}],3:[function(require,module,exports){\nmodule.exports={\n  \"name\": \"hamlet.coffee\",\n  \"version\": \"0.7.6\",\n  \"description\": \"Truly amazing templating!\",\n  \"devDependencies\": {\n    \"browserify\": \"^12.0.1\",\n    \"coffee-script\": \"~1.7.1\",\n    \"jsdom\": \"^7.2.0\",\n    \"mocha\": \"^2.3.3\"\n  },\n  \"dependencies\": {\n    \"hamlet-compiler\": \"0.7.0\",\n    \"o_0\": \"0.3.8\"\n  },\n  \"homepage\": \"hamlet.coffee\",\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/dr-coffee-labs/hamlet.git\"\n  },\n  \"scripts\": {\n    \"prepublish\": \"script/prepublish\",\n    \"test\": \"script/test\"\n  },\n  \"files\": [\n    \"dist/\"\n  ],\n  \"main\": \"dist/runtime.js\"\n}\n\n},{}]},{},[1])(1)\n});",
      "type": "blob"
    }
  },
  "progenitor": {
    "url": "https://danielx.net/editor/?code=b1d5b67a4abe4f65501b"
  },
  "entryPoint": "experiments/spreadsheet",
  "remoteDependencies": [
    "https://sdk.amazonaws.com/js/aws-sdk-2.2.42.min.js",
    "https://api-cdn.amazon.com/sdk/login1.js",
    "https://unpkg.com/dexie@1.4.1/dist/dexie.js"
  ],
  "repository": {
    "branch": "dexie",
    "default_branch": "master",
    "full_name": "STRd6/swag",
    "homepage": null,
    "description": "Serverless Working Applications Group",
    "html_url": "https://github.com/STRd6/swag",
    "url": "https://api.github.com/repos/STRd6/swag",
    "publishBranch": "gh-pages"
  },
  "dependencies": {
    "observable": {
      "source": {
        "LICENSE": {
          "path": "LICENSE",
          "content": "The MIT License (MIT)\n\nCopyright (c) 2014 distri\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\nthe Software, and to permit persons to whom the Software is furnished to do so,\nsubject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\nFOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\nCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\nIN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\nCONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n",
          "mode": "100644",
          "type": "blob"
        },
        "README.md": {
          "path": "README.md",
          "content": "[![Build Status](https://travis-ci.org/distri/observable.svg?branch=npm)](https://travis-ci.org/distri/observable)\n\nObservable\n==========\n\nInstallation\n------------\n\nNode\n\n    npm install o_0\n\nUsage\n-----\n\n    Observable = require \"o_0\"\n\nGet notified when the value changes.\n\n    observable = Observable 5\n\n    observable() # 5\n\n    observable.observe (newValue) ->\n      console.log newValue\n\n    observable 10 # logs 10 to console\n\nArrays\n------\n\nProxy array methods.\n\n    observable = Observable [1, 2, 3]\n\n    observable.forEach (value) ->\n      # 1, 2, 3\n\nFunctions\n---------\n\nAutomagically compute dependencies for observable functions.\n\n    firstName = Observable \"Duder\"\n    lastName = Observable \"Man\"\n\n    o = Observable ->\n      \"#{firstName()} #{lastName()}\"\n\n    o.observe (newValue) ->\n      assert.equal newValue, \"Duder Bro\"\n\n    lastName \"Bro\"\n",
          "mode": "100644",
          "type": "blob"
        },
        "main.coffee.md": {
          "path": "main.coffee.md",
          "content": "Observable\n==========\n\n`Observable` allows for observing arrays, functions, and objects.\n\nFunction dependencies are automagically observed.\n\nStandard array methods are proxied through to the underlying array.\n\n    Observable = (value, context) ->\n\nReturn the object if it is already an observable object.\n\n      return value if typeof value?.observe is \"function\"\n\nMaintain a set of listeners to observe changes and provide a helper to notify each observer.\n\n      listeners = []\n\n      notify = (newValue) ->\n        copy(listeners).forEach (listener) ->\n          listener(newValue)\n\nOur observable function is stored as a reference to `self`.\n\nIf `value` is a function compute dependencies and listen to observables that it depends on.\n\n      if typeof value is 'function'\n        fn = value\n\nOur return function is a function that holds only a cached value which is updated\nwhen it's dependencies change.\n\nThe `magicDependency` call is so other functions can depend on this computed function the\nsame way we depend on other types of observables.\n\n        self = ->\n          # Automagic dependency observation\n          magicDependency(self)\n\n          return value\n\n        changed = ->\n          value = computeDependencies(self, fn, changed, context)\n          notify(value)\n\n        changed()\n\n      else\n\nWhen called with zero arguments it is treated as a getter. When called with one argument it is treated as a setter.\n\nChanges to the value will trigger notifications.\n\nThe value is always returned.\n\n        self = (newValue) ->\n          if arguments.length > 0\n            if value != newValue\n              value = newValue\n\n              notify(newValue)\n          else\n            # Automagic dependency observation\n            magicDependency(self)\n\n          return value\n\nThis `each` iterator is similar to [the Maybe monad](http://en.wikipedia.org/wiki/Monad_&#40;functional_programming&#41;#The_Maybe_monad) in that our observable may contain a single value or nothing at all.\n\n      self.each = (callback) ->\n        magicDependency(self)\n\n        if value?\n          [value].forEach (item) ->\n            callback.call(item, item)\n\n        return self\n\nIf the value is an array then proxy array methods and add notifications to mutation events.\n\n      if Array.isArray(value)\n        [\n          \"concat\"\n          \"every\"\n          \"filter\"\n          \"forEach\"\n          \"indexOf\"\n          \"join\"\n          \"lastIndexOf\"\n          \"map\"\n          \"reduce\"\n          \"reduceRight\"\n          \"slice\"\n          \"some\"\n        ].forEach (method) ->\n          self[method] = (args...) ->\n            magicDependency(self)\n            value[method](args...)\n\n        [\n          \"pop\"\n          \"push\"\n          \"reverse\"\n          \"shift\"\n          \"splice\"\n          \"sort\"\n          \"unshift\"\n        ].forEach (method) ->\n          self[method] = (args...) ->\n            notifyReturning value[method](args...)\n\n        try # Provide length on a best effort basis because older browsers choke\n          Object.defineProperty self, 'length',\n            get: ->\n              magicDependency(self)\n              value.length\n            set: (length) ->\n              value.length = length\n              notifyReturning(value.length)\n\n        notifyReturning = (returnValue) ->\n          notify(value)\n\n          return returnValue\n\nAdd some extra helpful methods to array observables.\n\n        extend self,\n          each: (callback) ->\n            self.forEach (item, index) ->\n              callback.call(item, item, index, self)\n\n            return self\n\nRemove an element from the array and notify observers of changes.\n\n          remove: (object) ->\n            index = value.indexOf(object)\n\n            if index >= 0\n              notifyReturning value.splice(index, 1)[0]\n\n          get: (index) ->\n            magicDependency(self)\n            value[index]\n\n          first: ->\n            magicDependency(self)\n            value[0]\n\n          last: ->\n            magicDependency(self)\n            value[value.length-1]\n\n          size: ->\n            magicDependency(self)\n            value.length\n\n      extend self,\n        listeners: listeners\n\n        observe: (listener) ->\n          listeners.push listener\n\n        stopObserving: (fn) ->\n          remove listeners, fn\n\n        toggle: ->\n          self !value\n\n        increment: (n) ->\n          self value + n\n\n        decrement: (n) ->\n          self value - n\n\n        toString: ->\n          \"Observable(#{value})\"\n\n      return self\n\n    Observable.concat = (args...) ->\n      args = Observable(args)\n\n      o = Observable ->\n        flatten args.map(splat)\n\n      o.push = args.push\n\n      return o\n\nExport `Observable`\n\n    module.exports = Observable\n\nAppendix\n--------\n\nThe extend method adds one objects properties to another.\n\n    extend = (target, sources...) ->\n      for source in sources\n        for name of source\n          target[name] = source[name]\n\n      return target\n\nSuper hax for computing dependencies. This needs to be a shared global so that\ndifferent bundled versions of observable libraries can interoperate.\n\n    global.OBSERVABLE_ROOT_HACK = []\n\n    magicDependency = (self) ->\n      observerSet = last(global.OBSERVABLE_ROOT_HACK)\n      if observerSet\n        observerSet.add self\n\nAutomagically compute dependencies.\n\n    computeDependencies = (self, fn, update, context) ->\n      deps = new Set\n\n      global.OBSERVABLE_ROOT_HACK.push(deps)\n\n      try\n        value = fn.call(context)\n      finally\n        global.OBSERVABLE_ROOT_HACK.pop()\n\n      self._deps?.forEach (observable) ->\n        observable.stopObserving update\n\n      self._deps = deps\n\n      deps.forEach (observable) ->\n        observable.observe update\n\n      return value\n\nRemove a value from an array.\n\n    remove = (array, value) ->\n      index = array.indexOf(value)\n\n      if index >= 0\n        array.splice(index, 1)[0]\n\n    copy = (array) ->\n      array.concat([])\n\n    get = (arg) ->\n      if typeof arg is \"function\"\n        arg()\n      else\n        arg\n\n    splat = (item) ->\n      results = []\n\n      return results unless item?\n\n      if typeof item.forEach is \"function\"\n        item.forEach (i) ->\n          results.push i\n      else\n        result = get item\n\n        results.push result if result?\n\n      results\n\n    last = (array) ->\n      array[array.length - 1]\n\n    flatten = (array) ->\n      array.reduce (a, b) ->\n        a.concat(b)\n      , []\n",
          "mode": "100644",
          "type": "blob"
        },
        "pixie.cson": {
          "path": "pixie.cson",
          "content": "version: \"0.3.7\"\n",
          "mode": "100644",
          "type": "blob"
        },
        "test/observable.coffee": {
          "path": "test/observable.coffee",
          "content": "global.Observable = require \"../main\"\n\ndescribe 'Observable', ->\n  it 'should create an observable for an object', ->\n    n = 5\n\n    observable = Observable(n)\n\n    assert.equal(observable(), n)\n\n  it 'should fire events when setting', ->\n    string = \"yolo\"\n\n    observable = Observable(string)\n    observable.observe (newValue) ->\n      assert.equal newValue, \"4life\"\n\n    observable(\"4life\")\n\n  it \"should not fire when setting to the same value\", ->\n    o = Observable 5\n\n    o.observe ->\n      assert false\n\n    o(5)\n\n  it 'should be idempotent', ->\n    o = Observable(5)\n\n    assert.equal o, Observable(o)\n\n  describe \"#each\", ->\n    it \"should be invoked once if there is an observable\", ->\n      o = Observable(5)\n      called = 0\n\n      o.each (value) ->\n        called += 1\n        assert.equal value, 5\n\n      assert.equal called, 1\n\n    it \"should not be invoked if observable is null\", ->\n      o = Observable(null)\n      called = 0\n\n      o.each (value) ->\n        called += 1\n\n      assert.equal called, 0\n\n    it \"should have the correct `this` scope for items\", (done) ->\n      o = Observable 5\n\n      o.each ->\n        assert.equal this, 5\n        done()\n\n    it \"should have the correct `this` scope for items in observable arrays\", ->\n      scopes = []\n\n      o = Observable [\"I'm\", \"an\", \"array\"]\n\n      o.each ->\n        scopes.push this\n\n      assert.equal scopes[0], \"I'm\"\n      assert.equal scopes[1], \"an\"\n      assert.equal scopes[2], \"array\"\n\n  it \"should allow for stopping observation\", ->\n    observable = Observable(\"string\")\n\n    called = 0\n    fn = (newValue) ->\n      called += 1\n      assert.equal newValue, \"4life\"\n\n    observable.observe fn\n\n    observable(\"4life\")\n\n    observable.stopObserving fn\n\n    observable(\"wat\")\n\n    assert.equal called, 1\n\n  it \"should increment\", ->\n    observable = Observable 1\n\n    observable.increment(5)\n\n    assert.equal observable(), 6\n\n  it \"should decremnet\", ->\n    observable = Observable 1\n\n    observable.decrement 5\n\n    assert.equal observable(), -4\n\n  it \"should toggle\", ->\n    observable = Observable false\n\n    observable.toggle()\n    assert.equal observable(), true\n\n    observable.toggle()\n    assert.equal observable(), false\n\n  it \"should trigger when toggling\", (done) ->\n    observable = Observable true\n    observable.observe (v) ->\n      assert.equal v, false\n      done()\n\n    observable.toggle()\n\n  it \"should have a nice toString\", ->\n    observable = Observable 5\n\n    assert.equal observable.toString(), \"Observable(5)\"\n\ndescribe \"Observable Array\", ->\n  it \"should proxy array methods\", ->\n    o = Observable [5]\n\n    o.map (n) ->\n      assert.equal n, 5\n\n  it \"should notify on mutation methods\", (done) ->\n    o = Observable []\n\n    o.observe (newValue) ->\n      assert.equal newValue[0], 1\n\n    o.push 1\n\n    done()\n\n  it \"should have an each method\", ->\n    o = Observable []\n\n    assert o.each\n\n  it \"#get\", ->\n    o = Observable [0, 1, 2, 3]\n\n    assert.equal o.get(2), 2\n\n  it \"#first\", ->\n    o = Observable [0, 1, 2, 3]\n\n    assert.equal o.first(), 0\n\n  it \"#last\", ->\n    o = Observable [0, 1, 2, 3]\n\n    assert.equal o.last(), 3\n\n  it \"#remove\", (done) ->\n    o = Observable [0, 1, 2, 3]\n\n    o.observe (newValue) ->\n      assert.equal newValue.length, 3\n      setTimeout ->\n        done()\n      , 0\n\n    assert.equal o.remove(2), 2\n\n  it \"#remove non-existent element\", ->\n    o = Observable [1, 2, 3]\n\n    assert.equal o.remove(0), undefined\n\n  it \"should proxy the length property\", ->\n    o = Observable [1, 2, 3]\n\n    assert.equal o.length, 3\n\n    called = false\n    o.observe (value) ->\n      assert.equal value[0], 1\n      assert.equal value[1], undefined\n      called = true\n\n    o.length = 1\n    assert.equal o.length, 1\n    assert.equal called, true\n\n  it \"should auto detect conditionals of length as a dependency\", ->\n    observableArray = Observable [1, 2, 3]\n\n    o = Observable ->\n      if observableArray.length > 5\n        true\n      else\n        false\n\n    assert.equal o(), false\n\n    called = 0\n    o.observe ->\n      called += 1\n\n    observableArray.push 4, 5, 6\n\n    assert.equal called, 1\n\ndescribe \"Observable functions\", ->\n  it \"should compute dependencies\", (done) ->\n    firstName = Observable \"Duder\"\n    lastName = Observable \"Man\"\n\n    o = Observable ->\n      \"#{firstName()} #{lastName()}\"\n\n    o.observe (newValue) ->\n      assert.equal newValue, \"Duder Bro\"\n\n      done()\n\n    lastName \"Bro\"\n\n  it \"should compute array#get as a dependency\", ->\n    observableArray = Observable [0, 1, 2]\n\n    observableFn = Observable ->\n      observableArray.get(0)\n\n    assert.equal observableFn(), 0\n\n    observableArray([5])\n\n    assert.equal observableFn(), 5\n\n  it \"should compute array#first as a dependency\", ->\n    observableArray = Observable [0, 1, 2]\n\n    observableFn = Observable ->\n      observableArray.first() + 1\n\n    assert.equal observableFn(), 1\n\n    observableArray([5])\n\n    assert.equal observableFn(), 6\n\n  it \"should compute array#last as a dependency\", ->\n    observableArray = Observable [0, 1, 2]\n\n    observableFn = Observable ->\n      observableArray.last()\n\n    assert.equal observableFn(), 2\n\n    observableArray.pop()\n\n    assert.equal observableFn(), 1\n\n    observableArray([5])\n\n    assert.equal observableFn(), 5\n\n  it \"should compute array#size as a dependency\", ->\n    observableArray = Observable [0, 1, 2]\n\n    observableFn = Observable ->\n      observableArray.size() * 2\n\n    assert.equal observableFn(), 6\n\n    observableArray.pop()\n    assert.equal observableFn(), 4\n    observableArray.shift()\n    assert.equal observableFn(), 2\n\n  it \"should allow double nesting\", (done) ->\n    bottom = Observable \"rad\"\n    middle = Observable ->\n      bottom()\n    top = Observable ->\n      middle()\n\n    top.observe (newValue) ->\n      assert.equal newValue, \"wat\"\n      assert.equal top(), newValue\n      assert.equal middle(), newValue\n\n      done()\n\n    bottom(\"wat\")\n\n  it \"should work with dynamic dependencies\", ->\n    observableArray = Observable []\n\n    dynamicObservable = Observable ->\n      observableArray.filter (item) ->\n        item.age() > 3\n\n    assert.equal dynamicObservable().length, 0\n\n    observableArray.push\n      age: Observable 1\n\n    observableArray()[0].age 5\n    assert.equal dynamicObservable().length, 1\n\n  it \"should work with context\", ->\n    model =\n      a: Observable \"Hello\"\n      b: Observable \"there\"\n\n    model.c = Observable ->\n      \"#{@a()} #{@b()}\"\n    , model\n\n    assert.equal model.c(), \"Hello there\"\n\n    model.b \"world\"\n\n    assert.equal model.c(), \"Hello world\"\n\n  it \"should be ok even if the function throws an exception\", ->\n    assert.throws ->\n      t = Observable ->\n        throw \"wat\"\n\n    # TODO: Should be able to find a test case that is affected by this rather that\n    # checking it directly\n    assert.equal global.OBSERVABLE_ROOT_HACK.length, 0\n\n  it \"should have an each method\", ->\n    o = Observable ->\n\n    assert o.each()\n\n  it \"should not invoke when returning undefined\", ->\n    o = Observable ->\n\n    o.each ->\n      assert false\n\n  it \"should invoke when returning any defined value\", (done) ->\n    o = Observable -> 5\n\n    o.each (n) ->\n      assert.equal n, 5\n      done()\n\n  it \"should work on an array dependency\", ->\n    oA = Observable [1, 2, 3]\n\n    o = Observable ->\n      oA()[0]\n\n    last = Observable ->\n      oA()[oA().length-1]\n\n    assert.equal o(), 1\n\n    oA.unshift 0\n\n    assert.equal o(), 0\n\n    oA.push 4\n\n    assert.equal last(), 4, \"Last should be 4\"\n\n  it \"should work with multiple dependencies\", ->\n    letter = Observable \"A\"\n    checked = ->\n      l = letter()\n      @name().indexOf(l) is 0\n\n    first = {name: Observable(\"Andrew\")}\n    first.checked = Observable checked, first\n\n    second = {name: Observable(\"Benjamin\")}\n    second.checked = Observable checked, second\n\n    assert.equal first.checked(), true\n    assert.equal second.checked(), false\n\n    assert.equal letter.listeners.length, 2\n\n    letter \"B\"\n\n    assert.equal first.checked(), false\n    assert.equal second.checked(), true\n\n  it \"shouldn't double count dependencies\", ->\n    dep = Observable \"yo\"\n\n    o = Observable ->\n      dep()\n      dep()\n      dep()\n\n    count = 0\n    o.observe ->\n      count += 1\n\n    dep('heyy')\n\n    assert.equal count, 1\n\n  it \"should work with nested observable construction\", ->\n    gen = Observable ->\n      Observable \"Duder\"\n\n    o = gen()\n\n    assert.equal o(), \"Duder\"\n\n    o(\"wat\")\n\n    assert.equal o(), \"wat\"\n\n  describe \"Scoping\", ->\n    it \"should be scoped to optional context\", (done) ->\n      model =\n        firstName: Observable \"Duder\"\n        lastName: Observable \"Man\"\n\n      model.name = Observable ->\n        \"#{@firstName()} #{@lastName()}\"\n      , model\n\n      model.name.observe (newValue) ->\n        assert.equal newValue, \"Duder Bro\"\n\n        done()\n\n      model.lastName \"Bro\"\n\n  describe \"concat\", ->\n    it \"should work with a single observable\", ->\n      observable = Observable \"something\"\n      observableArray = Observable.concat observable\n      assert.equal observableArray.last(), \"something\"\n\n      observable \"something else\"\n      assert.equal observableArray.last(), \"something else\"\n\n    it \"should work with an undefined observable\", ->\n      observable = Observable undefined\n      observableArray = Observable.concat observable\n      assert.equal observableArray.size(), 0\n\n      observable \"defined\"\n      assert.equal observableArray.size(), 1\n\n    it \"should work with undefined\", ->\n      observableArray = Observable.concat undefined\n      assert.equal observableArray.size(), 0\n\n    it \"should work with []\", ->\n      observableArray = Observable.concat []\n      assert.equal observableArray.size(), 0\n\n    it \"should return an observable array that changes based on changes in inputs\", ->\n      numbers = Observable [1, 2, 3]\n      letters = Observable [\"a\", \"b\", \"c\"]\n      item = Observable({})\n      nullable = Observable null\n\n      observableArray = Observable.concat numbers, \"literal\", letters, item, nullable\n\n      assert.equal observableArray().length, 3 + 1 + 3 + 1\n\n      assert.equal observableArray()[0], 1\n      assert.equal observableArray()[3], \"literal\"\n      assert.equal observableArray()[4], \"a\"\n      assert.equal observableArray()[7], item()\n\n      numbers.push 4\n\n      assert.equal observableArray().length, 9\n\n      nullable \"cool\"\n\n      assert.equal observableArray().length, 10\n\n    it \"should work with observable functions that return arrays\", ->\n      item = Observable(\"wat\")\n\n      computedArray = Observable ->\n        [item()]\n\n      observableArray = Observable.concat computedArray, computedArray\n\n      assert.equal observableArray().length, 2\n\n      assert.equal observableArray()[1], \"wat\"\n\n      item \"yolo\"\n\n      assert.equal observableArray()[1], \"yolo\"\n\n    it \"should have a push method\", ->\n      observableArray = Observable.concat()\n\n      observable = Observable \"hey\"\n\n      observableArray.push observable\n\n      assert.equal observableArray()[0], \"hey\"\n\n      observable \"wat\"\n\n      assert.equal observableArray()[0], \"wat\"\n\n      observableArray.push \"cool\"\n      observableArray.push \"radical\"\n\n      assert.equal observableArray().length, 3\n\n    it \"should be observable\", (done) ->\n      observableArray = Observable.concat()\n\n      observableArray.observe (items) ->\n        assert.equal items.length, 3\n        done()\n\n      observableArray.push [\"A\", \"B\", \"C\"]\n\n    it \"should have an each method\", ->\n      observableArray = Observable.concat([\"A\", \"B\", \"C\"])\n\n      n = 0\n      observableArray.each () ->\n        n += 1\n\n      assert.equal n, 3\n\n  describe \"nesting dependencies\", ->\n    it \"should update the correct observable\", ->\n      a = Observable \"a\"\n      b = Observable \"b\"\n\n      results = Observable ->\n        r = Observable.concat()\n\n        r.push a\n        r.push b\n\n        r\n\n      # TODO: Should this just be\n      #     results.first()\n      assert.equal results().first(), \"a\"\n\n      a(\"newA\")\n\n      assert.equal results().first(), \"newA\"\n",
          "mode": "100644",
          "type": "blob"
        }
      },
      "distribution": {
        "main": {
          "path": "main",
          "content": "(function() {\n  var Observable, computeDependencies, copy, extend, flatten, get, last, magicDependency, remove, splat,\n    __slice = [].slice;\n\n  Observable = function(value, context) {\n    var changed, fn, listeners, notify, notifyReturning, self;\n    if (typeof (value != null ? value.observe : void 0) === \"function\") {\n      return value;\n    }\n    listeners = [];\n    notify = function(newValue) {\n      return copy(listeners).forEach(function(listener) {\n        return listener(newValue);\n      });\n    };\n    if (typeof value === 'function') {\n      fn = value;\n      self = function() {\n        magicDependency(self);\n        return value;\n      };\n      changed = function() {\n        value = computeDependencies(self, fn, changed, context);\n        return notify(value);\n      };\n      changed();\n    } else {\n      self = function(newValue) {\n        if (arguments.length > 0) {\n          if (value !== newValue) {\n            value = newValue;\n            notify(newValue);\n          }\n        } else {\n          magicDependency(self);\n        }\n        return value;\n      };\n    }\n    self.each = function(callback) {\n      magicDependency(self);\n      if (value != null) {\n        [value].forEach(function(item) {\n          return callback.call(item, item);\n        });\n      }\n      return self;\n    };\n    if (Array.isArray(value)) {\n      [\"concat\", \"every\", \"filter\", \"forEach\", \"indexOf\", \"join\", \"lastIndexOf\", \"map\", \"reduce\", \"reduceRight\", \"slice\", \"some\"].forEach(function(method) {\n        return self[method] = function() {\n          var args;\n          args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];\n          magicDependency(self);\n          return value[method].apply(value, args);\n        };\n      });\n      [\"pop\", \"push\", \"reverse\", \"shift\", \"splice\", \"sort\", \"unshift\"].forEach(function(method) {\n        return self[method] = function() {\n          var args;\n          args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];\n          return notifyReturning(value[method].apply(value, args));\n        };\n      });\n      try {\n        Object.defineProperty(self, 'length', {\n          get: function() {\n            magicDependency(self);\n            return value.length;\n          },\n          set: function(length) {\n            value.length = length;\n            return notifyReturning(value.length);\n          }\n        });\n      } catch (_error) {}\n      notifyReturning = function(returnValue) {\n        notify(value);\n        return returnValue;\n      };\n      extend(self, {\n        each: function(callback) {\n          self.forEach(function(item, index) {\n            return callback.call(item, item, index, self);\n          });\n          return self;\n        },\n        remove: function(object) {\n          var index;\n          index = value.indexOf(object);\n          if (index >= 0) {\n            return notifyReturning(value.splice(index, 1)[0]);\n          }\n        },\n        get: function(index) {\n          magicDependency(self);\n          return value[index];\n        },\n        first: function() {\n          magicDependency(self);\n          return value[0];\n        },\n        last: function() {\n          magicDependency(self);\n          return value[value.length - 1];\n        },\n        size: function() {\n          magicDependency(self);\n          return value.length;\n        }\n      });\n    }\n    extend(self, {\n      listeners: listeners,\n      observe: function(listener) {\n        return listeners.push(listener);\n      },\n      stopObserving: function(fn) {\n        return remove(listeners, fn);\n      },\n      toggle: function() {\n        return self(!value);\n      },\n      increment: function(n) {\n        return self(value + n);\n      },\n      decrement: function(n) {\n        return self(value - n);\n      },\n      toString: function() {\n        return \"Observable(\" + value + \")\";\n      }\n    });\n    return self;\n  };\n\n  Observable.concat = function() {\n    var args, o;\n    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];\n    args = Observable(args);\n    o = Observable(function() {\n      return flatten(args.map(splat));\n    });\n    o.push = args.push;\n    return o;\n  };\n\n  module.exports = Observable;\n\n  extend = function() {\n    var name, source, sources, target, _i, _len;\n    target = arguments[0], sources = 2 <= arguments.length ? __slice.call(arguments, 1) : [];\n    for (_i = 0, _len = sources.length; _i < _len; _i++) {\n      source = sources[_i];\n      for (name in source) {\n        target[name] = source[name];\n      }\n    }\n    return target;\n  };\n\n  global.OBSERVABLE_ROOT_HACK = [];\n\n  magicDependency = function(self) {\n    var observerSet;\n    observerSet = last(global.OBSERVABLE_ROOT_HACK);\n    if (observerSet) {\n      return observerSet.add(self);\n    }\n  };\n\n  computeDependencies = function(self, fn, update, context) {\n    var deps, value, _ref;\n    deps = new Set;\n    global.OBSERVABLE_ROOT_HACK.push(deps);\n    try {\n      value = fn.call(context);\n    } finally {\n      global.OBSERVABLE_ROOT_HACK.pop();\n    }\n    if ((_ref = self._deps) != null) {\n      _ref.forEach(function(observable) {\n        return observable.stopObserving(update);\n      });\n    }\n    self._deps = deps;\n    deps.forEach(function(observable) {\n      return observable.observe(update);\n    });\n    return value;\n  };\n\n  remove = function(array, value) {\n    var index;\n    index = array.indexOf(value);\n    if (index >= 0) {\n      return array.splice(index, 1)[0];\n    }\n  };\n\n  copy = function(array) {\n    return array.concat([]);\n  };\n\n  get = function(arg) {\n    if (typeof arg === \"function\") {\n      return arg();\n    } else {\n      return arg;\n    }\n  };\n\n  splat = function(item) {\n    var result, results;\n    results = [];\n    if (item == null) {\n      return results;\n    }\n    if (typeof item.forEach === \"function\") {\n      item.forEach(function(i) {\n        return results.push(i);\n      });\n    } else {\n      result = get(item);\n      if (result != null) {\n        results.push(result);\n      }\n    }\n    return results;\n  };\n\n  last = function(array) {\n    return array[array.length - 1];\n  };\n\n  flatten = function(array) {\n    return array.reduce(function(a, b) {\n      return a.concat(b);\n    }, []);\n  };\n\n}).call(this);\n",
          "type": "blob"
        },
        "pixie": {
          "path": "pixie",
          "content": "module.exports = {\"version\":\"0.3.7\"};",
          "type": "blob"
        },
        "test/observable": {
          "path": "test/observable",
          "content": "(function() {\n  global.Observable = require(\"../main\");\n\n  describe('Observable', function() {\n    it('should create an observable for an object', function() {\n      var n, observable;\n      n = 5;\n      observable = Observable(n);\n      return assert.equal(observable(), n);\n    });\n    it('should fire events when setting', function() {\n      var observable, string;\n      string = \"yolo\";\n      observable = Observable(string);\n      observable.observe(function(newValue) {\n        return assert.equal(newValue, \"4life\");\n      });\n      return observable(\"4life\");\n    });\n    it(\"should not fire when setting to the same value\", function() {\n      var o;\n      o = Observable(5);\n      o.observe(function() {\n        return assert(false);\n      });\n      return o(5);\n    });\n    it('should be idempotent', function() {\n      var o;\n      o = Observable(5);\n      return assert.equal(o, Observable(o));\n    });\n    describe(\"#each\", function() {\n      it(\"should be invoked once if there is an observable\", function() {\n        var called, o;\n        o = Observable(5);\n        called = 0;\n        o.each(function(value) {\n          called += 1;\n          return assert.equal(value, 5);\n        });\n        return assert.equal(called, 1);\n      });\n      it(\"should not be invoked if observable is null\", function() {\n        var called, o;\n        o = Observable(null);\n        called = 0;\n        o.each(function(value) {\n          return called += 1;\n        });\n        return assert.equal(called, 0);\n      });\n      it(\"should have the correct `this` scope for items\", function(done) {\n        var o;\n        o = Observable(5);\n        return o.each(function() {\n          assert.equal(this, 5);\n          return done();\n        });\n      });\n      return it(\"should have the correct `this` scope for items in observable arrays\", function() {\n        var o, scopes;\n        scopes = [];\n        o = Observable([\"I'm\", \"an\", \"array\"]);\n        o.each(function() {\n          return scopes.push(this);\n        });\n        assert.equal(scopes[0], \"I'm\");\n        assert.equal(scopes[1], \"an\");\n        return assert.equal(scopes[2], \"array\");\n      });\n    });\n    it(\"should allow for stopping observation\", function() {\n      var called, fn, observable;\n      observable = Observable(\"string\");\n      called = 0;\n      fn = function(newValue) {\n        called += 1;\n        return assert.equal(newValue, \"4life\");\n      };\n      observable.observe(fn);\n      observable(\"4life\");\n      observable.stopObserving(fn);\n      observable(\"wat\");\n      return assert.equal(called, 1);\n    });\n    it(\"should increment\", function() {\n      var observable;\n      observable = Observable(1);\n      observable.increment(5);\n      return assert.equal(observable(), 6);\n    });\n    it(\"should decremnet\", function() {\n      var observable;\n      observable = Observable(1);\n      observable.decrement(5);\n      return assert.equal(observable(), -4);\n    });\n    it(\"should toggle\", function() {\n      var observable;\n      observable = Observable(false);\n      observable.toggle();\n      assert.equal(observable(), true);\n      observable.toggle();\n      return assert.equal(observable(), false);\n    });\n    it(\"should trigger when toggling\", function(done) {\n      var observable;\n      observable = Observable(true);\n      observable.observe(function(v) {\n        assert.equal(v, false);\n        return done();\n      });\n      return observable.toggle();\n    });\n    return it(\"should have a nice toString\", function() {\n      var observable;\n      observable = Observable(5);\n      return assert.equal(observable.toString(), \"Observable(5)\");\n    });\n  });\n\n  describe(\"Observable Array\", function() {\n    it(\"should proxy array methods\", function() {\n      var o;\n      o = Observable([5]);\n      return o.map(function(n) {\n        return assert.equal(n, 5);\n      });\n    });\n    it(\"should notify on mutation methods\", function(done) {\n      var o;\n      o = Observable([]);\n      o.observe(function(newValue) {\n        return assert.equal(newValue[0], 1);\n      });\n      o.push(1);\n      return done();\n    });\n    it(\"should have an each method\", function() {\n      var o;\n      o = Observable([]);\n      return assert(o.each);\n    });\n    it(\"#get\", function() {\n      var o;\n      o = Observable([0, 1, 2, 3]);\n      return assert.equal(o.get(2), 2);\n    });\n    it(\"#first\", function() {\n      var o;\n      o = Observable([0, 1, 2, 3]);\n      return assert.equal(o.first(), 0);\n    });\n    it(\"#last\", function() {\n      var o;\n      o = Observable([0, 1, 2, 3]);\n      return assert.equal(o.last(), 3);\n    });\n    it(\"#remove\", function(done) {\n      var o;\n      o = Observable([0, 1, 2, 3]);\n      o.observe(function(newValue) {\n        assert.equal(newValue.length, 3);\n        return setTimeout(function() {\n          return done();\n        }, 0);\n      });\n      return assert.equal(o.remove(2), 2);\n    });\n    it(\"#remove non-existent element\", function() {\n      var o;\n      o = Observable([1, 2, 3]);\n      return assert.equal(o.remove(0), void 0);\n    });\n    it(\"should proxy the length property\", function() {\n      var called, o;\n      o = Observable([1, 2, 3]);\n      assert.equal(o.length, 3);\n      called = false;\n      o.observe(function(value) {\n        assert.equal(value[0], 1);\n        assert.equal(value[1], void 0);\n        return called = true;\n      });\n      o.length = 1;\n      assert.equal(o.length, 1);\n      return assert.equal(called, true);\n    });\n    return it(\"should auto detect conditionals of length as a dependency\", function() {\n      var called, o, observableArray;\n      observableArray = Observable([1, 2, 3]);\n      o = Observable(function() {\n        if (observableArray.length > 5) {\n          return true;\n        } else {\n          return false;\n        }\n      });\n      assert.equal(o(), false);\n      called = 0;\n      o.observe(function() {\n        return called += 1;\n      });\n      observableArray.push(4, 5, 6);\n      return assert.equal(called, 1);\n    });\n  });\n\n  describe(\"Observable functions\", function() {\n    it(\"should compute dependencies\", function(done) {\n      var firstName, lastName, o;\n      firstName = Observable(\"Duder\");\n      lastName = Observable(\"Man\");\n      o = Observable(function() {\n        return \"\" + (firstName()) + \" \" + (lastName());\n      });\n      o.observe(function(newValue) {\n        assert.equal(newValue, \"Duder Bro\");\n        return done();\n      });\n      return lastName(\"Bro\");\n    });\n    it(\"should compute array#get as a dependency\", function() {\n      var observableArray, observableFn;\n      observableArray = Observable([0, 1, 2]);\n      observableFn = Observable(function() {\n        return observableArray.get(0);\n      });\n      assert.equal(observableFn(), 0);\n      observableArray([5]);\n      return assert.equal(observableFn(), 5);\n    });\n    it(\"should compute array#first as a dependency\", function() {\n      var observableArray, observableFn;\n      observableArray = Observable([0, 1, 2]);\n      observableFn = Observable(function() {\n        return observableArray.first() + 1;\n      });\n      assert.equal(observableFn(), 1);\n      observableArray([5]);\n      return assert.equal(observableFn(), 6);\n    });\n    it(\"should compute array#last as a dependency\", function() {\n      var observableArray, observableFn;\n      observableArray = Observable([0, 1, 2]);\n      observableFn = Observable(function() {\n        return observableArray.last();\n      });\n      assert.equal(observableFn(), 2);\n      observableArray.pop();\n      assert.equal(observableFn(), 1);\n      observableArray([5]);\n      return assert.equal(observableFn(), 5);\n    });\n    it(\"should compute array#size as a dependency\", function() {\n      var observableArray, observableFn;\n      observableArray = Observable([0, 1, 2]);\n      observableFn = Observable(function() {\n        return observableArray.size() * 2;\n      });\n      assert.equal(observableFn(), 6);\n      observableArray.pop();\n      assert.equal(observableFn(), 4);\n      observableArray.shift();\n      return assert.equal(observableFn(), 2);\n    });\n    it(\"should allow double nesting\", function(done) {\n      var bottom, middle, top;\n      bottom = Observable(\"rad\");\n      middle = Observable(function() {\n        return bottom();\n      });\n      top = Observable(function() {\n        return middle();\n      });\n      top.observe(function(newValue) {\n        assert.equal(newValue, \"wat\");\n        assert.equal(top(), newValue);\n        assert.equal(middle(), newValue);\n        return done();\n      });\n      return bottom(\"wat\");\n    });\n    it(\"should work with dynamic dependencies\", function() {\n      var dynamicObservable, observableArray;\n      observableArray = Observable([]);\n      dynamicObservable = Observable(function() {\n        return observableArray.filter(function(item) {\n          return item.age() > 3;\n        });\n      });\n      assert.equal(dynamicObservable().length, 0);\n      observableArray.push({\n        age: Observable(1)\n      });\n      observableArray()[0].age(5);\n      return assert.equal(dynamicObservable().length, 1);\n    });\n    it(\"should work with context\", function() {\n      var model;\n      model = {\n        a: Observable(\"Hello\"),\n        b: Observable(\"there\")\n      };\n      model.c = Observable(function() {\n        return \"\" + (this.a()) + \" \" + (this.b());\n      }, model);\n      assert.equal(model.c(), \"Hello there\");\n      model.b(\"world\");\n      return assert.equal(model.c(), \"Hello world\");\n    });\n    it(\"should be ok even if the function throws an exception\", function() {\n      assert.throws(function() {\n        var t;\n        return t = Observable(function() {\n          throw \"wat\";\n        });\n      });\n      return assert.equal(global.OBSERVABLE_ROOT_HACK.length, 0);\n    });\n    it(\"should have an each method\", function() {\n      var o;\n      o = Observable(function() {});\n      return assert(o.each());\n    });\n    it(\"should not invoke when returning undefined\", function() {\n      var o;\n      o = Observable(function() {});\n      return o.each(function() {\n        return assert(false);\n      });\n    });\n    it(\"should invoke when returning any defined value\", function(done) {\n      var o;\n      o = Observable(function() {\n        return 5;\n      });\n      return o.each(function(n) {\n        assert.equal(n, 5);\n        return done();\n      });\n    });\n    it(\"should work on an array dependency\", function() {\n      var last, o, oA;\n      oA = Observable([1, 2, 3]);\n      o = Observable(function() {\n        return oA()[0];\n      });\n      last = Observable(function() {\n        return oA()[oA().length - 1];\n      });\n      assert.equal(o(), 1);\n      oA.unshift(0);\n      assert.equal(o(), 0);\n      oA.push(4);\n      return assert.equal(last(), 4, \"Last should be 4\");\n    });\n    it(\"should work with multiple dependencies\", function() {\n      var checked, first, letter, second;\n      letter = Observable(\"A\");\n      checked = function() {\n        var l;\n        l = letter();\n        return this.name().indexOf(l) === 0;\n      };\n      first = {\n        name: Observable(\"Andrew\")\n      };\n      first.checked = Observable(checked, first);\n      second = {\n        name: Observable(\"Benjamin\")\n      };\n      second.checked = Observable(checked, second);\n      assert.equal(first.checked(), true);\n      assert.equal(second.checked(), false);\n      assert.equal(letter.listeners.length, 2);\n      letter(\"B\");\n      assert.equal(first.checked(), false);\n      return assert.equal(second.checked(), true);\n    });\n    it(\"shouldn't double count dependencies\", function() {\n      var count, dep, o;\n      dep = Observable(\"yo\");\n      o = Observable(function() {\n        dep();\n        dep();\n        return dep();\n      });\n      count = 0;\n      o.observe(function() {\n        return count += 1;\n      });\n      dep('heyy');\n      return assert.equal(count, 1);\n    });\n    it(\"should work with nested observable construction\", function() {\n      var gen, o;\n      gen = Observable(function() {\n        return Observable(\"Duder\");\n      });\n      o = gen();\n      assert.equal(o(), \"Duder\");\n      o(\"wat\");\n      return assert.equal(o(), \"wat\");\n    });\n    describe(\"Scoping\", function() {\n      return it(\"should be scoped to optional context\", function(done) {\n        var model;\n        model = {\n          firstName: Observable(\"Duder\"),\n          lastName: Observable(\"Man\")\n        };\n        model.name = Observable(function() {\n          return \"\" + (this.firstName()) + \" \" + (this.lastName());\n        }, model);\n        model.name.observe(function(newValue) {\n          assert.equal(newValue, \"Duder Bro\");\n          return done();\n        });\n        return model.lastName(\"Bro\");\n      });\n    });\n    describe(\"concat\", function() {\n      it(\"should work with a single observable\", function() {\n        var observable, observableArray;\n        observable = Observable(\"something\");\n        observableArray = Observable.concat(observable);\n        assert.equal(observableArray.last(), \"something\");\n        observable(\"something else\");\n        return assert.equal(observableArray.last(), \"something else\");\n      });\n      it(\"should work with an undefined observable\", function() {\n        var observable, observableArray;\n        observable = Observable(void 0);\n        observableArray = Observable.concat(observable);\n        assert.equal(observableArray.size(), 0);\n        observable(\"defined\");\n        return assert.equal(observableArray.size(), 1);\n      });\n      it(\"should work with undefined\", function() {\n        var observableArray;\n        observableArray = Observable.concat(void 0);\n        return assert.equal(observableArray.size(), 0);\n      });\n      it(\"should work with []\", function() {\n        var observableArray;\n        observableArray = Observable.concat([]);\n        return assert.equal(observableArray.size(), 0);\n      });\n      it(\"should return an observable array that changes based on changes in inputs\", function() {\n        var item, letters, nullable, numbers, observableArray;\n        numbers = Observable([1, 2, 3]);\n        letters = Observable([\"a\", \"b\", \"c\"]);\n        item = Observable({});\n        nullable = Observable(null);\n        observableArray = Observable.concat(numbers, \"literal\", letters, item, nullable);\n        assert.equal(observableArray().length, 3 + 1 + 3 + 1);\n        assert.equal(observableArray()[0], 1);\n        assert.equal(observableArray()[3], \"literal\");\n        assert.equal(observableArray()[4], \"a\");\n        assert.equal(observableArray()[7], item());\n        numbers.push(4);\n        assert.equal(observableArray().length, 9);\n        nullable(\"cool\");\n        return assert.equal(observableArray().length, 10);\n      });\n      it(\"should work with observable functions that return arrays\", function() {\n        var computedArray, item, observableArray;\n        item = Observable(\"wat\");\n        computedArray = Observable(function() {\n          return [item()];\n        });\n        observableArray = Observable.concat(computedArray, computedArray);\n        assert.equal(observableArray().length, 2);\n        assert.equal(observableArray()[1], \"wat\");\n        item(\"yolo\");\n        return assert.equal(observableArray()[1], \"yolo\");\n      });\n      it(\"should have a push method\", function() {\n        var observable, observableArray;\n        observableArray = Observable.concat();\n        observable = Observable(\"hey\");\n        observableArray.push(observable);\n        assert.equal(observableArray()[0], \"hey\");\n        observable(\"wat\");\n        assert.equal(observableArray()[0], \"wat\");\n        observableArray.push(\"cool\");\n        observableArray.push(\"radical\");\n        return assert.equal(observableArray().length, 3);\n      });\n      it(\"should be observable\", function(done) {\n        var observableArray;\n        observableArray = Observable.concat();\n        observableArray.observe(function(items) {\n          assert.equal(items.length, 3);\n          return done();\n        });\n        return observableArray.push([\"A\", \"B\", \"C\"]);\n      });\n      return it(\"should have an each method\", function() {\n        var n, observableArray;\n        observableArray = Observable.concat([\"A\", \"B\", \"C\"]);\n        n = 0;\n        observableArray.each(function() {\n          return n += 1;\n        });\n        return assert.equal(n, 3);\n      });\n    });\n    return describe(\"nesting dependencies\", function() {\n      return it(\"should update the correct observable\", function() {\n        var a, b, results;\n        a = Observable(\"a\");\n        b = Observable(\"b\");\n        results = Observable(function() {\n          var r;\n          r = Observable.concat();\n          r.push(a);\n          r.push(b);\n          return r;\n        });\n        assert.equal(results().first(), \"a\");\n        a(\"newA\");\n        return assert.equal(results().first(), \"newA\");\n      });\n    });\n  });\n\n}).call(this);\n",
          "type": "blob"
        }
      },
      "progenitor": {
        "url": "https://danielx.net/editor/"
      },
      "version": "0.3.7",
      "entryPoint": "main",
      "repository": {
        "branch": "master",
        "default_branch": "master",
        "full_name": "distri/observable",
        "homepage": "http://observable.us",
        "description": "",
        "html_url": "https://github.com/distri/observable",
        "url": "https://api.github.com/repos/distri/observable",
        "publishBranch": "gh-pages"
      },
      "dependencies": {}
    },
    "postmaster": {
      "source": {
        "LICENSE": {
          "path": "LICENSE",
          "content": "The MIT License (MIT)\n\nCopyright (c) 2013 distri\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\nthe Software, and to permit persons to whom the Software is furnished to do so,\nsubject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\nFOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\nCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\nIN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\nCONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n",
          "mode": "100644",
          "type": "blob"
        },
        "README.md": {
          "path": "README.md",
          "content": "postmaster\n==========\n\nSend and receive `postMessage` commands using promises to handle the results.\n",
          "mode": "100644",
          "type": "blob"
        },
        "main.coffee": {
          "path": "main.coffee",
          "content": "###\n\nPostmaster wraps the `postMessage` API with promises.\n\n###\n\ndefaultReceiver = self\nackTimeout = 1000\n\nmodule.exports = Postmaster = (self={}) ->\n  send = (data) ->\n    target = self.remoteTarget()\n    if !Worker? or target instanceof Worker\n      target.postMessage data\n    else\n      target.postMessage data, \"*\"\n\n  dominant = Postmaster.dominant()\n  self.remoteTarget ?= -> dominant\n  self.receiver ?= -> defaultReceiver\n  self.ackTimeout ?= -> ackTimeout\n\n  self.receiver().addEventListener \"message\", (event) ->\n    # Only listening to messages from `opener`\n    if event.source is self.remoteTarget() or !event.source\n      data = event.data\n      {type, method, params, id} = data\n\n      switch type\n        when \"ack\"\n          pendingResponses[id]?.ack = true\n        when \"response\"\n          pendingResponses[id].resolve data.result\n        when \"error\"\n          pendingResponses[id].reject data.error\n        when \"message\"\n          send\n            type: \"ack\"\n            id: id\n\n          Promise.resolve()\n          .then ->\n            if typeof self[method] is \"function\"\n              self[method](params...)\n            else\n              throw new Error \"`#{method}` is not a function\"\n          .then (result) ->\n            send\n              type: \"response\"\n              id: id\n              result: result\n          .catch (error) ->\n            if typeof error is \"string\"\n              message = error\n            else\n              message = error.message\n\n            send\n              type: \"error\"\n              id: id\n              error:\n                message: message\n                stack: error.stack\n\n  pendingResponses = {}\n  remoteId = 0\n\n  self.invokeRemote = (method, params...) ->\n    id = remoteId++\n\n    send\n      type: \"message\"\n      method: method\n      params: params\n      id: id\n\n    new Promise (resolve, reject) ->\n      clear = ->\n        clearTimeout pendingResponses[id].timeout\n        delete pendingResponses[id]\n\n      ackWait = self.ackTimeout()\n      timeout = setTimeout ->\n        pendingResponse = pendingResponses[id]\n        if pendingResponse and !pendingResponse.ack\n          clear()\n          reject new Error \"No ack received within #{ackWait}\"\n      , ackWait\n\n      pendingResponses[id] =\n        timeout: timeout\n        resolve: (result) ->\n          clear()\n          resolve(result)\n        reject: (error) ->\n          clear()\n          reject(error)\n\n  return self\n\nPostmaster.dominant = ->\n  if window? # iframe or child window context\n    opener or ((parent != window) and parent) or undefined\n  else # Web Worker Context\n    self\n\nreturn Postmaster\n",
          "mode": "100644",
          "type": "blob"
        },
        "pixie.cson": {
          "path": "pixie.cson",
          "content": "version: \"0.5.0\"\n",
          "mode": "100644",
          "type": "blob"
        },
        "test/postmaster.coffee": {
          "path": "test/postmaster.coffee",
          "content": "Postmaster = require \"../main\"\n\nscriptContent = ->\n  fn = ->\n    pm = Postmaster()\n    pm.echo = (value) ->\n      return value\n    pm.throws = ->\n      throw new Error(\"This always throws\")\n    pm.promiseFail = ->\n      Promise.reject new Error \"This is a failed promise\"\n\n  \"\"\"\n    var module = {};\n    Postmaster = #{PACKAGE.distribution.main.content};\n    (#{fn.toString()})();\n  \"\"\"\n\ninitWindow = (targetWindow) ->\n  targetWindow.document.write \"<script>#{scriptContent()}<\\/script>\"\n\ndescribe \"Postmaster\", ->\n  it \"should work with openened windows\", (done) ->\n    childWindow = open(\"\", null, \"width=200,height=200\")\n\n    initWindow(childWindow)\n\n    postmaster = Postmaster()\n    postmaster.remoteTarget = -> childWindow\n    postmaster.invokeRemote \"echo\", 5\n    .then (result) ->\n      assert.equal result, 5\n    .then ->\n      done()\n    , (error) ->\n      done(error)\n    .then ->\n      childWindow.close()\n\n  it \"should work with iframes\", (done) ->\n    iframe = document.createElement('iframe')\n    document.body.appendChild(iframe)\n\n    childWindow = iframe.contentWindow\n    initWindow(childWindow)\n\n    postmaster = Postmaster()\n    postmaster.remoteTarget = -> childWindow\n    postmaster.invokeRemote \"echo\", 17\n    .then (result) ->\n      assert.equal result, 17\n    .then ->\n      done()\n    , (error) ->\n      done(error)\n    .then ->\n      iframe.remove()\n\n  it \"should handle the remote call throwing errors\", (done) ->\n    iframe = document.createElement('iframe')\n    document.body.appendChild(iframe)\n\n    childWindow = iframe.contentWindow\n    initWindow(childWindow)\n\n    postmaster = Postmaster()\n    postmaster.remoteTarget = -> childWindow\n    postmaster.invokeRemote \"throws\"\n    .catch (error) ->\n      done()\n    .then ->\n      iframe.remove()\n\n  it \"should throwing a useful error when the remote doesn't define the function\", (done) ->\n    iframe = document.createElement('iframe')\n    document.body.appendChild(iframe)\n\n    childWindow = iframe.contentWindow\n    initWindow(childWindow)\n\n    postmaster = Postmaster()\n    postmaster.remoteTarget = -> childWindow\n    postmaster.invokeRemote \"someUndefinedFunction\"\n    .catch (error) ->\n      done()\n    .then ->\n      iframe.remove()\n\n  it \"should handle the remote call returning failed promises\", (done) ->\n    iframe = document.createElement('iframe')\n    document.body.appendChild(iframe)\n\n    childWindow = iframe.contentWindow\n    initWindow(childWindow)\n\n    postmaster = Postmaster()\n    postmaster.remoteTarget = -> childWindow\n    postmaster.invokeRemote \"promiseFail\"\n    .catch (error) ->\n      done()\n    .then ->\n      iframe.remove()\n\n  it \"should be able to go around the world\", (done) ->\n    iframe = document.createElement('iframe')\n    document.body.appendChild(iframe)\n\n    childWindow = iframe.contentWindow\n    initWindow(childWindow)\n\n    postmaster = Postmaster()\n    postmaster.remoteTarget = -> childWindow\n    postmaster.yolo = (txt) ->\n      \"heyy #{txt}\"\n    postmaster.invokeRemote \"invokeRemote\", \"yolo\", \"cool\"\n    .then (result) ->\n      assert.equal result, \"heyy cool\"\n    .then ->\n      done()\n    , (error) ->\n      done(error)\n    .then ->\n      iframe.remove()\n\n  it \"should work with web workers\", (done) ->\n    blob = new Blob [scriptContent()]\n    jsUrl = URL.createObjectURL(blob)\n\n    worker = new Worker(jsUrl)\n\n    base =\n      remoteTarget: -> worker\n      receiver: -> worker\n\n    postmaster = Postmaster(base)\n    postmaster.invokeRemote \"echo\", 17\n    .then (result) ->\n      assert.equal result, 17\n    .then ->\n      done()\n    , (error) ->\n      done(error)\n    .then ->\n      worker.terminate()\n\n  it \"should fail quickly when contacting a window that doesn't support Postmaster\", (done) ->\n    iframe = document.createElement('iframe')\n    document.body.appendChild(iframe)\n\n    childWindow = iframe.contentWindow\n    postmaster = Postmaster()\n    postmaster.remoteTarget = -> childWindow\n    postmaster.invokeRemote \"echo\", 5\n    .catch (e) ->\n      if e.message.match /no ack/i\n        done()\n      else\n        done(1)\n    .then ->\n      iframe.remove()\n",
          "mode": "100644",
          "type": "blob"
        }
      },
      "distribution": {
        "main": {
          "path": "main",
          "content": "\n/*\n\nPostmaster wraps the `postMessage` API with promises.\n */\n\n(function() {\n  var Postmaster, ackTimeout, defaultReceiver,\n    __slice = [].slice;\n\n  defaultReceiver = self;\n\n  ackTimeout = 1000;\n\n  module.exports = Postmaster = function(self) {\n    var dominant, pendingResponses, remoteId, send;\n    if (self == null) {\n      self = {};\n    }\n    send = function(data) {\n      var target;\n      target = self.remoteTarget();\n      if ((typeof Worker === \"undefined\" || Worker === null) || target instanceof Worker) {\n        return target.postMessage(data);\n      } else {\n        return target.postMessage(data, \"*\");\n      }\n    };\n    dominant = Postmaster.dominant();\n    if (self.remoteTarget == null) {\n      self.remoteTarget = function() {\n        return dominant;\n      };\n    }\n    if (self.receiver == null) {\n      self.receiver = function() {\n        return defaultReceiver;\n      };\n    }\n    if (self.ackTimeout == null) {\n      self.ackTimeout = function() {\n        return ackTimeout;\n      };\n    }\n    self.receiver().addEventListener(\"message\", function(event) {\n      var data, id, method, params, type, _ref;\n      if (event.source === self.remoteTarget() || !event.source) {\n        data = event.data;\n        type = data.type, method = data.method, params = data.params, id = data.id;\n        switch (type) {\n          case \"ack\":\n            return (_ref = pendingResponses[id]) != null ? _ref.ack = true : void 0;\n          case \"response\":\n            return pendingResponses[id].resolve(data.result);\n          case \"error\":\n            return pendingResponses[id].reject(data.error);\n          case \"message\":\n            send({\n              type: \"ack\",\n              id: id\n            });\n            return Promise.resolve().then(function() {\n              if (typeof self[method] === \"function\") {\n                return self[method].apply(self, params);\n              } else {\n                throw new Error(\"`\" + method + \"` is not a function\");\n              }\n            }).then(function(result) {\n              return send({\n                type: \"response\",\n                id: id,\n                result: result\n              });\n            })[\"catch\"](function(error) {\n              var message;\n              if (typeof error === \"string\") {\n                message = error;\n              } else {\n                message = error.message;\n              }\n              return send({\n                type: \"error\",\n                id: id,\n                error: {\n                  message: message,\n                  stack: error.stack\n                }\n              });\n            });\n        }\n      }\n    });\n    pendingResponses = {};\n    remoteId = 0;\n    self.invokeRemote = function() {\n      var id, method, params;\n      method = arguments[0], params = 2 <= arguments.length ? __slice.call(arguments, 1) : [];\n      id = remoteId++;\n      send({\n        type: \"message\",\n        method: method,\n        params: params,\n        id: id\n      });\n      return new Promise(function(resolve, reject) {\n        var ackWait, clear, timeout;\n        clear = function() {\n          clearTimeout(pendingResponses[id].timeout);\n          return delete pendingResponses[id];\n        };\n        ackWait = self.ackTimeout();\n        timeout = setTimeout(function() {\n          var pendingResponse;\n          pendingResponse = pendingResponses[id];\n          if (pendingResponse && !pendingResponse.ack) {\n            clear();\n            return reject(new Error(\"No ack received within \" + ackWait));\n          }\n        }, ackWait);\n        return pendingResponses[id] = {\n          timeout: timeout,\n          resolve: function(result) {\n            clear();\n            return resolve(result);\n          },\n          reject: function(error) {\n            clear();\n            return reject(error);\n          }\n        };\n      });\n    };\n    return self;\n  };\n\n  Postmaster.dominant = function() {\n    if (typeof window !== \"undefined\" && window !== null) {\n      return opener || ((parent !== window) && parent) || void 0;\n    } else {\n      return self;\n    }\n  };\n\n  return Postmaster;\n\n}).call(this);\n",
          "type": "blob"
        },
        "pixie": {
          "path": "pixie",
          "content": "module.exports = {\"version\":\"0.5.0\"};",
          "type": "blob"
        },
        "test/postmaster": {
          "path": "test/postmaster",
          "content": "(function() {\n  var Postmaster, initWindow, scriptContent;\n\n  Postmaster = require(\"../main\");\n\n  scriptContent = function() {\n    var fn;\n    fn = function() {\n      var pm;\n      pm = Postmaster();\n      pm.echo = function(value) {\n        return value;\n      };\n      pm.throws = function() {\n        throw new Error(\"This always throws\");\n      };\n      return pm.promiseFail = function() {\n        return Promise.reject(new Error(\"This is a failed promise\"));\n      };\n    };\n    return \"var module = {};\\nPostmaster = \" + PACKAGE.distribution.main.content + \";\\n(\" + (fn.toString()) + \")();\";\n  };\n\n  initWindow = function(targetWindow) {\n    return targetWindow.document.write(\"<script>\" + (scriptContent()) + \"<\\/script>\");\n  };\n\n  describe(\"Postmaster\", function() {\n    it(\"should work with openened windows\", function(done) {\n      var childWindow, postmaster;\n      childWindow = open(\"\", null, \"width=200,height=200\");\n      initWindow(childWindow);\n      postmaster = Postmaster();\n      postmaster.remoteTarget = function() {\n        return childWindow;\n      };\n      return postmaster.invokeRemote(\"echo\", 5).then(function(result) {\n        return assert.equal(result, 5);\n      }).then(function() {\n        return done();\n      }, function(error) {\n        return done(error);\n      }).then(function() {\n        return childWindow.close();\n      });\n    });\n    it(\"should work with iframes\", function(done) {\n      var childWindow, iframe, postmaster;\n      iframe = document.createElement('iframe');\n      document.body.appendChild(iframe);\n      childWindow = iframe.contentWindow;\n      initWindow(childWindow);\n      postmaster = Postmaster();\n      postmaster.remoteTarget = function() {\n        return childWindow;\n      };\n      return postmaster.invokeRemote(\"echo\", 17).then(function(result) {\n        return assert.equal(result, 17);\n      }).then(function() {\n        return done();\n      }, function(error) {\n        return done(error);\n      }).then(function() {\n        return iframe.remove();\n      });\n    });\n    it(\"should handle the remote call throwing errors\", function(done) {\n      var childWindow, iframe, postmaster;\n      iframe = document.createElement('iframe');\n      document.body.appendChild(iframe);\n      childWindow = iframe.contentWindow;\n      initWindow(childWindow);\n      postmaster = Postmaster();\n      postmaster.remoteTarget = function() {\n        return childWindow;\n      };\n      return postmaster.invokeRemote(\"throws\")[\"catch\"](function(error) {\n        return done();\n      }).then(function() {\n        return iframe.remove();\n      });\n    });\n    it(\"should throwing a useful error when the remote doesn't define the function\", function(done) {\n      var childWindow, iframe, postmaster;\n      iframe = document.createElement('iframe');\n      document.body.appendChild(iframe);\n      childWindow = iframe.contentWindow;\n      initWindow(childWindow);\n      postmaster = Postmaster();\n      postmaster.remoteTarget = function() {\n        return childWindow;\n      };\n      return postmaster.invokeRemote(\"someUndefinedFunction\")[\"catch\"](function(error) {\n        return done();\n      }).then(function() {\n        return iframe.remove();\n      });\n    });\n    it(\"should handle the remote call returning failed promises\", function(done) {\n      var childWindow, iframe, postmaster;\n      iframe = document.createElement('iframe');\n      document.body.appendChild(iframe);\n      childWindow = iframe.contentWindow;\n      initWindow(childWindow);\n      postmaster = Postmaster();\n      postmaster.remoteTarget = function() {\n        return childWindow;\n      };\n      return postmaster.invokeRemote(\"promiseFail\")[\"catch\"](function(error) {\n        return done();\n      }).then(function() {\n        return iframe.remove();\n      });\n    });\n    it(\"should be able to go around the world\", function(done) {\n      var childWindow, iframe, postmaster;\n      iframe = document.createElement('iframe');\n      document.body.appendChild(iframe);\n      childWindow = iframe.contentWindow;\n      initWindow(childWindow);\n      postmaster = Postmaster();\n      postmaster.remoteTarget = function() {\n        return childWindow;\n      };\n      postmaster.yolo = function(txt) {\n        return \"heyy \" + txt;\n      };\n      return postmaster.invokeRemote(\"invokeRemote\", \"yolo\", \"cool\").then(function(result) {\n        return assert.equal(result, \"heyy cool\");\n      }).then(function() {\n        return done();\n      }, function(error) {\n        return done(error);\n      }).then(function() {\n        return iframe.remove();\n      });\n    });\n    it(\"should work with web workers\", function(done) {\n      var base, blob, jsUrl, postmaster, worker;\n      blob = new Blob([scriptContent()]);\n      jsUrl = URL.createObjectURL(blob);\n      worker = new Worker(jsUrl);\n      base = {\n        remoteTarget: function() {\n          return worker;\n        },\n        receiver: function() {\n          return worker;\n        }\n      };\n      postmaster = Postmaster(base);\n      return postmaster.invokeRemote(\"echo\", 17).then(function(result) {\n        return assert.equal(result, 17);\n      }).then(function() {\n        return done();\n      }, function(error) {\n        return done(error);\n      }).then(function() {\n        return worker.terminate();\n      });\n    });\n    return it(\"should fail quickly when contacting a window that doesn't support Postmaster\", function(done) {\n      var childWindow, iframe, postmaster;\n      iframe = document.createElement('iframe');\n      document.body.appendChild(iframe);\n      childWindow = iframe.contentWindow;\n      postmaster = Postmaster();\n      postmaster.remoteTarget = function() {\n        return childWindow;\n      };\n      return postmaster.invokeRemote(\"echo\", 5)[\"catch\"](function(e) {\n        if (e.message.match(/no ack/i)) {\n          return done();\n        } else {\n          return done(1);\n        }\n      }).then(function() {\n        return iframe.remove();\n      });\n    });\n  });\n\n}).call(this);\n",
          "type": "blob"
        }
      },
      "progenitor": {
        "url": "https://danielx.net/editor/"
      },
      "version": "0.5.0",
      "entryPoint": "main",
      "repository": {
        "branch": "v0.5.0",
        "default_branch": "master",
        "full_name": "distri/postmaster",
        "homepage": null,
        "description": "Send and receive postMessage commands.",
        "html_url": "https://github.com/distri/postmaster",
        "url": "https://api.github.com/repos/distri/postmaster",
        "publishBranch": "gh-pages"
      },
      "dependencies": {}
    }
  }
}