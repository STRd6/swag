{
  "source": {
    "LICENSE": {
      "path": "LICENSE",
      "content": "The MIT License (MIT)\n\nCopyright (c) 2015 Daniel X Moore\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n",
      "mode": "100644",
      "type": "blob"
    },
    "README.md": {
      "path": "README.md",
      "content": "# swag\nServerless Working Applications Group\n",
      "mode": "100644",
      "type": "blob"
    },
    "TODO.md": {
      "path": "TODO.md",
      "content": "TODO\n====\n\nObserve and display auth status (user name/email)\n\nHandle auth refresh when credentials expire\n\nEmbed pixel editor (load and save files)\n\nTOLater\n-------\n\nLog out button\n\nMaintain identity id from unauth -> auth user\n\n\nDone\n----\n\nDelete File\n\nAuto-login\n\nDisplay Filetree\n\nExpand/collapse folders\n",
      "mode": "100644",
      "type": "blob"
    },
    "amazon_login.coffee": {
      "path": "amazon_login.coffee",
      "content": "window.onAmazonLoginReady = ->\n  amazon.Login.setClientId('amzn1.application-oa2-client.29b275f9076a406c90a66b025fab96bf')\n\ndo (d=document) ->\n  r = d.createElement 'div'\n  r.id = \"amazon-root\"\n  d.body.appendChild r\n  a = d.createElement('script')\n  a.type = 'text/javascript'\n  a.async = true\n  a.id = 'amazon-login-sdk'\n  a.src = 'https://api-cdn.amazon.com/sdk/login1.js'\n  r.appendChild(a)\n",
      "mode": "100644",
      "type": "blob"
    },
    "dynamo_stuff.coffee": {
      "path": "dynamo_stuff.coffee",
      "content": "{pinvoke} = require \"./util\"\n\nwriteToDynamoDB = (table, id, path, sha) ->\n  time = \"#{+new Date}\"\n\n  # Write the item to the table\n  params =\n    Item:\n      owner: {S: id}\n      path: {S: path}\n      created_at: {S: time}\n      sha: {S: sha}\n\n  pinvoke table, \"putItem\", params\n\nqueryDynamoDB = (table, id) ->\n  # TODO: Start from\n  # TODO: Additional requests when results are incomplete\n  table = table\n\n  params =\n    AttributesToGet: [\n      \"path\"\n      \"sha\"\n    ]\n    KeyConditions:\n      owner:\n        ComparisonOperator: \"EQ\"\n        AttributeValueList: [S: id]\n\n  pinvoke table, \"query\", params\n\nreadFromDynamoDB = (table, id, path) ->\n  params =\n    Key:\n      owner: {S: id}\n      path: {S: path}\n\n  # Read the item from the table\n  pinvoke table, \"getItem\", params\n",
      "mode": "100644",
      "type": "blob"
    },
    "fs.coffee": {
      "path": "fs.coffee",
      "content": "{log, pinvoke, startsWith, endsWith} = require \"./util\"\n\ndelimiter = \"/\"\n\nstatus = (response) ->\n  if response.status >= 200 && response.status < 300\n    return response\n  else\n    throw response\n\njson = (response) ->\n  response.json()\n\nblob = (response) ->\n  response.blob()\n\nuploadToS3 = (bucket, key, file, options={}) ->\n  {cacheControl} = options\n\n  cacheControl ?= 0\n\n  pinvoke bucket, \"putObject\",\n    Key: key\n    ContentType: file.type\n    Body: file\n    CacheControl: \"max-age=#{cacheControl}\"\n\ngetFromS3 = (bucket, key) ->\n  fetch(\"https://#{bucket.config.params.Bucket}.s3.amazonaws.com/#{key}\")\n  .then status\n  .then blob\n\ndeleteFromS3 = (bucket, key) ->\n  pinvoke bucket, \"deleteObject\",\n    Key: key\n\nlist = (bucket, id, dir) ->\n  unless startsWith dir, delimiter\n    dir = \"#{delimiter}#{dir}\"\n\n  unless endsWith dir, delimiter\n    dir = \"#{dir}#{delimiter}\"\n\n  prefix = \"#{id}#{dir}\"\n\n  pinvoke bucket, \"listObjects\",\n    Prefix: prefix\n    Delimiter: delimiter\n  .then (result) ->\n    path: prefix.replace(id, \"\")\n    folders: result.CommonPrefixes.map (p) ->\n      p.Prefix.replace(prefix, \"\")\n    files: result.Contents.map (o) ->\n      o.Key.replace(prefix, \"\")\n\nmodule.exports = (id, bucket) ->\n  get: (path) ->\n    unless startsWith path, delimiter\n      path = delimiter + path\n\n    key = \"#{id}#{path}\"\n\n    getFromS3(bucket, key)\n\n  put: (path, file) ->\n    unless startsWith path, delimiter\n      path = delimiter + path\n\n    key = \"#{id}#{path}\"\n\n    uploadToS3 bucket, key, file\n\n  delete: (path) ->\n    unless startsWith path, delimiter\n      path = delimiter + path\n\n    key = \"#{id}#{path}\"\n\n    deleteFromS3 bucket, key\n\n  list: (dir=\"/\") ->\n    list bucket, id, dir\n",
      "mode": "100644",
      "type": "blob"
    },
    "lib/directory_upload.js": {
      "path": "lib/directory_upload.js",
      "content": "/**********************************\n Directory Upload Proposal Polyfill\n Author: Ali Alabbas (Microsoft)\n **********************************/\n(function() {\n\t// Do not proceed with the polyfill if Directory interface is already natively available,\n\t// or if webkitdirectory is not supported (i.e. not Chrome, since the polyfill only works in Chrome)\n\tif (window.Directory || !('webkitdirectory' in document.createElement('input') && 'webkitGetAsEntry' in DataTransferItem.prototype)) {\n\t\treturn;\n\t}\n\n\tvar directoryAttr = 'directory',\n\t\tgetFilesMethod = 'getFilesAndDirectories',\n\t\tisSupportedProp = 'isFilesAndDirectoriesSupported',\n\t\tchooseDirMethod = 'chooseDirectory';\n\n\tvar separator = '/';\n\n\tvar Directory = function() {\n\t\tthis.name = '';\n\t\tthis.path = separator;\n\t\tthis._children = {};\n\t\tthis._items = false;\n\t};\n\n\tDirectory.prototype[getFilesMethod] = function() {\n\t\tvar that = this;\n\n\t\t// from drag and drop and file input drag and drop (webkitEntries)\n\t\tif (this._items) {\n\t\t\tvar getItem = function(entry) {\n\t\t\t\tif (entry.isDirectory) {\n\t\t\t\t\tvar dir = new Directory();\n\t\t\t\t\tdir.name = entry.name;\n\t\t\t\t\tdir.path = entry.fullPath;\n\t\t\t\t\tdir._items = entry;\n\n\t\t\t\t\treturn dir;\n\t\t\t\t} else {\n\t\t\t\t\treturn new Promise(function(resolve, reject) {\n\t\t\t\t\t\tentry.file(function(file) {\n\t\t\t\t\t\t\tresolve(file);\n\t\t\t\t\t\t}, reject);\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tif (this.path === separator) {\n\t\t\t\tvar promises = [];\n\n\t\t\t\tfor (var i = 0; i < this._items.length; i++) {\n\t\t\t\t\tvar entry;\n\n\t\t\t\t\t// from file input drag and drop (webkitEntries)\n\t\t\t\t\tif (this._items[i].isDirectory || this._items[i].isFile) {\n\t\t\t\t\t\tentry = this._items[i];\n\t\t\t\t\t} else {\n\t\t\t\t\t\tentry = this._items[i].webkitGetAsEntry();\n\t\t\t\t\t}\n\n\t\t\t\t\tpromises.push(getItem(entry));\n\t\t\t\t}\n\n\t\t\t\treturn Promise.all(promises);\n\t\t\t} else {\n\t\t\t\treturn new Promise(function(resolve, reject) {\n\t\t\t\t\tthat._items.createReader().readEntries(function(entries) {\n\t\t\t\t\t\tvar promises = [];\n\n\t\t\t\t\t\tfor (var i = 0; i < entries.length; i++) {\n\t\t\t\t\t\t\tvar entry = entries[i];\n\n\t\t\t\t\t\t\tpromises.push(getItem(entry));\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tresolve(Promise.all(promises));\n\t\t\t\t\t}, reject);\n\t\t\t\t});\n\t\t\t}\n\t\t// from file input manual selection\n\t\t} else {\n\t\t\tvar arr = [];\n\n\t\t\tfor (var child in this._children) {\n\t\t\t\tarr.push(this._children[child]);\n\t\t\t}\n\n\t\t\treturn Promise.resolve(arr);\n\t\t}\n\t};\n\n\t// set blank as default for all inputs\n\tHTMLInputElement.prototype[getFilesMethod] = function() {\n\t\treturn Promise.resolve([]);\n\t};\n\n\t// if OS is Mac, the combined directory and file picker is supported\n\tHTMLInputElement.prototype[isSupportedProp] = navigator.appVersion.indexOf(\"Mac\") !== -1;\n\n\tHTMLInputElement.prototype[directoryAttr] = undefined;\n\tHTMLInputElement.prototype[chooseDirMethod] = undefined;\n\n\t// expose Directory interface to window\n\twindow.Directory = Directory;\n\n\t/********************\n\t **** File Input ****\n\t ********************/\n\tvar convertInputs = function(nodes) {\n\t\tvar recurse = function(dir, path, fullPath, file) {\n\t\t\tvar pathPieces = path.split(separator);\n\t\t\tvar dirName = pathPieces.shift();\n\n\t\t\tif (pathPieces.length > 0) {\n\t\t\t\tvar subDir = new Directory();\n\t\t\t\tsubDir.name = dirName;\n\t\t\t\tsubDir.path = separator + fullPath;\n\n\t\t\t\tif (!dir._children[subDir.name]) {\n\t\t\t\t\tdir._children[subDir.name] = subDir;\n\t\t\t\t}\n\n\t\t\t\trecurse(dir._children[subDir.name], pathPieces.join(separator), fullPath, file);\n\t\t\t} else {\n\t\t\t\tdir._children[file.name] = file;\n\t\t\t}\n\t\t};\n\n\t\tfor (var i = 0; i < nodes.length; i++) {\n\t\t\tvar node = nodes[i];\n\n\t\t\tif (node.tagName === 'INPUT' && node.type === 'file') {\n\t\t\t\t// force multiple selection for default behavior\n\t\t\t\tif (!node.hasAttribute('multiple')) {\n\t\t\t\t\tnode.setAttribute('multiple', '');\n\t\t\t\t}\n\n\t\t\t\tvar shadow = node.createShadowRoot();\n\n\t\t\t\tnode[chooseDirMethod] = function() {\n\t\t\t\t\t// can't do this without an actual click\n\t\t\t\t\tconsole.log('This is unsupported. For security reasons the dialog cannot be triggered unless it is a response to some user triggered event such as a click on some other element.');\n\t\t\t\t};\n\n\t\t\t\tshadow.innerHTML = '<div style=\"border: 1px solid #999; padding: 3px; width: 235px; box-sizing: content-box; font-size: 14px; height: 21px;\">'\n\t\t\t\t\t+ '<div id=\"fileButtons\" style=\"box-sizing: content-box;\">'\n\t\t\t\t\t+ '<button id=\"button1\" style=\"width: 100px; box-sizing: content-box;\">Choose file(s)...</button>'\n\t\t\t\t\t+ '<button id=\"button2\" style=\"width: 100px; box-sizing: content-box; margin-left: 3px;\">Choose folder...</button>'\n\t\t\t\t\t+ '</div>'\n\t\t\t\t\t+ '<div id=\"filesChosen\" style=\"padding: 3px; display: none; box-sizing: content-box;\"><span id=\"filesChosenText\">files selected...</span>'\n\t\t\t\t\t+ '<a id=\"clear\" title=\"Clear selection\" href=\"javascript:;\" style=\"text-decoration: none; float: right; margin: -3px -1px 0 0; padding: 3px; font-weight: bold; font-size: 16px; color:#999; box-sizing: content-box;\">&times;</a>'\n\t\t\t\t\t+ '</div>'\n\t\t\t\t\t+ '</div>'\n\t\t\t\t\t+ '<input id=\"input1\" type=\"file\" multiple style=\"display: none;\">'\n\t\t\t\t\t+ '<input id=\"input2\" type=\"file\" webkitdirectory style=\"display: none;\">'\n\t\t\t\t\t+ '</div>';\n\n\t\t\t\tshadow.querySelector('#button1').onclick = function(e) {\n\t\t\t\t\te.preventDefault();\n\n\t\t\t\t\tshadow.querySelector('#input1').click();\n\t\t\t\t};\n\n\t\t\t\tshadow.querySelector('#button2').onclick = function(e) {\n\t\t\t\t\te.preventDefault();\n\n\t\t\t\t\tshadow.querySelector('#input2').click();\n\t\t\t\t};\n\n\t\t\t\tvar toggleView = function(defaultView, filesLength) {\n\t\t\t\t\tshadow.querySelector('#fileButtons').style.display = defaultView ? 'block' : 'none';\n\t\t\t\t\tshadow.querySelector('#filesChosen').style.display = defaultView ? 'none' : 'block';\n\n\t\t\t\t\tif (!defaultView) {\n\t\t\t\t\t\tshadow.querySelector('#filesChosenText').innerText = filesLength + ' file' + (filesLength > 1 ? 's' : '') + ' selected...';\n\t\t\t\t\t}\n\t\t\t\t};\n\n\t\t\t\tvar draggedAndDropped = false;\n\n\t\t\t\tvar getFiles = function() {\n\t\t\t\t\tvar files = node.files;\n\n\t\t\t\t\tif (draggedAndDropped) {\n\t\t\t\t\t\tfiles = node.webkitEntries;\n\t\t\t\t\t\tdraggedAndDropped = false;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (files.length === 0) {\n\t\t\t\t\t\t\tfiles = node.shadowRoot.querySelector('#input1').files;\n\n\t\t\t\t\t\t\tif (files.length === 0) {\n\t\t\t\t\t\t\t\tfiles = node.shadowRoot.querySelector('#input2').files;\n\n\t\t\t\t\t\t\t\tif (files.length === 0) {\n\t\t\t\t\t\t\t\t\tfiles = node.webkitEntries;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\treturn files;\n\t\t\t\t};\n\n\t\t\t\tvar changeHandler = function(e) {\n\t\t\t\t\tnode.dispatchEvent(new Event('change'));\n\n\t\t\t\t\ttoggleView(false, getFiles().length);\n\t\t\t\t};\n\n\t\t\t\tshadow.querySelector('#input1').onchange = shadow.querySelector('#input2').onchange = changeHandler;\n\n\t\t\t\tvar clear = function (e) {\n\t\t\t\t\ttoggleView(true);\n\n\t\t\t\t\tvar form = document.createElement('form');\n\t\t\t\t\tnode.parentNode.insertBefore(form, node);\n\t\t\t\t\tnode.parentNode.removeChild(node);\n\t\t\t\t\tform.appendChild(node);\n\t\t\t\t\tform.reset();\n\n\t\t\t\t\tform.parentNode.insertBefore(node, form);\n\t\t\t\t\tform.parentNode.removeChild(form);\n\n\t\t\t\t\t// reset does not instantly occur, need to give it some time\n\t\t\t\t\tsetTimeout(function() {\n\t\t\t\t\t\tnode.dispatchEvent(new Event('change'));\n\t\t\t\t\t}, 1);\n\t\t\t\t};\n\n\t\t\t\tshadow.querySelector('#clear').onclick = clear;\n\n\t\t\t\tnode.addEventListener('drop', function(e) {\n\t\t\t\t\tdraggedAndDropped = true;\n\t\t\t\t}, false);\n\n\t\t\t\tnode.addEventListener('change', function() {\n\t\t\t\t\tvar dir = new Directory();\n\n\t\t\t\t\tvar files = getFiles();\n\n\t\t\t\t\tif (files.length > 0) {\n\t\t\t\t\t\ttoggleView(false, files.length);\n\n\t\t\t\t\t\t// from file input drag and drop (webkitEntries)\n\t\t\t\t\t\tif (files[0].isFile || files[0].isDirectory) {\n\t\t\t\t\t\t\tdir._items = files;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tfor (var j = 0; j < files.length; j++) {\n\t\t\t\t\t\t\t\tvar file = files[j];\n\t\t\t\t\t\t\t\tvar path = file.webkitRelativePath;\n\t\t\t\t\t\t\t\tvar fullPath = path.substring(0, path.lastIndexOf(separator));\n\n\t\t\t\t\t\t\t\trecurse(dir, path, fullPath, file);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttoggleView(true, files.length);\n\t\t\t\t\t}\n\n\t\t\t\t\tthis[getFilesMethod] = function() {\n\t\t\t\t\t\treturn dir[getFilesMethod]();\n\t\t\t\t\t};\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t};\n\n\t// polyfill file inputs when the DOM loads\n\tdocument.addEventListener('DOMContentLoaded', function(event) {\n\t\tconvertInputs(document.getElementsByTagName('input'));\n\t});\n\n\t// polyfill file inputs that are created dynamically and inserted into the body\n\tvar observer = new MutationObserver(function(mutations, observer) {\n\t\tfor (var i = 0; i < mutations.length; i++) {\n\t\t\tif (mutations[i].addedNodes.length > 0) {\n\t\t\t\tconvertInputs(mutations[i].addedNodes);\n\t\t\t}\n\t\t}\n\t});\n\n\tobserver.observe(document.body, {childList: true, subtree: true});\n\n\t/***********************\n\t **** Drag and drop ****\n\t ***********************/\n\t// keep a reference to the original method\n\tvar _addEventListener = EventTarget.prototype.addEventListener;\n\n\tDataTransfer.prototype[getFilesMethod] = function() {\n\t\treturn Promise.resolve([]);\n\t};\n\n\tEventTarget.prototype.addEventListener = function(type, listener, useCapture) {\n\t\tif (type === 'drop') {\n\t\t\tvar _listener = listener;\n\n\t\t\tlistener = function(e) {\n\t\t\t\tvar dir = new Directory();\n\t\t\t\tdir._items = e.dataTransfer.items;\n\n\t\t\t\te.dataTransfer[getFilesMethod] = function() {\n\t\t\t\t\treturn dir[getFilesMethod]();\n\t\t\t\t};\n\n\t\t\t\t_listener(e);\n\t\t\t};\n\t\t}\n\n\t\t// call the original method\n\t\treturn _addEventListener.apply(this, arguments);\n\t};\n}());\n",
      "mode": "100644",
      "type": "blob"
    },
    "lib/drop.coffee": {
      "path": "lib/drop.coffee",
      "content": "module.exports = (element, handler) ->\n  cancel = (e) ->\n    e.preventDefault()\n    return false\n\n  element.addEventListener \"dragover\", cancel\n  element.addEventListener \"dragenter\", cancel\n  element.addEventListener \"drop\", (e) ->\n    e.preventDefault()\n\n    handler e\n",
      "mode": "100644",
      "type": "blob"
    },
    "lib/sha.coffee": {
      "path": "lib/sha.coffee",
      "content": "urlSafeBase64 = (base64) ->\n  base64.replace(/\\+/g, \"-\").replace(/\\//g, \"_\").replace(/\\=*$/, '')\n\narrayBufferToBase64 = (buffer) ->\n  bytes = new Uint8Array(buffer)\n\n  binary = \"\"\n\n  bytes.forEach (byte) ->\n    binary += String.fromCharCode(byte)\n\n  return btoa(binary)\n\nshaForBlob = (blob) ->\n  new Promise (resolve, reject) ->\n    reader = new FileReader\n\n    reader.onload = ->\n      buffer = reader.result\n      crypto.subtle.digest(\"SHA-256\", buffer)\n      .then resolve\n      .catch reject\n\n    reader.onerror = reject\n\n    reader.readAsArrayBuffer(blob)\n\ndemo = ->\n  [\"yolo\", \"duder\", \"hello\", \"wat\"].forEach (test) ->\n    blob = new Blob [test]\n\n    shaForBlob(blob)\n    .then arrayBufferToBase64\n    .then urlSafeBase64\n    .then log\n\nmodule.exports = (blob) ->\n  shaForBlob(blob)\n  .then arrayBufferToBase64\n  .then urlSafeBase64\n",
      "mode": "100644",
      "type": "blob"
    },
    "main.coffee": {
      "path": "main.coffee",
      "content": "\n\n# Add logins when creating Cognito credentials\n# http://docs.aws.amazon.com/cognito/latest/developerguide/authentication-flow.html\n# http://docs.aws.amazon.com/cognito/latest/developerguide/developer-authenticated-identities.html#updating-the-logins-map\n# Once you obtain an identity ID and session token from your backend, you will\n# to pass them into the AWS.CognitoIdentityCredentials provider. Here's an example:\n#AWS.config.credentials = new AWS.CognitoIdentityCredentials({\n   #IdentityPoolId: 'IDENTITY_POOL_ID',\n   #IdentityId: 'IDENTITY_ID_RETURNED_FROM_YOUR_PROVIDER',\n   #Logins: {\n      #'cognito-identity.amazonaws.com': 'TOKEN_RETURNED_FROM_YOUR_PROVIDER'\n   #}\n#});\n\nrequire \"./lib/directory_upload\"\n\nstyle = document.createElement \"style\"\nstyle.innerHTML = require \"./style\"\ndocument.head.appendChild style\n\n{log, emptyElement, pinvoke} = require \"./util\"\n\nDrop = require(\"./lib/drop\")\n\nOS = require \"./os\"\nos = OS()\n\nOSTemplate = require \"./templates/os\"\ndocument.body.appendChild OSTemplate os\n\ninitFileDrop = (element, processItem) ->\n  Drop element, (e) ->\n\n    handleFiles = (items, path=\"/\") ->\n      items.forEach (item) ->\n        if item.getFilesAndDirectories\n          item.getFilesAndDirectories().then (items) ->\n            handleFiles(items, item.path)\n        else\n          processItem item, path\n    e.dataTransfer.getFilesAndDirectories().then (items) ->\n      handleFiles(items)\n\ninitFileDrop document, (file, path) ->\n  # TODO: Why is this getting double slashes on single files?\n  key = \"#{path}/#{file.name}\".replace(/\\/+/, \"/\")\n  os.put key, file\n\nreceivedCredentials = ->\n  console.log AWS.config.credentials\n  id = AWS.config.credentials.identityId\n\n  document.body.removeChild document.querySelector('#LoginWithAmazon')\n\n  bucket = new AWS.S3\n    params:\n      Bucket: \"whimsy-fs\"\n\n  fs = require('./fs')(id, bucket)\n\n  os.attachFS fs\n\nAWS.config.update\n  region: 'us-east-1'\n\ntry\n  logins = JSON.parse localStorage.WHIMSY_FS_AWS_LOGIN\n\nAWS.config.credentials = new AWS.CognitoIdentityCredentials\n  IdentityPoolId: 'us-east-1:4fe22da5-bb5e-4a78-a260-74ae0a140bf9'\n  Logins: logins\n\nif logins\n  pinvoke AWS.config.credentials, \"get\"\n  .then receivedCredentials\n  .catch (e) ->\n    console.error e\n\nrequire \"./amazon_login\"\ndocument.body.appendChild require(\"./templates/login\")\n  click: ->\n    options = { scope : 'profile' }\n    amazon.Login.authorize options, (resp) ->\n      if !resp.error\n        console.log resp\n        token = resp.access_token\n        creds = AWS.config.credentials\n\n        logins =\n          'www.amazon.com': token\n        localStorage.WHIMSY_FS_AWS_LOGIN = JSON.stringify(logins)\n\n        creds.params.Logins = logins\n\n        creds.expired = true\n\n        queryUserInfo(token)\n\n        pinvoke AWS.config.credentials, \"get\"\n        .then receivedCredentials\n\nqueryUserInfo = (token) ->\n  fetch \"https://api.amazon.com/user/profile\",\n    headers:\n      Authorization: \"bearer #{token}\"\n      Accept: \"application/json\"\n  .then (response) ->\n    response.json()\n  .then (json) ->\n    console.log json\n  .catch (e) ->\n    console.error e\n\n",
      "mode": "100644",
      "type": "blob"
    },
    "os.coffee": {
      "path": "os.coffee",
      "content": "\nObservable = require \"observable\"\n\nTextEditor = require \"./text_editor\"\nPixelEditor = require \"./pixel_editor\"\n\nEditorTemplate = require \"./templates/editor\"\nFolderTemplate = require \"./templates/folder\"\nFolderPresenter = require \"./presenters/folder\"\n\nmodule.exports = ->\n  appHandlers =\n    \"^text\": (file, path) ->\n      editor = TextEditor(self)\n\n      reader = new FileReader\n\n      reader.onload = ->\n        editor.contents reader.result\n        editor.contentType file.type\n        editor.path path\n\n      reader.onerror = (e) ->\n        console.error e\n\n      reader.readAsText(file)\n\n      return EditorTemplate editor\n\n    \"^image\": (file, path) ->\n      # img = document.createElement \"img\"\n      # img.src = URL.createObjectURL(file)\n\n      return PixelEditor(self, file, path)\n\n  self =\n    editorElement: Observable()\n\n    fileTreeElement: Observable()\n\n    attachFS: (fs) ->\n      self.fileTreeElement FolderTemplate FolderPresenter {path: \"/\"}, fs, self\n\n      self.fs = -> fs\n\n    open: (path) ->\n      self.fs().get(path)\n      .then (file) ->\n        type = file.type\n        handled = false\n        Object.keys(appHandlers).forEach (matcher) ->\n          return if handled\n\n          handler = appHandlers[matcher]\n          regex = new RegExp(matcher)\n\n          if regex.test(type)\n            handled = true\n            appElement = handler(file, path)\n\n            self.editorElement appElement\n\n    put: (path, file) ->\n      self.fs().put path, file\n\n    delete: (path) ->\n      self.fs().delete path\n",
      "mode": "100644",
      "type": "blob"
    },
    "pixie.cson": {
      "path": "pixie.cson",
      "content": "remoteDependencies: [\n  \"https://sdk.amazonaws.com/js/aws-sdk-2.2.42.min.js\"\n]\ndependencies:\n  observable: \"distri/observable:master\"\n  postmaster: \"distri/postmaster:master\"\nwidth: 1024\nheight: 720\n",
      "mode": "100644",
      "type": "blob"
    },
    "presenters/file.coffee": {
      "path": "presenters/file.coffee",
      "content": "module.exports = FilePresenter = (data, fs, os, fp) ->\n  {name, path} = data\n\n  name: name\n  path: path\n  click: (e) ->\n    return if e.filetreeHandled\n    e.filetreeHandled = true\n\n    os.open path\n\n    return\n\n  remove: (e) ->\n    return if e.filetreeHandled\n    e.filetreeHandled = true\n\n    os.delete path\n\n    fp.files.remove name\n\n    return\n",
      "mode": "100644",
      "type": "blob"
    },
    "presenters/folder.coffee": {
      "path": "presenters/folder.coffee",
      "content": "Observable = require \"observable\"\n\nFolderTemplate = require \"../templates/folder\"\nFileTemplate = require \"../templates/file\"\n\nFilePresenter = require \"./file\"\n\nmodule.exports = FolderPresenter = (data, fs, os) ->\n  {path, folders, files, name} = data\n  name ?= path\n  folders ?= []\n  files ?= []\n\n  self =\n    Folder: (data) ->\n      FolderTemplate FolderPresenter data, fs, os\n    File: (data) ->\n      FileTemplate FilePresenter data, fs, os, self\n    class: ->\n      \"expanded\" if self.expanded()\n    click: (e) ->\n      return if e.filetreeHandled\n      e.filetreeHandled = true\n\n      self.expanded.toggle()\n      if self.expanded()\n        self.refresh()\n\n      return false\n    expanded: Observable false\n    folders: Observable folders\n    files: Observable files\n    name: name\n    path: path\n    refresh: ->\n      console.log \"List:\", path\n      fs.list(path).then ({files, folders}) ->\n        self.files(files)\n        self.folders(folders)\n",
      "mode": "100644",
      "type": "blob"
    },
    "style.styl": {
      "path": "style.styl",
      "content": "*\n  box-sizing: border-box\n\nbody\n  margin: 0\n\nbody, html\n  height: 100%\n\nfile\n  position: relative\n\n  .path\n    overflow: hidden\n    text-overflow: ellipsis\n    white-space: nowrap\n    width: 200px\n\n  & > .delete\n    position: absolute\n    left: 220px\n    top: 0\n\nfolder\n  display: block\n\n  &::before\n    content: \"[+]\"\n\n  & > file, & > folder\n    display: none\n    padding-left: 1em\n\n  &.expanded\n    &::before\n      content: \"[-]\"\n\n    & > file\n      display: block\n    & > folder\n      display: block\n\n.os\n  display: flex\n  height: 100%\n\n  & > folder\n    flex-grow: 0\n    height: 100%\n    width: 250px\n\n  & > iframe\n    flex-grow: 1\n    height: 100%\n\neditor\n  display: block\n  margin-top: 1em\n\ntextarea\n  display: block\n  width: 100%\n",
      "mode": "100644",
      "type": "blob"
    },
    "templates/editor.jadelet": {
      "path": "templates/editor.jadelet",
      "content": "editor\n  label\n    span Path\n    input(value=@path)\n  label\n    span ContentType\n    input(value=@contentType)\n  textarea(value=@contents)\n  button(click=@save) Save\n",
      "mode": "100644",
      "type": "blob"
    },
    "templates/file.jadelet": {
      "path": "templates/file.jadelet",
      "content": "file(@click title=@name)\n  .path= @name\n  .delete(click=@remove) X\n",
      "mode": "100644",
      "type": "blob"
    },
    "templates/folder.jadelet": {
      "path": "templates/folder.jadelet",
      "content": "- Folder = @Folder\n- File = @File\n\nfolder(@click @class)\n  - path = @path\n  = @name\n  - @folders.forEach (folder) ->\n    = Folder name: folder, path: path + folder\n  - @files.forEach (file) ->\n    = File name: file, path: path + file\n",
      "mode": "100644",
      "type": "blob"
    },
    "templates/login.jadelet": {
      "path": "templates/login.jadelet",
      "content": "a#LoginWithAmazon(@click)\n  img(border=\"0\" alt=\"Login with Amazon\" src=\"https://images-na.ssl-images-amazon.com/images/G/01/lwa/btnLWA_gold_156x32.png\" width=\"156\" height=\"32\")\n",
      "mode": "100644",
      "type": "blob"
    },
    "templates/os.jadelet": {
      "path": "templates/os.jadelet",
      "content": ".os\n  = @fileTreeElement\n  = @editorElement\n",
      "mode": "100644",
      "type": "blob"
    },
    "text_editor.coffee": {
      "path": "text_editor.coffee",
      "content": "Observable = require \"observable\"\n\nmodule.exports = (os) ->\n  self =\n    contents: Observable \"Hello\"\n    contentType: Observable \"text/plain\"\n    path: Observable \"test.txt\"\n    save: ->\n      blob = new Blob [self.contents()], type: self.contentType()\n      os.put self.path(), blob\n",
      "mode": "100644",
      "type": "blob"
    },
    "util.coffee": {
      "path": "util.coffee",
      "content": "module.exports =\n  log: (obj, rest...) ->\n    console.log obj, rest...\n    return obj\n\n  # TODO: Hook into progress where possible: .on 'httpUploadProgress'\n  pinvoke: (object, method, params...) ->\n    new Promise (resolve, reject) ->\n      object[method] params..., (err, result) ->\n        if err\n          reject err\n          return\n\n        resolve result\n\n  startsWith: (str, prefix) ->\n    str.lastIndexOf(prefix, 0) is 0\n\n  endsWith: (str, suffix) ->\n    str.indexOf(suffix, str.length - suffix.length) != -1\n\n  emptyElement: (element) ->\n    while element.lastChild\n      element.lastChild.remove()\n",
      "mode": "100644",
      "type": "blob"
    },
    "whimsy-fs.md": {
      "path": "whimsy-fs.md",
      "content": "\\*S\\*W\\*A\\*G\\*\n==============\n\nLet's use AWS Cognito to be all serverless all the time!\n\nUse S3 as a filesystem.\n\nurls can be constructed by\n\n       https://s3.amazonaws.com/#{bucket}/#{userId}/#{sha}\n    -> https://#{base_cdn}/#{userId}/#{sha}\n       https://#{user_cdn}/#{sha}\n\nPricing: https://aws.amazon.com/s3/pricing/\n\nS3 Bucket Config\n----------------\n\nYou need to set up CORS on the S3 Bucket to allow posting from the browser\n\n    <CORSConfiguration xmlns=\"http://s3.amazonaws.com/doc/2006-03-01\">\n       <CORSRule>\n          <AllowedOrigin>*</AllowedOrigin>\n          <AllowedMethod>GET</AllowedMethod>\n          <AllowedMethod>PUT</AllowedMethod>\n          <AllowedMethod>POST</AllowedMethod>\n          <AllowedMethod>DELETE</AllowedMethod>\n          <AllowedHeader>*</AllowedHeader>\n       </CORSRule>\n    </CORSConfiguration>\n\nSet up public read policy on S3 Bucket\n\n    {\n    \t\"Version\": \"2012-10-17\",\n    \t\"Statement\": [\n    \t\t{\n    \t\t\t\"Effect\": \"Allow\",\n    \t\t\t\"Principal\": \"*\",\n    \t\t\t\"Action\": [\n    \t\t\t\t\"s3:GetObject\"\n    \t\t\t],\n    \t\t\t\"Resource\": [\n    \t\t\t\t\"arn:aws:s3:::whimsy-fs/*\"\n    \t\t\t]\n    \t\t}\n    \t]\n    }\n\nCloudfront Config\n-----------------\n\nhttps only\n\nPoint at S3 bucket\n\nEnable options and whitelist headers for CORS\n\n\nRoute53 Config\n--------------\n\nfs.whimsy.space\n\nCreate A (Alias record) pointing to cloudfront distribution\n\n\nAWS Cognito User Policy\n-----------------------\n\n    {\n        \"Version\": \"2012-10-17\",\n        \"Statement\": [\n            {\n                \"Effect\": \"Allow\",\n                \"Action\": [\n                    \"dynamodb:GetItem\",\n                    \"dynamodb:BatchGetItem\",\n                    \"dynamodb:Query\",\n                    \"dynamodb:PutItem\",\n                    \"dynamodb:UpdateItem\",\n                    \"dynamodb:DeleteItem\",\n                    \"dynamodb:BatchWriteItem\"\n                ],\n                \"Resource\": [\n                    \"arn:aws:dynamodb:us-east-1:186123361267:table/whimsy-fs\"\n                ],\n                \"Condition\": {\n                    \"ForAllValues:StringEquals\": {\n                        \"dynamodb:LeadingKeys\": [\n                            \"${cognito-identity.amazonaws.com:sub}\"\n                        ]\n                    }\n                }\n            },\n            {\n                \"Action\": [\n                    \"s3:ListBucket\"\n                ],\n                \"Effect\": \"Allow\",\n                \"Resource\": [\n                    \"arn:aws:s3:::whimsy-fs\"\n                ],\n                \"Condition\": {\n                    \"StringLike\": {\n                        \"s3:prefix\": [\n                            \"${cognito-identity.amazonaws.com:sub}/*\"\n                        ]\n                    }\n                }\n            },\n            {\n                \"Action\": [\n                    \"s3:GetObject\",\n                    \"s3:PutObject\",\n                    \"s3:DeleteObject\"\n                ],\n                \"Effect\": \"Allow\",\n                \"Resource\": [\n                    \"arn:aws:s3:::whimsy-fs/${cognito-identity.amazonaws.com:sub}/*\"\n                ]\n            }\n        ]\n    }\n\nUsing Amazon Login for Auth\n---------------------------\n\nCould also instead use FB, Google, pretty much any OAuth\n\nSet up app at https://sellercentral.amazon.com/gp/homepage.html the interface is\nhideous yet functional.\n\nUpdate Cognito Identity Pool with Amazon App Id\n\nOptionally add Twitter, Goog, FB, etc.\n\n\nDiscontinued Tangents\n=====================\n\nDynamoDB Semantic Records linking to S3 Content Addressable Store\n\nDynamoDB Table\n\n      Primary keys     Index    Link to CAS\n        |       |        |           |\n    +-------+------+-----------+----------+------------------------\n    | owner | path | createdAt |    sha   |  extra... (tags, etc.)\n\n\nSaving a File\n-------------\n\nsha is base64 url-encoded sha256 of file contents\n\nCompute sha, save to S3 and DynamoDB\n\nS3 path is \"${cognito-identity.amazonaws.com:sub}/#{sha}\"\n\nDynamoDB path is logical path ex: /Desktop/yolo.png\nowner is \"${cognito-identity.amazonaws.com:sub}\"\ncreatedAt number: unix epoch timestamp\nsha is the same sha that matches s3\narbitrary extra meta data can be added\n\n",
      "mode": "100644",
      "type": "blob"
    },
    "pixel_editor.coffee": {
      "path": "pixel_editor.coffee",
      "content": "Postmaster = require \"postmaster\"\n\nmodule.exports = (os, file, path) ->\n  frame = document.createElement \"iframe\"\n  frame.sandbox = \"allow-scripts allow-popups\"\n\n  # TODO: Save\n\n  postmaster = Postmaster {},\n    remoteTarget: -> frame.contentWindow\n    childLoaded: ->\n      url = URL.createObjectURL(file)\n\n      load(url).then (data) ->\n        postmaster.invokeRemote \"insertImageData\", data\n        .catch (e) ->\n          console.error e\n\n  frame.src = \"https://danielx.net/pixel-editor/embedded/\"\n\n  frame\n\nload = (url) ->\n  new Promise (resolve, reject) ->\n    canvas = document.createElement('canvas')\n    context = canvas.getContext('2d')\n    image = document.createElement(\"img\")\n    image.crossOrigin = true\n\n    image.onload = ->\n      {width, height} = image\n\n      canvas.width = width\n      canvas.height = height\n      context.drawImage(image, 0, 0)\n      imageData = context.getImageData(0, 0, width, height)\n\n      resolve imageData\n\n    image.onerror = ->\n      reject new Error \"Error loading image data\"\n\n    image.src = url\n",
      "mode": "100644"
    }
  },
  "distribution": {
    "amazon_login": {
      "path": "amazon_login",
      "content": "(function() {\n  window.onAmazonLoginReady = function() {\n    return amazon.Login.setClientId('amzn1.application-oa2-client.29b275f9076a406c90a66b025fab96bf');\n  };\n\n  (function(d) {\n    var a, r;\n    r = d.createElement('div');\n    r.id = \"amazon-root\";\n    d.body.appendChild(r);\n    a = d.createElement('script');\n    a.type = 'text/javascript';\n    a.async = true;\n    a.id = 'amazon-login-sdk';\n    a.src = 'https://api-cdn.amazon.com/sdk/login1.js';\n    return r.appendChild(a);\n  })(document);\n\n}).call(this);\n",
      "type": "blob"
    },
    "dynamo_stuff": {
      "path": "dynamo_stuff",
      "content": "(function() {\n  var pinvoke, queryDynamoDB, readFromDynamoDB, writeToDynamoDB;\n\n  pinvoke = require(\"./util\").pinvoke;\n\n  writeToDynamoDB = function(table, id, path, sha) {\n    var params, time;\n    time = \"\" + (+(new Date));\n    params = {\n      Item: {\n        owner: {\n          S: id\n        },\n        path: {\n          S: path\n        },\n        created_at: {\n          S: time\n        },\n        sha: {\n          S: sha\n        }\n      }\n    };\n    return pinvoke(table, \"putItem\", params);\n  };\n\n  queryDynamoDB = function(table, id) {\n    var params;\n    table = table;\n    params = {\n      AttributesToGet: [\"path\", \"sha\"],\n      KeyConditions: {\n        owner: {\n          ComparisonOperator: \"EQ\",\n          AttributeValueList: [\n            {\n              S: id\n            }\n          ]\n        }\n      }\n    };\n    return pinvoke(table, \"query\", params);\n  };\n\n  readFromDynamoDB = function(table, id, path) {\n    var params;\n    params = {\n      Key: {\n        owner: {\n          S: id\n        },\n        path: {\n          S: path\n        }\n      }\n    };\n    return pinvoke(table, \"getItem\", params);\n  };\n\n}).call(this);\n",
      "type": "blob"
    },
    "fs": {
      "path": "fs",
      "content": "(function() {\n  var blob, deleteFromS3, delimiter, endsWith, getFromS3, json, list, log, pinvoke, startsWith, status, uploadToS3, _ref;\n\n  _ref = require(\"./util\"), log = _ref.log, pinvoke = _ref.pinvoke, startsWith = _ref.startsWith, endsWith = _ref.endsWith;\n\n  delimiter = \"/\";\n\n  status = function(response) {\n    if (response.status >= 200 && response.status < 300) {\n      return response;\n    } else {\n      throw response;\n    }\n  };\n\n  json = function(response) {\n    return response.json();\n  };\n\n  blob = function(response) {\n    return response.blob();\n  };\n\n  uploadToS3 = function(bucket, key, file, options) {\n    var cacheControl;\n    if (options == null) {\n      options = {};\n    }\n    cacheControl = options.cacheControl;\n    if (cacheControl == null) {\n      cacheControl = 0;\n    }\n    return pinvoke(bucket, \"putObject\", {\n      Key: key,\n      ContentType: file.type,\n      Body: file,\n      CacheControl: \"max-age=\" + cacheControl\n    });\n  };\n\n  getFromS3 = function(bucket, key) {\n    return fetch(\"https://\" + bucket.config.params.Bucket + \".s3.amazonaws.com/\" + key).then(status).then(blob);\n  };\n\n  deleteFromS3 = function(bucket, key) {\n    return pinvoke(bucket, \"deleteObject\", {\n      Key: key\n    });\n  };\n\n  list = function(bucket, id, dir) {\n    var prefix;\n    if (!startsWith(dir, delimiter)) {\n      dir = \"\" + delimiter + dir;\n    }\n    if (!endsWith(dir, delimiter)) {\n      dir = \"\" + dir + delimiter;\n    }\n    prefix = \"\" + id + dir;\n    return pinvoke(bucket, \"listObjects\", {\n      Prefix: prefix,\n      Delimiter: delimiter\n    }).then(function(result) {\n      return {\n        path: prefix.replace(id, \"\"),\n        folders: result.CommonPrefixes.map(function(p) {\n          return p.Prefix.replace(prefix, \"\");\n        }),\n        files: result.Contents.map(function(o) {\n          return o.Key.replace(prefix, \"\");\n        })\n      };\n    });\n  };\n\n  module.exports = function(id, bucket) {\n    return {\n      get: function(path) {\n        var key;\n        if (!startsWith(path, delimiter)) {\n          path = delimiter + path;\n        }\n        key = \"\" + id + path;\n        return getFromS3(bucket, key);\n      },\n      put: function(path, file) {\n        var key;\n        if (!startsWith(path, delimiter)) {\n          path = delimiter + path;\n        }\n        key = \"\" + id + path;\n        return uploadToS3(bucket, key, file);\n      },\n      \"delete\": function(path) {\n        var key;\n        if (!startsWith(path, delimiter)) {\n          path = delimiter + path;\n        }\n        key = \"\" + id + path;\n        return deleteFromS3(bucket, key);\n      },\n      list: function(dir) {\n        if (dir == null) {\n          dir = \"/\";\n        }\n        return list(bucket, id, dir);\n      }\n    };\n  };\n\n}).call(this);\n",
      "type": "blob"
    },
    "lib/directory_upload": {
      "path": "lib/directory_upload",
      "content": "/**********************************\n Directory Upload Proposal Polyfill\n Author: Ali Alabbas (Microsoft)\n **********************************/\n(function() {\n\t// Do not proceed with the polyfill if Directory interface is already natively available,\n\t// or if webkitdirectory is not supported (i.e. not Chrome, since the polyfill only works in Chrome)\n\tif (window.Directory || !('webkitdirectory' in document.createElement('input') && 'webkitGetAsEntry' in DataTransferItem.prototype)) {\n\t\treturn;\n\t}\n\n\tvar directoryAttr = 'directory',\n\t\tgetFilesMethod = 'getFilesAndDirectories',\n\t\tisSupportedProp = 'isFilesAndDirectoriesSupported',\n\t\tchooseDirMethod = 'chooseDirectory';\n\n\tvar separator = '/';\n\n\tvar Directory = function() {\n\t\tthis.name = '';\n\t\tthis.path = separator;\n\t\tthis._children = {};\n\t\tthis._items = false;\n\t};\n\n\tDirectory.prototype[getFilesMethod] = function() {\n\t\tvar that = this;\n\n\t\t// from drag and drop and file input drag and drop (webkitEntries)\n\t\tif (this._items) {\n\t\t\tvar getItem = function(entry) {\n\t\t\t\tif (entry.isDirectory) {\n\t\t\t\t\tvar dir = new Directory();\n\t\t\t\t\tdir.name = entry.name;\n\t\t\t\t\tdir.path = entry.fullPath;\n\t\t\t\t\tdir._items = entry;\n\n\t\t\t\t\treturn dir;\n\t\t\t\t} else {\n\t\t\t\t\treturn new Promise(function(resolve, reject) {\n\t\t\t\t\t\tentry.file(function(file) {\n\t\t\t\t\t\t\tresolve(file);\n\t\t\t\t\t\t}, reject);\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tif (this.path === separator) {\n\t\t\t\tvar promises = [];\n\n\t\t\t\tfor (var i = 0; i < this._items.length; i++) {\n\t\t\t\t\tvar entry;\n\n\t\t\t\t\t// from file input drag and drop (webkitEntries)\n\t\t\t\t\tif (this._items[i].isDirectory || this._items[i].isFile) {\n\t\t\t\t\t\tentry = this._items[i];\n\t\t\t\t\t} else {\n\t\t\t\t\t\tentry = this._items[i].webkitGetAsEntry();\n\t\t\t\t\t}\n\n\t\t\t\t\tpromises.push(getItem(entry));\n\t\t\t\t}\n\n\t\t\t\treturn Promise.all(promises);\n\t\t\t} else {\n\t\t\t\treturn new Promise(function(resolve, reject) {\n\t\t\t\t\tthat._items.createReader().readEntries(function(entries) {\n\t\t\t\t\t\tvar promises = [];\n\n\t\t\t\t\t\tfor (var i = 0; i < entries.length; i++) {\n\t\t\t\t\t\t\tvar entry = entries[i];\n\n\t\t\t\t\t\t\tpromises.push(getItem(entry));\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tresolve(Promise.all(promises));\n\t\t\t\t\t}, reject);\n\t\t\t\t});\n\t\t\t}\n\t\t// from file input manual selection\n\t\t} else {\n\t\t\tvar arr = [];\n\n\t\t\tfor (var child in this._children) {\n\t\t\t\tarr.push(this._children[child]);\n\t\t\t}\n\n\t\t\treturn Promise.resolve(arr);\n\t\t}\n\t};\n\n\t// set blank as default for all inputs\n\tHTMLInputElement.prototype[getFilesMethod] = function() {\n\t\treturn Promise.resolve([]);\n\t};\n\n\t// if OS is Mac, the combined directory and file picker is supported\n\tHTMLInputElement.prototype[isSupportedProp] = navigator.appVersion.indexOf(\"Mac\") !== -1;\n\n\tHTMLInputElement.prototype[directoryAttr] = undefined;\n\tHTMLInputElement.prototype[chooseDirMethod] = undefined;\n\n\t// expose Directory interface to window\n\twindow.Directory = Directory;\n\n\t/********************\n\t **** File Input ****\n\t ********************/\n\tvar convertInputs = function(nodes) {\n\t\tvar recurse = function(dir, path, fullPath, file) {\n\t\t\tvar pathPieces = path.split(separator);\n\t\t\tvar dirName = pathPieces.shift();\n\n\t\t\tif (pathPieces.length > 0) {\n\t\t\t\tvar subDir = new Directory();\n\t\t\t\tsubDir.name = dirName;\n\t\t\t\tsubDir.path = separator + fullPath;\n\n\t\t\t\tif (!dir._children[subDir.name]) {\n\t\t\t\t\tdir._children[subDir.name] = subDir;\n\t\t\t\t}\n\n\t\t\t\trecurse(dir._children[subDir.name], pathPieces.join(separator), fullPath, file);\n\t\t\t} else {\n\t\t\t\tdir._children[file.name] = file;\n\t\t\t}\n\t\t};\n\n\t\tfor (var i = 0; i < nodes.length; i++) {\n\t\t\tvar node = nodes[i];\n\n\t\t\tif (node.tagName === 'INPUT' && node.type === 'file') {\n\t\t\t\t// force multiple selection for default behavior\n\t\t\t\tif (!node.hasAttribute('multiple')) {\n\t\t\t\t\tnode.setAttribute('multiple', '');\n\t\t\t\t}\n\n\t\t\t\tvar shadow = node.createShadowRoot();\n\n\t\t\t\tnode[chooseDirMethod] = function() {\n\t\t\t\t\t// can't do this without an actual click\n\t\t\t\t\tconsole.log('This is unsupported. For security reasons the dialog cannot be triggered unless it is a response to some user triggered event such as a click on some other element.');\n\t\t\t\t};\n\n\t\t\t\tshadow.innerHTML = '<div style=\"border: 1px solid #999; padding: 3px; width: 235px; box-sizing: content-box; font-size: 14px; height: 21px;\">'\n\t\t\t\t\t+ '<div id=\"fileButtons\" style=\"box-sizing: content-box;\">'\n\t\t\t\t\t+ '<button id=\"button1\" style=\"width: 100px; box-sizing: content-box;\">Choose file(s)...</button>'\n\t\t\t\t\t+ '<button id=\"button2\" style=\"width: 100px; box-sizing: content-box; margin-left: 3px;\">Choose folder...</button>'\n\t\t\t\t\t+ '</div>'\n\t\t\t\t\t+ '<div id=\"filesChosen\" style=\"padding: 3px; display: none; box-sizing: content-box;\"><span id=\"filesChosenText\">files selected...</span>'\n\t\t\t\t\t+ '<a id=\"clear\" title=\"Clear selection\" href=\"javascript:;\" style=\"text-decoration: none; float: right; margin: -3px -1px 0 0; padding: 3px; font-weight: bold; font-size: 16px; color:#999; box-sizing: content-box;\">&times;</a>'\n\t\t\t\t\t+ '</div>'\n\t\t\t\t\t+ '</div>'\n\t\t\t\t\t+ '<input id=\"input1\" type=\"file\" multiple style=\"display: none;\">'\n\t\t\t\t\t+ '<input id=\"input2\" type=\"file\" webkitdirectory style=\"display: none;\">'\n\t\t\t\t\t+ '</div>';\n\n\t\t\t\tshadow.querySelector('#button1').onclick = function(e) {\n\t\t\t\t\te.preventDefault();\n\n\t\t\t\t\tshadow.querySelector('#input1').click();\n\t\t\t\t};\n\n\t\t\t\tshadow.querySelector('#button2').onclick = function(e) {\n\t\t\t\t\te.preventDefault();\n\n\t\t\t\t\tshadow.querySelector('#input2').click();\n\t\t\t\t};\n\n\t\t\t\tvar toggleView = function(defaultView, filesLength) {\n\t\t\t\t\tshadow.querySelector('#fileButtons').style.display = defaultView ? 'block' : 'none';\n\t\t\t\t\tshadow.querySelector('#filesChosen').style.display = defaultView ? 'none' : 'block';\n\n\t\t\t\t\tif (!defaultView) {\n\t\t\t\t\t\tshadow.querySelector('#filesChosenText').innerText = filesLength + ' file' + (filesLength > 1 ? 's' : '') + ' selected...';\n\t\t\t\t\t}\n\t\t\t\t};\n\n\t\t\t\tvar draggedAndDropped = false;\n\n\t\t\t\tvar getFiles = function() {\n\t\t\t\t\tvar files = node.files;\n\n\t\t\t\t\tif (draggedAndDropped) {\n\t\t\t\t\t\tfiles = node.webkitEntries;\n\t\t\t\t\t\tdraggedAndDropped = false;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (files.length === 0) {\n\t\t\t\t\t\t\tfiles = node.shadowRoot.querySelector('#input1').files;\n\n\t\t\t\t\t\t\tif (files.length === 0) {\n\t\t\t\t\t\t\t\tfiles = node.shadowRoot.querySelector('#input2').files;\n\n\t\t\t\t\t\t\t\tif (files.length === 0) {\n\t\t\t\t\t\t\t\t\tfiles = node.webkitEntries;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\treturn files;\n\t\t\t\t};\n\n\t\t\t\tvar changeHandler = function(e) {\n\t\t\t\t\tnode.dispatchEvent(new Event('change'));\n\n\t\t\t\t\ttoggleView(false, getFiles().length);\n\t\t\t\t};\n\n\t\t\t\tshadow.querySelector('#input1').onchange = shadow.querySelector('#input2').onchange = changeHandler;\n\n\t\t\t\tvar clear = function (e) {\n\t\t\t\t\ttoggleView(true);\n\n\t\t\t\t\tvar form = document.createElement('form');\n\t\t\t\t\tnode.parentNode.insertBefore(form, node);\n\t\t\t\t\tnode.parentNode.removeChild(node);\n\t\t\t\t\tform.appendChild(node);\n\t\t\t\t\tform.reset();\n\n\t\t\t\t\tform.parentNode.insertBefore(node, form);\n\t\t\t\t\tform.parentNode.removeChild(form);\n\n\t\t\t\t\t// reset does not instantly occur, need to give it some time\n\t\t\t\t\tsetTimeout(function() {\n\t\t\t\t\t\tnode.dispatchEvent(new Event('change'));\n\t\t\t\t\t}, 1);\n\t\t\t\t};\n\n\t\t\t\tshadow.querySelector('#clear').onclick = clear;\n\n\t\t\t\tnode.addEventListener('drop', function(e) {\n\t\t\t\t\tdraggedAndDropped = true;\n\t\t\t\t}, false);\n\n\t\t\t\tnode.addEventListener('change', function() {\n\t\t\t\t\tvar dir = new Directory();\n\n\t\t\t\t\tvar files = getFiles();\n\n\t\t\t\t\tif (files.length > 0) {\n\t\t\t\t\t\ttoggleView(false, files.length);\n\n\t\t\t\t\t\t// from file input drag and drop (webkitEntries)\n\t\t\t\t\t\tif (files[0].isFile || files[0].isDirectory) {\n\t\t\t\t\t\t\tdir._items = files;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tfor (var j = 0; j < files.length; j++) {\n\t\t\t\t\t\t\t\tvar file = files[j];\n\t\t\t\t\t\t\t\tvar path = file.webkitRelativePath;\n\t\t\t\t\t\t\t\tvar fullPath = path.substring(0, path.lastIndexOf(separator));\n\n\t\t\t\t\t\t\t\trecurse(dir, path, fullPath, file);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttoggleView(true, files.length);\n\t\t\t\t\t}\n\n\t\t\t\t\tthis[getFilesMethod] = function() {\n\t\t\t\t\t\treturn dir[getFilesMethod]();\n\t\t\t\t\t};\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t};\n\n\t// polyfill file inputs when the DOM loads\n\tdocument.addEventListener('DOMContentLoaded', function(event) {\n\t\tconvertInputs(document.getElementsByTagName('input'));\n\t});\n\n\t// polyfill file inputs that are created dynamically and inserted into the body\n\tvar observer = new MutationObserver(function(mutations, observer) {\n\t\tfor (var i = 0; i < mutations.length; i++) {\n\t\t\tif (mutations[i].addedNodes.length > 0) {\n\t\t\t\tconvertInputs(mutations[i].addedNodes);\n\t\t\t}\n\t\t}\n\t});\n\n\tobserver.observe(document.body, {childList: true, subtree: true});\n\n\t/***********************\n\t **** Drag and drop ****\n\t ***********************/\n\t// keep a reference to the original method\n\tvar _addEventListener = EventTarget.prototype.addEventListener;\n\n\tDataTransfer.prototype[getFilesMethod] = function() {\n\t\treturn Promise.resolve([]);\n\t};\n\n\tEventTarget.prototype.addEventListener = function(type, listener, useCapture) {\n\t\tif (type === 'drop') {\n\t\t\tvar _listener = listener;\n\n\t\t\tlistener = function(e) {\n\t\t\t\tvar dir = new Directory();\n\t\t\t\tdir._items = e.dataTransfer.items;\n\n\t\t\t\te.dataTransfer[getFilesMethod] = function() {\n\t\t\t\t\treturn dir[getFilesMethod]();\n\t\t\t\t};\n\n\t\t\t\t_listener(e);\n\t\t\t};\n\t\t}\n\n\t\t// call the original method\n\t\treturn _addEventListener.apply(this, arguments);\n\t};\n}());\n",
      "type": "blob"
    },
    "lib/drop": {
      "path": "lib/drop",
      "content": "(function() {\n  module.exports = function(element, handler) {\n    var cancel;\n    cancel = function(e) {\n      e.preventDefault();\n      return false;\n    };\n    element.addEventListener(\"dragover\", cancel);\n    element.addEventListener(\"dragenter\", cancel);\n    return element.addEventListener(\"drop\", function(e) {\n      e.preventDefault();\n      return handler(e);\n    });\n  };\n\n}).call(this);\n",
      "type": "blob"
    },
    "lib/sha": {
      "path": "lib/sha",
      "content": "(function() {\n  var arrayBufferToBase64, demo, shaForBlob, urlSafeBase64;\n\n  urlSafeBase64 = function(base64) {\n    return base64.replace(/\\+/g, \"-\").replace(/\\//g, \"_\").replace(/\\=*$/, '');\n  };\n\n  arrayBufferToBase64 = function(buffer) {\n    var binary, bytes;\n    bytes = new Uint8Array(buffer);\n    binary = \"\";\n    bytes.forEach(function(byte) {\n      return binary += String.fromCharCode(byte);\n    });\n    return btoa(binary);\n  };\n\n  shaForBlob = function(blob) {\n    return new Promise(function(resolve, reject) {\n      var reader;\n      reader = new FileReader;\n      reader.onload = function() {\n        var buffer;\n        buffer = reader.result;\n        return crypto.subtle.digest(\"SHA-256\", buffer).then(resolve)[\"catch\"](reject);\n      };\n      reader.onerror = reject;\n      return reader.readAsArrayBuffer(blob);\n    });\n  };\n\n  demo = function() {\n    return [\"yolo\", \"duder\", \"hello\", \"wat\"].forEach(function(test) {\n      var blob;\n      blob = new Blob([test]);\n      return shaForBlob(blob).then(arrayBufferToBase64).then(urlSafeBase64).then(log);\n    });\n  };\n\n  module.exports = function(blob) {\n    return shaForBlob(blob).then(arrayBufferToBase64).then(urlSafeBase64);\n  };\n\n}).call(this);\n",
      "type": "blob"
    },
    "main": {
      "path": "main",
      "content": "(function() {\n  var Drop, OS, OSTemplate, emptyElement, initFileDrop, log, logins, os, pinvoke, queryUserInfo, receivedCredentials, style, _ref;\n\n  require(\"./lib/directory_upload\");\n\n  style = document.createElement(\"style\");\n\n  style.innerHTML = require(\"./style\");\n\n  document.head.appendChild(style);\n\n  _ref = require(\"./util\"), log = _ref.log, emptyElement = _ref.emptyElement, pinvoke = _ref.pinvoke;\n\n  Drop = require(\"./lib/drop\");\n\n  OS = require(\"./os\");\n\n  os = OS();\n\n  OSTemplate = require(\"./templates/os\");\n\n  document.body.appendChild(OSTemplate(os));\n\n  initFileDrop = function(element, processItem) {\n    return Drop(element, function(e) {\n      var handleFiles;\n      handleFiles = function(items, path) {\n        if (path == null) {\n          path = \"/\";\n        }\n        return items.forEach(function(item) {\n          if (item.getFilesAndDirectories) {\n            return item.getFilesAndDirectories().then(function(items) {\n              return handleFiles(items, item.path);\n            });\n          } else {\n            return processItem(item, path);\n          }\n        });\n      };\n      return e.dataTransfer.getFilesAndDirectories().then(function(items) {\n        return handleFiles(items);\n      });\n    });\n  };\n\n  initFileDrop(document, function(file, path) {\n    var key;\n    key = (\"\" + path + \"/\" + file.name).replace(/\\/+/, \"/\");\n    return os.put(key, file);\n  });\n\n  receivedCredentials = function() {\n    var bucket, fs, id;\n    console.log(AWS.config.credentials);\n    id = AWS.config.credentials.identityId;\n    document.body.removeChild(document.querySelector('#LoginWithAmazon'));\n    bucket = new AWS.S3({\n      params: {\n        Bucket: \"whimsy-fs\"\n      }\n    });\n    fs = require('./fs')(id, bucket);\n    return os.attachFS(fs);\n  };\n\n  AWS.config.update({\n    region: 'us-east-1'\n  });\n\n  try {\n    logins = JSON.parse(localStorage.WHIMSY_FS_AWS_LOGIN);\n  } catch (_error) {}\n\n  AWS.config.credentials = new AWS.CognitoIdentityCredentials({\n    IdentityPoolId: 'us-east-1:4fe22da5-bb5e-4a78-a260-74ae0a140bf9',\n    Logins: logins\n  });\n\n  if (logins) {\n    pinvoke(AWS.config.credentials, \"get\").then(receivedCredentials)[\"catch\"](function(e) {\n      return console.error(e);\n    });\n  }\n\n  require(\"./amazon_login\");\n\n  document.body.appendChild(require(\"./templates/login\")({\n    click: function() {\n      var options;\n      options = {\n        scope: 'profile'\n      };\n      return amazon.Login.authorize(options, function(resp) {\n        var creds, token;\n        if (!resp.error) {\n          console.log(resp);\n          token = resp.access_token;\n          creds = AWS.config.credentials;\n          logins = {\n            'www.amazon.com': token\n          };\n          localStorage.WHIMSY_FS_AWS_LOGIN = JSON.stringify(logins);\n          creds.params.Logins = logins;\n          creds.expired = true;\n          queryUserInfo(token);\n          return pinvoke(AWS.config.credentials, \"get\").then(receivedCredentials);\n        }\n      });\n    }\n  }));\n\n  queryUserInfo = function(token) {\n    return fetch(\"https://api.amazon.com/user/profile\", {\n      headers: {\n        Authorization: \"bearer \" + token,\n        Accept: \"application/json\"\n      }\n    }).then(function(response) {\n      return response.json();\n    }).then(function(json) {\n      return console.log(json);\n    })[\"catch\"](function(e) {\n      return console.error(e);\n    });\n  };\n\n}).call(this);\n",
      "type": "blob"
    },
    "os": {
      "path": "os",
      "content": "(function() {\n  var EditorTemplate, FolderPresenter, FolderTemplate, Observable, PixelEditor, TextEditor;\n\n  Observable = require(\"observable\");\n\n  TextEditor = require(\"./text_editor\");\n\n  PixelEditor = require(\"./pixel_editor\");\n\n  EditorTemplate = require(\"./templates/editor\");\n\n  FolderTemplate = require(\"./templates/folder\");\n\n  FolderPresenter = require(\"./presenters/folder\");\n\n  module.exports = function() {\n    var appHandlers, self;\n    appHandlers = {\n      \"^text\": function(file, path) {\n        var editor, reader;\n        editor = TextEditor(self);\n        reader = new FileReader;\n        reader.onload = function() {\n          editor.contents(reader.result);\n          editor.contentType(file.type);\n          return editor.path(path);\n        };\n        reader.onerror = function(e) {\n          return console.error(e);\n        };\n        reader.readAsText(file);\n        return EditorTemplate(editor);\n      },\n      \"^image\": function(file, path) {\n        return PixelEditor(self, file, path);\n      }\n    };\n    return self = {\n      editorElement: Observable(),\n      fileTreeElement: Observable(),\n      attachFS: function(fs) {\n        self.fileTreeElement(FolderTemplate(FolderPresenter({\n          path: \"/\"\n        }, fs, self)));\n        return self.fs = function() {\n          return fs;\n        };\n      },\n      open: function(path) {\n        return self.fs().get(path).then(function(file) {\n          var handled, type;\n          type = file.type;\n          handled = false;\n          return Object.keys(appHandlers).forEach(function(matcher) {\n            var appElement, handler, regex;\n            if (handled) {\n              return;\n            }\n            handler = appHandlers[matcher];\n            regex = new RegExp(matcher);\n            if (regex.test(type)) {\n              handled = true;\n              appElement = handler(file, path);\n              return self.editorElement(appElement);\n            }\n          });\n        });\n      },\n      put: function(path, file) {\n        return self.fs().put(path, file);\n      },\n      \"delete\": function(path) {\n        return self.fs()[\"delete\"](path);\n      }\n    };\n  };\n\n}).call(this);\n",
      "type": "blob"
    },
    "pixie": {
      "path": "pixie",
      "content": "module.exports = {\"remoteDependencies\":[\"https://sdk.amazonaws.com/js/aws-sdk-2.2.42.min.js\"],\"dependencies\":{\"observable\":\"distri/observable:master\",\"postmaster\":\"distri/postmaster:master\"},\"width\":1024,\"height\":720};",
      "type": "blob"
    },
    "presenters/file": {
      "path": "presenters/file",
      "content": "(function() {\n  var FilePresenter;\n\n  module.exports = FilePresenter = function(data, fs, os, fp) {\n    var name, path;\n    name = data.name, path = data.path;\n    return {\n      name: name,\n      path: path,\n      click: function(e) {\n        if (e.filetreeHandled) {\n          return;\n        }\n        e.filetreeHandled = true;\n        os.open(path);\n      },\n      remove: function(e) {\n        if (e.filetreeHandled) {\n          return;\n        }\n        e.filetreeHandled = true;\n        os[\"delete\"](path);\n        fp.files.remove(name);\n      }\n    };\n  };\n\n}).call(this);\n",
      "type": "blob"
    },
    "presenters/folder": {
      "path": "presenters/folder",
      "content": "(function() {\n  var FilePresenter, FileTemplate, FolderPresenter, FolderTemplate, Observable;\n\n  Observable = require(\"observable\");\n\n  FolderTemplate = require(\"../templates/folder\");\n\n  FileTemplate = require(\"../templates/file\");\n\n  FilePresenter = require(\"./file\");\n\n  module.exports = FolderPresenter = function(data, fs, os) {\n    var files, folders, name, path, self;\n    path = data.path, folders = data.folders, files = data.files, name = data.name;\n    if (name == null) {\n      name = path;\n    }\n    if (folders == null) {\n      folders = [];\n    }\n    if (files == null) {\n      files = [];\n    }\n    return self = {\n      Folder: function(data) {\n        return FolderTemplate(FolderPresenter(data, fs, os));\n      },\n      File: function(data) {\n        return FileTemplate(FilePresenter(data, fs, os, self));\n      },\n      \"class\": function() {\n        if (self.expanded()) {\n          return \"expanded\";\n        }\n      },\n      click: function(e) {\n        if (e.filetreeHandled) {\n          return;\n        }\n        e.filetreeHandled = true;\n        self.expanded.toggle();\n        if (self.expanded()) {\n          self.refresh();\n        }\n        return false;\n      },\n      expanded: Observable(false),\n      folders: Observable(folders),\n      files: Observable(files),\n      name: name,\n      path: path,\n      refresh: function() {\n        console.log(\"List:\", path);\n        return fs.list(path).then(function(_arg) {\n          var files, folders;\n          files = _arg.files, folders = _arg.folders;\n          self.files(files);\n          return self.folders(folders);\n        });\n      }\n    };\n  };\n\n}).call(this);\n",
      "type": "blob"
    },
    "style": {
      "path": "style",
      "content": "module.exports = \"* {\\n  box-sizing: border-box;\\n}\\nbody {\\n  margin: 0;\\n}\\nbody,\\nhtml {\\n  height: 100%;\\n}\\nfile {\\n  position: relative;\\n}\\nfile .path {\\n  overflow: hidden;\\n  text-overflow: ellipsis;\\n  white-space: nowrap;\\n  width: 200px;\\n}\\nfile > .delete {\\n  position: absolute;\\n  left: 220px;\\n  top: 0;\\n}\\nfolder {\\n  display: block;\\n}\\nfolder::before {\\n  content: \\\"[+]\\\";\\n}\\nfolder > file,\\nfolder > folder {\\n  display: none;\\n  padding-left: 1em;\\n}\\nfolder.expanded::before {\\n  content: \\\"[-]\\\";\\n}\\nfolder.expanded > file {\\n  display: block;\\n}\\nfolder.expanded > folder {\\n  display: block;\\n}\\n.os {\\n  display: flex;\\n  height: 100%;\\n}\\n.os > folder {\\n  flex-grow: 0;\\n  height: 100%;\\n  width: 250px;\\n}\\n.os > iframe {\\n  flex-grow: 1;\\n  height: 100%;\\n}\\neditor {\\n  display: block;\\n  margin-top: 1em;\\n}\\ntextarea {\\n  display: block;\\n  width: 100%;\\n}\\n\";",
      "type": "blob"
    },
    "templates/editor": {
      "path": "templates/editor",
      "content": "module.exports = function(data) {\n  \"use strict\";\n  return (function() {\n    var __root;\n    __root = require(\"/lib/hamlet-runtime\")(this);\n    __root.buffer(__root.element(\"editor\", this, {}, function(__root) {\n      __root.buffer(__root.element(\"label\", this, {}, function(__root) {\n        __root.buffer(__root.element(\"span\", this, {}, function(__root) {\n          __root.buffer(\"Path\\n\");\n        }));\n        __root.buffer(__root.element(\"input\", this, {\n          \"value\": this.path\n        }, function(__root) {}));\n      }));\n      __root.buffer(__root.element(\"label\", this, {}, function(__root) {\n        __root.buffer(__root.element(\"span\", this, {}, function(__root) {\n          __root.buffer(\"ContentType\\n\");\n        }));\n        __root.buffer(__root.element(\"input\", this, {\n          \"value\": this.contentType\n        }, function(__root) {}));\n      }));\n      __root.buffer(__root.element(\"textarea\", this, {\n        \"value\": this.contents\n      }, function(__root) {}));\n      __root.buffer(__root.element(\"button\", this, {\n        \"click\": this.save\n      }, function(__root) {\n        __root.buffer(\"Save\\n\");\n      }));\n    }));\n    return __root.root;\n  }).call(data);\n};\n",
      "type": "blob"
    },
    "templates/file": {
      "path": "templates/file",
      "content": "module.exports = function(data) {\n  \"use strict\";\n  return (function() {\n    var __root;\n    __root = require(\"/lib/hamlet-runtime\")(this);\n    __root.buffer(__root.element(\"file\", this, {\n      \"click\": this.click,\n      \"title\": this.name\n    }, function(__root) {\n      __root.buffer(__root.element(\"div\", this, {\n        \"class\": [\"path\"]\n      }, function(__root) {\n        __root.buffer(this.name);\n      }));\n      __root.buffer(__root.element(\"div\", this, {\n        \"class\": [\"delete\"],\n        \"click\": this.remove\n      }, function(__root) {\n        __root.buffer(\"X\\n\");\n      }));\n    }));\n    return __root.root;\n  }).call(data);\n};\n",
      "type": "blob"
    },
    "templates/folder": {
      "path": "templates/folder",
      "content": "module.exports = function(data) {\n  \"use strict\";\n  return (function() {\n    var File, Folder, __root;\n    __root = require(\"/lib/hamlet-runtime\")(this);\n    Folder = this.Folder;\n    File = this.File;\n    __root.buffer(__root.element(\"folder\", this, {\n      \"class\": [this[\"class\"]],\n      \"click\": this.click\n    }, function(__root) {\n      var path;\n      path = this.path;\n      __root.buffer(this.name);\n      this.folders.forEach(function(folder) {\n        return __root.buffer(Folder({\n          name: folder,\n          path: path + folder\n        }));\n      });\n      this.files.forEach(function(file) {\n        return __root.buffer(File({\n          name: file,\n          path: path + file\n        }));\n      });\n    }));\n    return __root.root;\n  }).call(data);\n};\n",
      "type": "blob"
    },
    "templates/login": {
      "path": "templates/login",
      "content": "module.exports = function(data) {\n  \"use strict\";\n  return (function() {\n    var __root;\n    __root = require(\"/lib/hamlet-runtime\")(this);\n    __root.buffer(__root.element(\"a\", this, {\n      id: [\"LoginWithAmazon\"],\n      \"click\": this.click\n    }, function(__root) {\n      __root.buffer(__root.element(\"img\", this, {\n        \"border\": \"0\",\n        \"alt\": \"Login with Amazon\",\n        \"src\": \"https://images-na.ssl-images-amazon.com/images/G/01/lwa/btnLWA_gold_156x32.png\",\n        \"width\": \"156\",\n        \"height\": \"32\"\n      }, function(__root) {}));\n    }));\n    return __root.root;\n  }).call(data);\n};\n",
      "type": "blob"
    },
    "templates/os": {
      "path": "templates/os",
      "content": "module.exports = function(data) {\n  \"use strict\";\n  return (function() {\n    var __root;\n    __root = require(\"/lib/hamlet-runtime\")(this);\n    __root.buffer(__root.element(\"div\", this, {\n      \"class\": [\"os\"]\n    }, function(__root) {\n      __root.buffer(this.fileTreeElement);\n      __root.buffer(this.editorElement);\n    }));\n    return __root.root;\n  }).call(data);\n};\n",
      "type": "blob"
    },
    "text_editor": {
      "path": "text_editor",
      "content": "(function() {\n  var Observable;\n\n  Observable = require(\"observable\");\n\n  module.exports = function(os) {\n    var self;\n    return self = {\n      contents: Observable(\"Hello\"),\n      contentType: Observable(\"text/plain\"),\n      path: Observable(\"test.txt\"),\n      save: function() {\n        var blob;\n        blob = new Blob([self.contents()], {\n          type: self.contentType()\n        });\n        return os.put(self.path(), blob);\n      }\n    };\n  };\n\n}).call(this);\n",
      "type": "blob"
    },
    "util": {
      "path": "util",
      "content": "(function() {\n  var __slice = [].slice;\n\n  module.exports = {\n    log: function() {\n      var obj, rest;\n      obj = arguments[0], rest = 2 <= arguments.length ? __slice.call(arguments, 1) : [];\n      console.log.apply(console, [obj].concat(__slice.call(rest)));\n      return obj;\n    },\n    pinvoke: function() {\n      var method, object, params;\n      object = arguments[0], method = arguments[1], params = 3 <= arguments.length ? __slice.call(arguments, 2) : [];\n      return new Promise(function(resolve, reject) {\n        return object[method].apply(object, __slice.call(params).concat([function(err, result) {\n          if (err) {\n            reject(err);\n            return;\n          }\n          return resolve(result);\n        }]));\n      });\n    },\n    startsWith: function(str, prefix) {\n      return str.lastIndexOf(prefix, 0) === 0;\n    },\n    endsWith: function(str, suffix) {\n      return str.indexOf(suffix, str.length - suffix.length) !== -1;\n    },\n    emptyElement: function(element) {\n      var _results;\n      _results = [];\n      while (element.lastChild) {\n        _results.push(element.lastChild.remove());\n      }\n      return _results;\n    }\n  };\n\n}).call(this);\n",
      "type": "blob"
    },
    "pixel_editor": {
      "path": "pixel_editor",
      "content": "(function() {\n  var Postmaster, load;\n\n  Postmaster = require(\"postmaster\");\n\n  module.exports = function(os, file, path) {\n    var frame, postmaster;\n    frame = document.createElement(\"iframe\");\n    frame.sandbox = \"allow-scripts allow-popups\";\n    postmaster = Postmaster({}, {\n      remoteTarget: function() {\n        return frame.contentWindow;\n      },\n      childLoaded: function() {\n        var url;\n        url = URL.createObjectURL(file);\n        return load(url).then(function(data) {\n          return postmaster.invokeRemote(\"insertImageData\", data)[\"catch\"](function(e) {\n            return console.error(e);\n          });\n        });\n      }\n    });\n    frame.src = \"https://danielx.net/pixel-editor/embedded/\";\n    return frame;\n  };\n\n  load = function(url) {\n    return new Promise(function(resolve, reject) {\n      var canvas, context, image;\n      canvas = document.createElement('canvas');\n      context = canvas.getContext('2d');\n      image = document.createElement(\"img\");\n      image.crossOrigin = true;\n      image.onload = function() {\n        var height, imageData, width;\n        width = image.width, height = image.height;\n        canvas.width = width;\n        canvas.height = height;\n        context.drawImage(image, 0, 0);\n        imageData = context.getImageData(0, 0, width, height);\n        return resolve(imageData);\n      };\n      image.onerror = function() {\n        return reject(new Error(\"Error loading image data\"));\n      };\n      return image.src = url;\n    });\n  };\n\n}).call(this);\n",
      "type": "blob"
    },
    "lib/hamlet-runtime": {
      "path": "lib/hamlet-runtime",
      "content": "!function(e){if(\"object\"==typeof exports)module.exports=e();else if(\"function\"==typeof define&&define.amd)define(e);else{var f;\"undefined\"!=typeof window?f=window:\"undefined\"!=typeof global?f=global:\"undefined\"!=typeof self&&(f=self),f.Hamlet=e()}}(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);throw new Error(\"Cannot find module '\"+o+\"'\")}var f=n[o]={exports:{}};t[o][0].call(f.exports,function(e){var n=t[o][1][e];return s(n?n:e)},f,f.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(_dereq_,module,exports){\n!function(){var Hamlet,compile;Hamlet=_dereq_(\"hamlet-runtime\");compile=_dereq_(\"hamlet-compiler\").compile;Hamlet.compile=compile;module.exports=Hamlet}.call(this);\n},{\"hamlet-compiler\":6,\"hamlet-runtime\":11}],2:[function(_dereq_,module,exports){\n\n},{}],3:[function(_dereq_,module,exports){\n(function (process){\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// resolves . and .. elements in a path array with directory names there\n// must be no slashes, empty elements, or device names (c:\\) in the array\n// (so also no leading and trailing slashes - it does not distinguish\n// relative and absolute paths)\nfunction normalizeArray(parts, allowAboveRoot) {\n  // if the path tries to go above the root, `up` ends up > 0\n  var up = 0;\n  for (var i = parts.length - 1; i >= 0; i--) {\n    var last = parts[i];\n    if (last === '.') {\n      parts.splice(i, 1);\n    } else if (last === '..') {\n      parts.splice(i, 1);\n      up++;\n    } else if (up) {\n      parts.splice(i, 1);\n      up--;\n    }\n  }\n\n  // if the path is allowed to go above the root, restore leading ..s\n  if (allowAboveRoot) {\n    for (; up--; up) {\n      parts.unshift('..');\n    }\n  }\n\n  return parts;\n}\n\n// Split a filename into [root, dir, basename, ext], unix version\n// 'root' is just a slash, or nothing.\nvar splitPathRe =\n    /^(\\/?|)([\\s\\S]*?)((?:\\.{1,2}|[^\\/]+?|)(\\.[^.\\/]*|))(?:[\\/]*)$/;\nvar splitPath = function(filename) {\n  return splitPathRe.exec(filename).slice(1);\n};\n\n// path.resolve([from ...], to)\n// posix version\nexports.resolve = function() {\n  var resolvedPath = '',\n      resolvedAbsolute = false;\n\n  for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {\n    var path = (i >= 0) ? arguments[i] : process.cwd();\n\n    // Skip empty and invalid entries\n    if (typeof path !== 'string') {\n      throw new TypeError('Arguments to path.resolve must be strings');\n    } else if (!path) {\n      continue;\n    }\n\n    resolvedPath = path + '/' + resolvedPath;\n    resolvedAbsolute = path.charAt(0) === '/';\n  }\n\n  // At this point the path should be resolved to a full absolute path, but\n  // handle relative paths to be safe (might happen when process.cwd() fails)\n\n  // Normalize the path\n  resolvedPath = normalizeArray(filter(resolvedPath.split('/'), function(p) {\n    return !!p;\n  }), !resolvedAbsolute).join('/');\n\n  return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';\n};\n\n// path.normalize(path)\n// posix version\nexports.normalize = function(path) {\n  var isAbsolute = exports.isAbsolute(path),\n      trailingSlash = substr(path, -1) === '/';\n\n  // Normalize the path\n  path = normalizeArray(filter(path.split('/'), function(p) {\n    return !!p;\n  }), !isAbsolute).join('/');\n\n  if (!path && !isAbsolute) {\n    path = '.';\n  }\n  if (path && trailingSlash) {\n    path += '/';\n  }\n\n  return (isAbsolute ? '/' : '') + path;\n};\n\n// posix version\nexports.isAbsolute = function(path) {\n  return path.charAt(0) === '/';\n};\n\n// posix version\nexports.join = function() {\n  var paths = Array.prototype.slice.call(arguments, 0);\n  return exports.normalize(filter(paths, function(p, index) {\n    if (typeof p !== 'string') {\n      throw new TypeError('Arguments to path.join must be strings');\n    }\n    return p;\n  }).join('/'));\n};\n\n\n// path.relative(from, to)\n// posix version\nexports.relative = function(from, to) {\n  from = exports.resolve(from).substr(1);\n  to = exports.resolve(to).substr(1);\n\n  function trim(arr) {\n    var start = 0;\n    for (; start < arr.length; start++) {\n      if (arr[start] !== '') break;\n    }\n\n    var end = arr.length - 1;\n    for (; end >= 0; end--) {\n      if (arr[end] !== '') break;\n    }\n\n    if (start > end) return [];\n    return arr.slice(start, end - start + 1);\n  }\n\n  var fromParts = trim(from.split('/'));\n  var toParts = trim(to.split('/'));\n\n  var length = Math.min(fromParts.length, toParts.length);\n  var samePartsLength = length;\n  for (var i = 0; i < length; i++) {\n    if (fromParts[i] !== toParts[i]) {\n      samePartsLength = i;\n      break;\n    }\n  }\n\n  var outputParts = [];\n  for (var i = samePartsLength; i < fromParts.length; i++) {\n    outputParts.push('..');\n  }\n\n  outputParts = outputParts.concat(toParts.slice(samePartsLength));\n\n  return outputParts.join('/');\n};\n\nexports.sep = '/';\nexports.delimiter = ':';\n\nexports.dirname = function(path) {\n  var result = splitPath(path),\n      root = result[0],\n      dir = result[1];\n\n  if (!root && !dir) {\n    // No dirname whatsoever\n    return '.';\n  }\n\n  if (dir) {\n    // It has a dirname, strip trailing slash\n    dir = dir.substr(0, dir.length - 1);\n  }\n\n  return root + dir;\n};\n\n\nexports.basename = function(path, ext) {\n  var f = splitPath(path)[2];\n  // TODO: make this comparison case-insensitive on windows?\n  if (ext && f.substr(-1 * ext.length) === ext) {\n    f = f.substr(0, f.length - ext.length);\n  }\n  return f;\n};\n\n\nexports.extname = function(path) {\n  return splitPath(path)[3];\n};\n\nfunction filter (xs, f) {\n    if (xs.filter) return xs.filter(f);\n    var res = [];\n    for (var i = 0; i < xs.length; i++) {\n        if (f(xs[i], i, xs)) res.push(xs[i]);\n    }\n    return res;\n}\n\n// String.prototype.substr - negative index don't work in IE8\nvar substr = 'ab'.substr(-1) === 'b'\n    ? function (str, start, len) { return str.substr(start, len) }\n    : function (str, start, len) {\n        if (start < 0) start = str.length + start;\n        return str.substr(start, len);\n    }\n;\n\n}).call(this,_dereq_(\"FWaASH\"))\n},{\"FWaASH\":4}],4:[function(_dereq_,module,exports){\n// shim for using process in browser\n\nvar process = module.exports = {};\n\nprocess.nextTick = (function () {\n    var canSetImmediate = typeof window !== 'undefined'\n    && window.setImmediate;\n    var canPost = typeof window !== 'undefined'\n    && window.postMessage && window.addEventListener\n    ;\n\n    if (canSetImmediate) {\n        return function (f) { return window.setImmediate(f) };\n    }\n\n    if (canPost) {\n        var queue = [];\n        window.addEventListener('message', function (ev) {\n            var source = ev.source;\n            if ((source === window || source === null) && ev.data === 'process-tick') {\n                ev.stopPropagation();\n                if (queue.length > 0) {\n                    var fn = queue.shift();\n                    fn();\n                }\n            }\n        }, true);\n\n        return function nextTick(fn) {\n            queue.push(fn);\n            window.postMessage('process-tick', '*');\n        };\n    }\n\n    return function nextTick(fn) {\n        setTimeout(fn, 0);\n    };\n})();\n\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n}\n\n// TODO(shtylman)\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\n\n},{}],5:[function(_dereq_,module,exports){\n// Generated by CoffeeScript 1.7.1\n(function() {\n  var ROOT_NAME, indentText, util;\n\n  indentText = function(text, indent) {\n    if (indent == null) {\n      indent = \"  \";\n    }\n    return indent + text.replace(/\\n/g, \"\\n\" + indent);\n  };\n\n  ROOT_NAME = \"__root\";\n\n  util = {\n    indent: indentText,\n    filters: {\n      verbatim: function(content, compiler) {\n        return compiler.buffer('\"\"\"' + content.replace(/(#|\")/g, \"\\\\$1\") + '\"\"\"');\n      },\n      plain: function(content, compiler) {\n        return compiler.buffer(JSON.stringify(content));\n      },\n      coffeescript: function(content, compiler) {\n        return [content];\n      },\n      javascript: function(content, compiler) {\n        return [\"`\", compiler.indent(content), \"`\"];\n      }\n    },\n    element: function(tag, attributes, contents) {\n      var lines;\n      if (attributes == null) {\n        attributes = [];\n      }\n      if (contents == null) {\n        contents = [];\n      }\n      return lines = [\"\" + ROOT_NAME + \".buffer \" + ROOT_NAME + \".element \" + (JSON.stringify(tag)) + \", this, {\" + (attributes.join('\\n')) + \"}, (\" + ROOT_NAME + \") ->\", indentText(contents.join(\"\\n\")), \"  return\"];\n    },\n    buffer: function(value) {\n      return [\"\" + ROOT_NAME + \".buffer \" + value];\n    },\n    attributes: function(node) {\n      var attributeLines, attributes, classes, id, ids, idsAndClasses;\n      id = node.id, classes = node.classes, attributes = node.attributes;\n      if (id) {\n        ids = [JSON.stringify(id)];\n      } else {\n        ids = [];\n      }\n      classes = (classes || []).map(JSON.stringify);\n      if (attributes) {\n        attributes = attributes.filter(function(_arg) {\n          var name, value;\n          name = _arg.name, value = _arg.value;\n          if (name === \"class\") {\n            classes.push(value);\n            return false;\n          } else if (name === \"id\") {\n            ids.push(value);\n            return false;\n          } else {\n            return true;\n          }\n        });\n      } else {\n        attributes = [];\n      }\n      idsAndClasses = [];\n      if (ids.length) {\n        idsAndClasses.push(\"id: [\" + (ids.join(', ')) + \"]\");\n      }\n      if (classes.length) {\n        idsAndClasses.push(\"class: [\" + (classes.join(', ')) + \"]\");\n      }\n      attributeLines = attributes.map(function(_arg) {\n        var name, value;\n        name = _arg.name, value = _arg.value;\n        name = JSON.stringify(name);\n        return \"\" + name + \": \" + value;\n      });\n      return idsAndClasses.concat(attributeLines);\n    },\n    render: function(node) {\n      var filter, tag, text;\n      tag = node.tag, filter = node.filter, text = node.text;\n      if (tag) {\n        return this.tag(node);\n      } else if (filter) {\n        return this.filter(node);\n      } else {\n        return this.contents(node);\n      }\n    },\n    filter: function(node) {\n      var filter, filterName;\n      filterName = node.filter;\n      if (filter = this.filters[filterName]) {\n        return [].concat.apply([], this.filters[filterName](node.content, this));\n      } else {\n        return [\"\" + ROOT_NAME + \".filter(\" + (JSON.stringify(filterName)) + \", \" + (JSON.stringify(node.content)) + \")\"];\n      }\n    },\n    contents: function(node) {\n      var bufferedCode, childContent, children, contents, indent, text, unbufferedCode;\n      children = node.children, bufferedCode = node.bufferedCode, unbufferedCode = node.unbufferedCode, text = node.text;\n      if (unbufferedCode) {\n        indent = true;\n        contents = [unbufferedCode];\n      } else if (bufferedCode) {\n        contents = this.buffer(bufferedCode);\n      } else if (text) {\n        contents = this.buffer(JSON.stringify(text));\n      } else if (node.tag) {\n        contents = [];\n      } else if (node.comment) {\n        return [];\n      } else {\n        contents = [];\n        console.warn(\"No content for node:\", node);\n      }\n      if (children) {\n        childContent = this.renderNodes(children);\n        if (indent) {\n          childContent = this.indent(childContent.join(\"\\n\"));\n        }\n        contents = contents.concat(childContent);\n      }\n      return contents;\n    },\n    renderNodes: function(nodes) {\n      return [].concat.apply([], nodes.map(this.render, this));\n    },\n    tag: function(node) {\n      var tag;\n      tag = node.tag;\n      return this.element(tag, this.attributes(node), this.contents(node));\n    }\n  };\n\n  exports.compile = function(parseTree, _arg) {\n    var compiler, exports, items, options, program, programSource, runtime, source, _ref;\n    _ref = _arg != null ? _arg : {}, compiler = _ref.compiler, runtime = _ref.runtime, exports = _ref.exports;\n    if (runtime == null) {\n      runtime = \"require\" + \"(\\\"hamlet-runtime\\\")\";\n    }\n    if (exports == null) {\n      exports = \"module.exports\";\n    }\n    items = util.renderNodes(parseTree);\n    if (exports) {\n      exports = \"\" + exports + \" = \";\n    } else {\n      exports = \"\";\n    }\n    source = \"\" + exports + \"(data) ->\\n  \\\"use strict\\\"\\n  (->\\n    \" + ROOT_NAME + \" = \" + runtime + \"(this)\\n\\n\" + (util.indent(items.join(\"\\n\"), \"    \")) + \"\\n    return \" + ROOT_NAME + \".root\\n  ).call(data)\";\n    options = {\n      bare: true\n    };\n    programSource = source;\n    program = compiler.compile(programSource, options);\n    return program;\n  };\n\n}).call(this);\n\n},{}],6:[function(_dereq_,module,exports){\n// Generated by CoffeeScript 1.7.1\n(function() {\n  var compile, parser;\n\n  compile = _dereq_(\"./compiler\").compile;\n\n  parser = _dereq_(\"hamlet-parser\");\n\n  module.exports = {\n    compile: function(input, options) {\n      if (options == null) {\n        options = {};\n      }\n      if (typeof input === \"string\") {\n        input = parser.parse(input, options.mode);\n      }\n      return compile(input, options);\n    }\n  };\n\n}).call(this);\n\n},{\"./compiler\":5,\"hamlet-parser\":9}],7:[function(_dereq_,module,exports){\n/* generated by jison-lex 0.2.1 */\nvar haml_lexer = (function(){\nvar lexer = {\n\nEOF:1,\n\nparseError:function parseError(str, hash) {\n        if (this.yy.parser) {\n            this.yy.parser.parseError(str, hash);\n        } else {\n            throw new Error(str);\n        }\n    },\n\n// resets the lexer, sets new input\nsetInput:function (input) {\n        this._input = input;\n        this._more = this._backtrack = this.done = false;\n        this.yylineno = this.yyleng = 0;\n        this.yytext = this.matched = this.match = '';\n        this.conditionStack = ['INITIAL'];\n        this.yylloc = {\n            first_line: 1,\n            first_column: 0,\n            last_line: 1,\n            last_column: 0\n        };\n        if (this.options.ranges) {\n            this.yylloc.range = [0,0];\n        }\n        this.offset = 0;\n        return this;\n    },\n\n// consumes and returns one char from the input\ninput:function () {\n        var ch = this._input[0];\n        this.yytext += ch;\n        this.yyleng++;\n        this.offset++;\n        this.match += ch;\n        this.matched += ch;\n        var lines = ch.match(/(?:\\r\\n?|\\n).*/g);\n        if (lines) {\n            this.yylineno++;\n            this.yylloc.last_line++;\n        } else {\n            this.yylloc.last_column++;\n        }\n        if (this.options.ranges) {\n            this.yylloc.range[1]++;\n        }\n\n        this._input = this._input.slice(1);\n        return ch;\n    },\n\n// unshifts one char (or a string) into the input\nunput:function (ch) {\n        var len = ch.length;\n        var lines = ch.split(/(?:\\r\\n?|\\n)/g);\n\n        this._input = ch + this._input;\n        this.yytext = this.yytext.substr(0, this.yytext.length - len - 1);\n        //this.yyleng -= len;\n        this.offset -= len;\n        var oldLines = this.match.split(/(?:\\r\\n?|\\n)/g);\n        this.match = this.match.substr(0, this.match.length - 1);\n        this.matched = this.matched.substr(0, this.matched.length - 1);\n\n        if (lines.length - 1) {\n            this.yylineno -= lines.length - 1;\n        }\n        var r = this.yylloc.range;\n\n        this.yylloc = {\n            first_line: this.yylloc.first_line,\n            last_line: this.yylineno + 1,\n            first_column: this.yylloc.first_column,\n            last_column: lines ?\n                (lines.length === oldLines.length ? this.yylloc.first_column : 0)\n                 + oldLines[oldLines.length - lines.length].length - lines[0].length :\n              this.yylloc.first_column - len\n        };\n\n        if (this.options.ranges) {\n            this.yylloc.range = [r[0], r[0] + this.yyleng - len];\n        }\n        this.yyleng = this.yytext.length;\n        return this;\n    },\n\n// When called from action, caches matched text and appends it on next action\nmore:function () {\n        this._more = true;\n        return this;\n    },\n\n// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.\nreject:function () {\n        if (this.options.backtrack_lexer) {\n            this._backtrack = true;\n        } else {\n            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\\n' + this.showPosition(), {\n                text: \"\",\n                token: null,\n                line: this.yylineno\n            });\n\n        }\n        return this;\n    },\n\n// retain first n characters of the match\nless:function (n) {\n        this.unput(this.match.slice(n));\n    },\n\n// displays already matched input, i.e. for error messages\npastInput:function () {\n        var past = this.matched.substr(0, this.matched.length - this.match.length);\n        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\\n/g, \"\");\n    },\n\n// displays upcoming input, i.e. for error messages\nupcomingInput:function () {\n        var next = this.match;\n        if (next.length < 20) {\n            next += this._input.substr(0, 20-next.length);\n        }\n        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\\n/g, \"\");\n    },\n\n// displays the character position where the lexing error occurred, i.e. for error messages\nshowPosition:function () {\n        var pre = this.pastInput();\n        var c = new Array(pre.length + 1).join(\"-\");\n        return pre + this.upcomingInput() + \"\\n\" + c + \"^\";\n    },\n\n// test the lexed token: return FALSE when not a match, otherwise return token\ntest_match:function (match, indexed_rule) {\n        var token,\n            lines,\n            backup;\n\n        if (this.options.backtrack_lexer) {\n            // save context\n            backup = {\n                yylineno: this.yylineno,\n                yylloc: {\n                    first_line: this.yylloc.first_line,\n                    last_line: this.last_line,\n                    first_column: this.yylloc.first_column,\n                    last_column: this.yylloc.last_column\n                },\n                yytext: this.yytext,\n                match: this.match,\n                matches: this.matches,\n                matched: this.matched,\n                yyleng: this.yyleng,\n                offset: this.offset,\n                _more: this._more,\n                _input: this._input,\n                yy: this.yy,\n                conditionStack: this.conditionStack.slice(0),\n                done: this.done\n            };\n            if (this.options.ranges) {\n                backup.yylloc.range = this.yylloc.range.slice(0);\n            }\n        }\n\n        lines = match[0].match(/(?:\\r\\n?|\\n).*/g);\n        if (lines) {\n            this.yylineno += lines.length;\n        }\n        this.yylloc = {\n            first_line: this.yylloc.last_line,\n            last_line: this.yylineno + 1,\n            first_column: this.yylloc.last_column,\n            last_column: lines ?\n                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\\r?\\n?/)[0].length :\n                         this.yylloc.last_column + match[0].length\n        };\n        this.yytext += match[0];\n        this.match += match[0];\n        this.matches = match;\n        this.yyleng = this.yytext.length;\n        if (this.options.ranges) {\n            this.yylloc.range = [this.offset, this.offset += this.yyleng];\n        }\n        this._more = false;\n        this._backtrack = false;\n        this._input = this._input.slice(match[0].length);\n        this.matched += match[0];\n        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);\n        if (this.done && this._input) {\n            this.done = false;\n        }\n        if (token) {\n            return token;\n        } else if (this._backtrack) {\n            // recover context\n            for (var k in backup) {\n                this[k] = backup[k];\n            }\n            return false; // rule action called reject() implying the next rule should be tested instead.\n        }\n        return false;\n    },\n\n// return next match in input\nnext:function () {\n        if (this.done) {\n            return this.EOF;\n        }\n        if (!this._input) {\n            this.done = true;\n        }\n\n        var token,\n            match,\n            tempMatch,\n            index;\n        if (!this._more) {\n            this.yytext = '';\n            this.match = '';\n        }\n        var rules = this._currentRules();\n        for (var i = 0; i < rules.length; i++) {\n            tempMatch = this._input.match(this.rules[rules[i]]);\n            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {\n                match = tempMatch;\n                index = i;\n                if (this.options.backtrack_lexer) {\n                    token = this.test_match(tempMatch, rules[i]);\n                    if (token !== false) {\n                        return token;\n                    } else if (this._backtrack) {\n                        match = false;\n                        continue; // rule action called reject() implying a rule MISmatch.\n                    } else {\n                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)\n                        return false;\n                    }\n                } else if (!this.options.flex) {\n                    break;\n                }\n            }\n        }\n        if (match) {\n            token = this.test_match(match, rules[index]);\n            if (token !== false) {\n                return token;\n            }\n            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)\n            return false;\n        }\n        if (this._input === \"\") {\n            return this.EOF;\n        } else {\n            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\\n' + this.showPosition(), {\n                text: \"\",\n                token: null,\n                line: this.yylineno\n            });\n        }\n    },\n\n// return next match that has a token\nlex:function lex() {\n        var r = this.next();\n        if (r) {\n            return r;\n        } else {\n            return this.lex();\n        }\n    },\n\n// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)\nbegin:function begin(condition) {\n        this.conditionStack.push(condition);\n    },\n\n// pop the previously active lexer condition state off the condition stack\npopState:function popState() {\n        var n = this.conditionStack.length - 1;\n        if (n > 0) {\n            return this.conditionStack.pop();\n        } else {\n            return this.conditionStack[0];\n        }\n    },\n\n// produce the lexer rule set which is active for the currently active lexer condition state\n_currentRules:function _currentRules() {\n        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {\n            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;\n        } else {\n            return this.conditions[\"INITIAL\"].rules;\n        }\n    },\n\n// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available\ntopState:function topState(n) {\n        n = this.conditionStack.length - 1 - Math.abs(n || 0);\n        if (n >= 0) {\n            return this.conditionStack[n];\n        } else {\n            return \"INITIAL\";\n        }\n    },\n\n// alias for begin(condition)\npushState:function pushState(condition) {\n        this.begin(condition);\n    },\n\n// return the number of states currently on the stack\nstateStackSize:function stateStackSize() {\n        return this.conditionStack.length;\n    },\noptions: {\"moduleName\":\"haml_lexer\"},\nperformAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {\n\nvar YYSTATE=YY_START;\nswitch($avoiding_name_collisions) {\ncase 0:return 'SEPARATOR';\nbreak;\ncase 1:this.popState(); return 'RIGHT_PARENTHESIS';\nbreak;\ncase 2:return 'ATTRIBUTE';\nbreak;\ncase 3:this.begin('value'); return 'EQUAL';\nbreak;\ncase 4:return 'AT_ATTRIBUTE';\nbreak;\ncase 5:this.popState(); return 'ATTRIBUTE_VALUE';\nbreak;\ncase 6:this.popState(); return 'ATTRIBUTE_VALUE';\nbreak;\ncase 7:this.popState(); return 'ATTRIBUTE_VALUE';\nbreak;\ncase 8:yy.indent = 0; this.popState(); return 'NEWLINE';\nbreak;\ncase 9:return 'FILTER_LINE';\nbreak;\ncase 10:yy.indent = 0; return 'NEWLINE';\nbreak;\ncase 11:yy.indent += 1; if(yy.indent > yy.filterIndent){this.begin('filter'); }; return 'INDENT';\nbreak;\ncase 12:this.begin(\"parentheses_attributes\"); return 'LEFT_PARENTHESIS';\nbreak;\ncase 13:yy_.yytext = yy_.yytext.substring(1); return 'COMMENT';\nbreak;\ncase 14:yy.filterIndent = yy.indent; yy_.yytext = yy_.yytext.substring(1); return 'FILTER';\nbreak;\ncase 15:yy_.yytext = yy_.yytext.substring(1); return 'ID';\nbreak;\ncase 16:yy_.yytext = yy_.yytext.substring(1); return 'CLASS';\nbreak;\ncase 17:yy_.yytext = yy_.yytext.substring(1); return 'TAG';\nbreak;\ncase 18:yy_.yytext = yy_.yytext.substring(1).trim(); return 'BUFFERED_CODE';\nbreak;\ncase 19:yy_.yytext = yy_.yytext.substring(1).trim(); return 'UNBUFFERED_CODE';\nbreak;\ncase 20:yy_.yytext = yy_.yytext.trim(); return 'TEXT';\nbreak;\n}\n},\nrules: [/^(?:[ \\t]+)/,/^(?:\\))/,/^(?:([_a-zA-Z][-_a-zA-Z0-9]*))/,/^(?:=)/,/^(?:@([_a-zA-Z][-_a-zA-Z0-9]*))/,/^(?:\"(\\\\.|[^\\\\\"])*\")/,/^(?:'(\\\\.|[^\\\\'])*')/,/^(?:[^ \\t\\)]*)/,/^(?:(\\n|$))/,/^(?:[^\\n]*)/,/^(?:\\s*(\\n|$))/,/^(?:(  |\\\\t))/,/^(?:\\()/,/^(?:\\/.*)/,/^(?::([_a-zA-Z][-_a-zA-Z0-9]*))/,/^(?:#((:|[A-Z]|_|[a-z])((:|[A-Z]|_|[a-z])|-|[0-9])*(?!-)))/,/^(?:\\.((:|[A-Z]|_|[a-z])((:|[A-Z]|_|[a-z])|-|[0-9])*(?!-)))/,/^(?:%((:|[A-Z]|_|[a-z])((:|[A-Z]|_|[a-z])|-|[0-9])*(?!-)))/,/^(?:=.*)/,/^(?:-.*)/,/^(?:.*)/],\nconditions: {\"filter\":{\"rules\":[8,9],\"inclusive\":false},\"value\":{\"rules\":[5,6,7],\"inclusive\":false},\"parentheses_attributes\":{\"rules\":[0,1,2,3,4],\"inclusive\":false},\"INITIAL\":{\"rules\":[10,11,12,13,14,15,16,17,18,19,20],\"inclusive\":true}}\n};\nreturn lexer;\n})();module.exports = haml_lexer;\n\n},{}],8:[function(_dereq_,module,exports){\n/* generated by jison-lex 0.2.1 */\nvar jade_lexer = (function(){\nvar lexer = {\n\nEOF:1,\n\nparseError:function parseError(str, hash) {\n        if (this.yy.parser) {\n            this.yy.parser.parseError(str, hash);\n        } else {\n            throw new Error(str);\n        }\n    },\n\n// resets the lexer, sets new input\nsetInput:function (input) {\n        this._input = input;\n        this._more = this._backtrack = this.done = false;\n        this.yylineno = this.yyleng = 0;\n        this.yytext = this.matched = this.match = '';\n        this.conditionStack = ['INITIAL'];\n        this.yylloc = {\n            first_line: 1,\n            first_column: 0,\n            last_line: 1,\n            last_column: 0\n        };\n        if (this.options.ranges) {\n            this.yylloc.range = [0,0];\n        }\n        this.offset = 0;\n        return this;\n    },\n\n// consumes and returns one char from the input\ninput:function () {\n        var ch = this._input[0];\n        this.yytext += ch;\n        this.yyleng++;\n        this.offset++;\n        this.match += ch;\n        this.matched += ch;\n        var lines = ch.match(/(?:\\r\\n?|\\n).*/g);\n        if (lines) {\n            this.yylineno++;\n            this.yylloc.last_line++;\n        } else {\n            this.yylloc.last_column++;\n        }\n        if (this.options.ranges) {\n            this.yylloc.range[1]++;\n        }\n\n        this._input = this._input.slice(1);\n        return ch;\n    },\n\n// unshifts one char (or a string) into the input\nunput:function (ch) {\n        var len = ch.length;\n        var lines = ch.split(/(?:\\r\\n?|\\n)/g);\n\n        this._input = ch + this._input;\n        this.yytext = this.yytext.substr(0, this.yytext.length - len - 1);\n        //this.yyleng -= len;\n        this.offset -= len;\n        var oldLines = this.match.split(/(?:\\r\\n?|\\n)/g);\n        this.match = this.match.substr(0, this.match.length - 1);\n        this.matched = this.matched.substr(0, this.matched.length - 1);\n\n        if (lines.length - 1) {\n            this.yylineno -= lines.length - 1;\n        }\n        var r = this.yylloc.range;\n\n        this.yylloc = {\n            first_line: this.yylloc.first_line,\n            last_line: this.yylineno + 1,\n            first_column: this.yylloc.first_column,\n            last_column: lines ?\n                (lines.length === oldLines.length ? this.yylloc.first_column : 0)\n                 + oldLines[oldLines.length - lines.length].length - lines[0].length :\n              this.yylloc.first_column - len\n        };\n\n        if (this.options.ranges) {\n            this.yylloc.range = [r[0], r[0] + this.yyleng - len];\n        }\n        this.yyleng = this.yytext.length;\n        return this;\n    },\n\n// When called from action, caches matched text and appends it on next action\nmore:function () {\n        this._more = true;\n        return this;\n    },\n\n// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.\nreject:function () {\n        if (this.options.backtrack_lexer) {\n            this._backtrack = true;\n        } else {\n            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\\n' + this.showPosition(), {\n                text: \"\",\n                token: null,\n                line: this.yylineno\n            });\n\n        }\n        return this;\n    },\n\n// retain first n characters of the match\nless:function (n) {\n        this.unput(this.match.slice(n));\n    },\n\n// displays already matched input, i.e. for error messages\npastInput:function () {\n        var past = this.matched.substr(0, this.matched.length - this.match.length);\n        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\\n/g, \"\");\n    },\n\n// displays upcoming input, i.e. for error messages\nupcomingInput:function () {\n        var next = this.match;\n        if (next.length < 20) {\n            next += this._input.substr(0, 20-next.length);\n        }\n        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\\n/g, \"\");\n    },\n\n// displays the character position where the lexing error occurred, i.e. for error messages\nshowPosition:function () {\n        var pre = this.pastInput();\n        var c = new Array(pre.length + 1).join(\"-\");\n        return pre + this.upcomingInput() + \"\\n\" + c + \"^\";\n    },\n\n// test the lexed token: return FALSE when not a match, otherwise return token\ntest_match:function (match, indexed_rule) {\n        var token,\n            lines,\n            backup;\n\n        if (this.options.backtrack_lexer) {\n            // save context\n            backup = {\n                yylineno: this.yylineno,\n                yylloc: {\n                    first_line: this.yylloc.first_line,\n                    last_line: this.last_line,\n                    first_column: this.yylloc.first_column,\n                    last_column: this.yylloc.last_column\n                },\n                yytext: this.yytext,\n                match: this.match,\n                matches: this.matches,\n                matched: this.matched,\n                yyleng: this.yyleng,\n                offset: this.offset,\n                _more: this._more,\n                _input: this._input,\n                yy: this.yy,\n                conditionStack: this.conditionStack.slice(0),\n                done: this.done\n            };\n            if (this.options.ranges) {\n                backup.yylloc.range = this.yylloc.range.slice(0);\n            }\n        }\n\n        lines = match[0].match(/(?:\\r\\n?|\\n).*/g);\n        if (lines) {\n            this.yylineno += lines.length;\n        }\n        this.yylloc = {\n            first_line: this.yylloc.last_line,\n            last_line: this.yylineno + 1,\n            first_column: this.yylloc.last_column,\n            last_column: lines ?\n                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\\r?\\n?/)[0].length :\n                         this.yylloc.last_column + match[0].length\n        };\n        this.yytext += match[0];\n        this.match += match[0];\n        this.matches = match;\n        this.yyleng = this.yytext.length;\n        if (this.options.ranges) {\n            this.yylloc.range = [this.offset, this.offset += this.yyleng];\n        }\n        this._more = false;\n        this._backtrack = false;\n        this._input = this._input.slice(match[0].length);\n        this.matched += match[0];\n        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);\n        if (this.done && this._input) {\n            this.done = false;\n        }\n        if (token) {\n            return token;\n        } else if (this._backtrack) {\n            // recover context\n            for (var k in backup) {\n                this[k] = backup[k];\n            }\n            return false; // rule action called reject() implying the next rule should be tested instead.\n        }\n        return false;\n    },\n\n// return next match in input\nnext:function () {\n        if (this.done) {\n            return this.EOF;\n        }\n        if (!this._input) {\n            this.done = true;\n        }\n\n        var token,\n            match,\n            tempMatch,\n            index;\n        if (!this._more) {\n            this.yytext = '';\n            this.match = '';\n        }\n        var rules = this._currentRules();\n        for (var i = 0; i < rules.length; i++) {\n            tempMatch = this._input.match(this.rules[rules[i]]);\n            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {\n                match = tempMatch;\n                index = i;\n                if (this.options.backtrack_lexer) {\n                    token = this.test_match(tempMatch, rules[i]);\n                    if (token !== false) {\n                        return token;\n                    } else if (this._backtrack) {\n                        match = false;\n                        continue; // rule action called reject() implying a rule MISmatch.\n                    } else {\n                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)\n                        return false;\n                    }\n                } else if (!this.options.flex) {\n                    break;\n                }\n            }\n        }\n        if (match) {\n            token = this.test_match(match, rules[index]);\n            if (token !== false) {\n                return token;\n            }\n            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)\n            return false;\n        }\n        if (this._input === \"\") {\n            return this.EOF;\n        } else {\n            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\\n' + this.showPosition(), {\n                text: \"\",\n                token: null,\n                line: this.yylineno\n            });\n        }\n    },\n\n// return next match that has a token\nlex:function lex() {\n        var r = this.next();\n        if (r) {\n            return r;\n        } else {\n            return this.lex();\n        }\n    },\n\n// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)\nbegin:function begin(condition) {\n        this.conditionStack.push(condition);\n    },\n\n// pop the previously active lexer condition state off the condition stack\npopState:function popState() {\n        var n = this.conditionStack.length - 1;\n        if (n > 0) {\n            return this.conditionStack.pop();\n        } else {\n            return this.conditionStack[0];\n        }\n    },\n\n// produce the lexer rule set which is active for the currently active lexer condition state\n_currentRules:function _currentRules() {\n        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {\n            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;\n        } else {\n            return this.conditions[\"INITIAL\"].rules;\n        }\n    },\n\n// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available\ntopState:function topState(n) {\n        n = this.conditionStack.length - 1 - Math.abs(n || 0);\n        if (n >= 0) {\n            return this.conditionStack[n];\n        } else {\n            return \"INITIAL\";\n        }\n    },\n\n// alias for begin(condition)\npushState:function pushState(condition) {\n        this.begin(condition);\n    },\n\n// return the number of states currently on the stack\nstateStackSize:function stateStackSize() {\n        return this.conditionStack.length;\n    },\noptions: {\"moduleName\":\"jade_lexer\"},\nperformAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {\n\nvar YYSTATE=YY_START;\nswitch($avoiding_name_collisions) {\ncase 0:return 'SEPARATOR';\nbreak;\ncase 1:this.popState(); return 'RIGHT_PARENTHESIS';\nbreak;\ncase 2:return 'ATTRIBUTE';\nbreak;\ncase 3:this.begin('value'); return 'EQUAL';\nbreak;\ncase 4:return 'AT_ATTRIBUTE';\nbreak;\ncase 5:this.popState(); return 'ATTRIBUTE_VALUE';\nbreak;\ncase 6:this.popState(); return 'ATTRIBUTE_VALUE';\nbreak;\ncase 7:this.popState(); return 'ATTRIBUTE_VALUE';\nbreak;\ncase 8:yy.indent = 0; this.popState(); return 'NEWLINE';\nbreak;\ncase 9:return 'FILTER_LINE';\nbreak;\ncase 10:yy.indent = 0; return 'NEWLINE';\nbreak;\ncase 11:yy.indent += 1; if(yy.indent > yy.filterIndent){this.begin('filter'); }; return 'INDENT';\nbreak;\ncase 12:this.begin(\"parentheses_attributes\"); return 'LEFT_PARENTHESIS';\nbreak;\ncase 13:yy_.yytext = yy_.yytext.substring(2); return 'COMMENT';\nbreak;\ncase 14:yy.filterIndent = yy.indent; yy_.yytext = yy_.yytext.substring(1); return 'FILTER';\nbreak;\ncase 15:yy_.yytext = yy_.yytext.substring(1); return 'ID';\nbreak;\ncase 16:yy_.yytext = yy_.yytext.substring(1); return 'CLASS';\nbreak;\ncase 17:return 'TAG';\nbreak;\ncase 18:yy_.yytext = yy_.yytext.substring(1).trim(); return 'BUFFERED_CODE';\nbreak;\ncase 19:yy_.yytext = yy_.yytext.substring(1).trim(); return 'UNBUFFERED_CODE';\nbreak;\ncase 20:yy_.yytext = yy_.yytext.trim(); return 'TEXT';\nbreak;\n}\n},\nrules: [/^(?:[ \\t]+)/,/^(?:\\))/,/^(?:([_a-zA-Z][-_a-zA-Z0-9]*))/,/^(?:=)/,/^(?:@([_a-zA-Z][-_a-zA-Z0-9]*))/,/^(?:\"(\\\\.|[^\\\\\"])*\")/,/^(?:'(\\\\.|[^\\\\'])*')/,/^(?:[^ \\t\\)]*)/,/^(?:(\\n|$))/,/^(?:[^\\n]*)/,/^(?:\\s*(\\n|$))/,/^(?:(  |\\\\t))/,/^(?:\\()/,/^(?:\\/\\/.*)/,/^(?::([_a-zA-Z][-_a-zA-Z0-9]*))/,/^(?:#((:|[A-Z]|_|[a-z])((:|[A-Z]|_|[a-z])|-|[0-9])*(?!-)))/,/^(?:\\.((:|[A-Z]|_|[a-z])((:|[A-Z]|_|[a-z])|-|[0-9])*(?!-)))/,/^(?:((:|[A-Z]|_|[a-z])((:|[A-Z]|_|[a-z])|-|[0-9])*(?!-)))/,/^(?:=.*)/,/^(?:-.*)/,/^(?:.*)/],\nconditions: {\"filter\":{\"rules\":[8,9],\"inclusive\":false},\"value\":{\"rules\":[5,6,7],\"inclusive\":false},\"parentheses_attributes\":{\"rules\":[0,1,2,3,4],\"inclusive\":false},\"INITIAL\":{\"rules\":[10,11,12,13,14,15,16,17,18,19,20],\"inclusive\":true}}\n};\nreturn lexer;\n})();module.exports = jade_lexer;\n\n},{}],9:[function(_dereq_,module,exports){\n// Generated by CoffeeScript 1.7.1\n(function() {\n  var extend, lexers, oldParse, parser,\n    __slice = [].slice;\n\n  parser = _dereq_(\"./parser\").parser;\n\n  lexers = {\n    haml: _dereq_(\"./haml_lexer\"),\n    jade: _dereq_(\"./jade_lexer\")\n  };\n\n  extend = function() {\n    var name, source, sources, target, _i, _len;\n    target = arguments[0], sources = 2 <= arguments.length ? __slice.call(arguments, 1) : [];\n    for (_i = 0, _len = sources.length; _i < _len; _i++) {\n      source = sources[_i];\n      for (name in source) {\n        target[name] = source[name];\n      }\n    }\n    return target;\n  };\n\n  oldParse = parser.parse;\n\n  extend(parser, {\n    parse: function(input, mode) {\n      if (mode == null) {\n        mode = \"haml\";\n      }\n      parser.lexer = lexers[mode];\n      extend(parser.yy, {\n        indent: 0,\n        nodePath: [\n          {\n            children: []\n          }\n        ],\n        filterIndent: void 0\n      });\n      return oldParse.call(parser, input);\n    }\n  });\n\n  extend(parser.yy, {\n    extend: extend,\n    newline: function() {\n      var lastNode;\n      lastNode = this.nodePath[this.nodePath.length - 1];\n      if (lastNode.filter) {\n        return this.appendFilterContent(lastNode, \"\");\n      }\n    },\n    lastParent: function(indentation) {\n      var parent;\n      while (!(parent = this.nodePath[indentation])) {\n        indentation -= 1;\n      }\n      return parent;\n    },\n    append: function(node, indentation) {\n      var index, lastNode, parent;\n      if (indentation == null) {\n        indentation = 0;\n      }\n      if (node.filterLine) {\n        lastNode = this.nodePath[this.nodePath.length - 1];\n        this.appendFilterContent(lastNode, node.filterLine);\n        return;\n      }\n      parent = this.lastParent(indentation);\n      this.appendChild(parent, node);\n      index = indentation + 1;\n      this.nodePath[index] = node;\n      this.nodePath.length = index + 1;\n      return node;\n    },\n    appendChild: function(parent, child) {\n      if (!child.filter) {\n        this.filterIndent = void 0;\n        this.lexer.popState();\n      }\n      parent.children || (parent.children = []);\n      return parent.children.push(child);\n    },\n    appendFilterContent: function(filter, content) {\n      filter.content || (filter.content = \"\");\n      return filter.content += \"\" + content + \"\\n\";\n    }\n  });\n\n  module.exports = parser;\n\n}).call(this);\n\n},{\"./haml_lexer\":7,\"./jade_lexer\":8,\"./parser\":10}],10:[function(_dereq_,module,exports){\n(function (process){\n/* parser generated by jison 0.4.6 */\n/*\n  Returns a Parser object of the following structure:\n\n  Parser: {\n    yy: {}\n  }\n\n  Parser.prototype: {\n    yy: {},\n    trace: function(),\n    symbols_: {associative list: name ==> number},\n    terminals_: {associative list: number ==> name},\n    productions_: [...],\n    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),\n    table: [...],\n    defaultActions: {...},\n    parseError: function(str, hash),\n    parse: function(input),\n\n    lexer: {\n        EOF: 1,\n        parseError: function(str, hash),\n        setInput: function(input),\n        input: function(),\n        unput: function(str),\n        more: function(),\n        less: function(n),\n        pastInput: function(),\n        upcomingInput: function(),\n        showPosition: function(),\n        test_match: function(regex_match_array, rule_index),\n        next: function(),\n        lex: function(),\n        begin: function(condition),\n        popState: function(),\n        _currentRules: function(),\n        topState: function(),\n        pushState: function(condition),\n\n        options: {\n            ranges: boolean           (optional: true ==> token location info will include a .range[] member)\n            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)\n            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)\n        },\n\n        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),\n        rules: [...],\n        conditions: {associative list: name ==> set},\n    }\n  }\n\n\n  token location info (@$, _$, etc.): {\n    first_line: n,\n    last_line: n,\n    first_column: n,\n    last_column: n,\n    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)\n  }\n\n\n  the parseError function receives a 'hash' object with these members for lexer and parser errors: {\n    text:        (matched text)\n    token:       (the produced terminal token, if any)\n    line:        (yylineno)\n  }\n  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {\n    loc:         (yylloc)\n    expected:    (string describing the set of expected tokens)\n    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)\n  }\n*/\nvar parser = (function(){\nvar parser = {trace: function trace() { },\nyy: {},\nsymbols_: {\"error\":2,\"root\":3,\"lines\":4,\"line\":5,\"indentation\":6,\"indentationLevel\":7,\"INDENT\":8,\"lineMain\":9,\"end\":10,\"tag\":11,\"rest\":12,\"COMMENT\":13,\"FILTER\":14,\"FILTER_LINE\":15,\"NEWLINE\":16,\"name\":17,\"tagComponents\":18,\"attributes\":19,\"idComponent\":20,\"classComponents\":21,\"ID\":22,\"CLASS\":23,\"LEFT_PARENTHESIS\":24,\"attributePairs\":25,\"RIGHT_PARENTHESIS\":26,\"SEPARATOR\":27,\"attributePair\":28,\"ATTRIBUTE\":29,\"EQUAL\":30,\"ATTRIBUTE_VALUE\":31,\"AT_ATTRIBUTE\":32,\"TAG\":33,\"BUFFERED_CODE\":34,\"UNBUFFERED_CODE\":35,\"TEXT\":36,\"$accept\":0,\"$end\":1},\nterminals_: {2:\"error\",8:\"INDENT\",13:\"COMMENT\",14:\"FILTER\",15:\"FILTER_LINE\",16:\"NEWLINE\",22:\"ID\",23:\"CLASS\",24:\"LEFT_PARENTHESIS\",26:\"RIGHT_PARENTHESIS\",27:\"SEPARATOR\",29:\"ATTRIBUTE\",30:\"EQUAL\",31:\"ATTRIBUTE_VALUE\",32:\"AT_ATTRIBUTE\",33:\"TAG\",34:\"BUFFERED_CODE\",35:\"UNBUFFERED_CODE\",36:\"TEXT\"},\nproductions_: [0,[3,1],[4,2],[4,1],[6,0],[6,1],[7,2],[7,1],[5,3],[5,1],[9,2],[9,1],[9,1],[9,1],[9,1],[9,1],[10,1],[11,2],[11,2],[11,1],[11,1],[18,3],[18,2],[18,2],[18,2],[18,1],[18,1],[20,1],[21,2],[21,1],[19,3],[25,3],[25,1],[28,3],[28,1],[17,1],[12,1],[12,1],[12,1]],\nperformAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {\n/* this == yyval */\n\nvar $0 = $$.length - 1;\nswitch (yystate) {\ncase 1:return this.$ = yy.nodePath[0].children;\nbreak;\ncase 2:this.$ = $$[$0-1];\nbreak;\ncase 3:this.$ = $$[$0];\nbreak;\ncase 4:this.$ = 0;\nbreak;\ncase 5:this.$ = $$[$0];\nbreak;\ncase 6:this.$ = $$[$0-1] + 1;\nbreak;\ncase 7:this.$ = 1;\nbreak;\ncase 8:this.$ = yy.append($$[$0-1], $$[$0-2]);\nbreak;\ncase 9:this.$ = (function () {\n        if ($$[$0].newline) {\n          return yy.newline();\n        }\n      }());\nbreak;\ncase 10:this.$ = yy.extend($$[$0-1], $$[$0]);\nbreak;\ncase 11:this.$ = $$[$0];\nbreak;\ncase 12:this.$ = $$[$0];\nbreak;\ncase 13:this.$ = {\n          comment: $$[$0]\n        };\nbreak;\ncase 14:this.$ = {\n          filter: $$[$0]\n        };\nbreak;\ncase 15:this.$ = {\n          filterLine: $$[$0]\n        };\nbreak;\ncase 16:this.$ = {\n          newline: true\n        };\nbreak;\ncase 17:this.$ = (function () {\n        $$[$0].tag = $$[$0-1];\n        return $$[$0];\n      }());\nbreak;\ncase 18:this.$ = {\n          tag: $$[$0-1],\n          attributes: $$[$0]\n        };\nbreak;\ncase 19:this.$ = {\n          tag: $$[$0]\n        };\nbreak;\ncase 20:this.$ = yy.extend($$[$0], {\n          tag: \"div\"\n        });\nbreak;\ncase 21:this.$ = {\n          id: $$[$0-2],\n          classes: $$[$0-1],\n          attributes: $$[$0]\n        };\nbreak;\ncase 22:this.$ = {\n          id: $$[$0-1],\n          attributes: $$[$0]\n        };\nbreak;\ncase 23:this.$ = {\n          classes: $$[$0-1],\n          attributes: $$[$0]\n        };\nbreak;\ncase 24:this.$ = {\n          id: $$[$0-1],\n          classes: $$[$0]\n        };\nbreak;\ncase 25:this.$ = {\n          id: $$[$0]\n        };\nbreak;\ncase 26:this.$ = {\n          classes: $$[$0]\n        };\nbreak;\ncase 27:this.$ = $$[$0];\nbreak;\ncase 28:this.$ = $$[$0-1].concat($$[$0]);\nbreak;\ncase 29:this.$ = [$$[$0]];\nbreak;\ncase 30:this.$ = $$[$0-1];\nbreak;\ncase 31:this.$ = $$[$0-2].concat($$[$0]);\nbreak;\ncase 32:this.$ = [$$[$0]];\nbreak;\ncase 33:this.$ = {\n          name: $$[$0-2],\n          value: $$[$0]\n        };\nbreak;\ncase 34:this.$ = {\n          name: $$[$0].substring(1),\n          value: $$[$0]\n        };\nbreak;\ncase 35:this.$ = $$[$0];\nbreak;\ncase 36:this.$ = {\n          bufferedCode: $$[$0]\n        };\nbreak;\ncase 37:this.$ = {\n          unbufferedCode: $$[$0]\n        };\nbreak;\ncase 38:this.$ = {\n          text: $$[$0] + \"\\n\"\n        };\nbreak;\n}\n},\ntable: [{3:1,4:2,5:3,6:4,7:6,8:[1,8],10:5,13:[2,4],14:[2,4],15:[2,4],16:[1,7],22:[2,4],23:[2,4],33:[2,4],34:[2,4],35:[2,4],36:[2,4]},{1:[3]},{1:[2,1],5:9,6:4,7:6,8:[1,8],10:5,13:[2,4],14:[2,4],15:[2,4],16:[1,7],22:[2,4],23:[2,4],33:[2,4],34:[2,4],35:[2,4],36:[2,4]},{1:[2,3],8:[2,3],13:[2,3],14:[2,3],15:[2,3],16:[2,3],22:[2,3],23:[2,3],33:[2,3],34:[2,3],35:[2,3],36:[2,3]},{9:10,11:11,12:12,13:[1,13],14:[1,14],15:[1,15],17:16,18:17,20:22,21:23,22:[1,24],23:[1,25],33:[1,21],34:[1,18],35:[1,19],36:[1,20]},{1:[2,9],8:[2,9],13:[2,9],14:[2,9],15:[2,9],16:[2,9],22:[2,9],23:[2,9],33:[2,9],34:[2,9],35:[2,9],36:[2,9]},{8:[1,26],13:[2,5],14:[2,5],15:[2,5],22:[2,5],23:[2,5],33:[2,5],34:[2,5],35:[2,5],36:[2,5]},{1:[2,16],8:[2,16],13:[2,16],14:[2,16],15:[2,16],16:[2,16],22:[2,16],23:[2,16],33:[2,16],34:[2,16],35:[2,16],36:[2,16]},{8:[2,7],13:[2,7],14:[2,7],15:[2,7],22:[2,7],23:[2,7],33:[2,7],34:[2,7],35:[2,7],36:[2,7]},{1:[2,2],8:[2,2],13:[2,2],14:[2,2],15:[2,2],16:[2,2],22:[2,2],23:[2,2],33:[2,2],34:[2,2],35:[2,2],36:[2,2]},{10:27,16:[1,7]},{12:28,16:[2,11],34:[1,18],35:[1,19],36:[1,20]},{16:[2,12]},{16:[2,13]},{16:[2,14]},{16:[2,15]},{16:[2,19],18:29,19:30,20:22,21:23,22:[1,24],23:[1,25],24:[1,31],34:[2,19],35:[2,19],36:[2,19]},{16:[2,20],34:[2,20],35:[2,20],36:[2,20]},{16:[2,36]},{16:[2,37]},{16:[2,38]},{16:[2,35],22:[2,35],23:[2,35],24:[2,35],34:[2,35],35:[2,35],36:[2,35]},{16:[2,25],19:33,21:32,23:[1,25],24:[1,31],34:[2,25],35:[2,25],36:[2,25]},{16:[2,26],19:34,23:[1,35],24:[1,31],34:[2,26],35:[2,26],36:[2,26]},{16:[2,27],23:[2,27],24:[2,27],34:[2,27],35:[2,27],36:[2,27]},{16:[2,29],23:[2,29],24:[2,29],34:[2,29],35:[2,29],36:[2,29]},{8:[2,6],13:[2,6],14:[2,6],15:[2,6],22:[2,6],23:[2,6],33:[2,6],34:[2,6],35:[2,6],36:[2,6]},{1:[2,8],8:[2,8],13:[2,8],14:[2,8],15:[2,8],16:[2,8],22:[2,8],23:[2,8],33:[2,8],34:[2,8],35:[2,8],36:[2,8]},{16:[2,10]},{16:[2,17],34:[2,17],35:[2,17],36:[2,17]},{16:[2,18],34:[2,18],35:[2,18],36:[2,18]},{25:36,28:37,29:[1,38],32:[1,39]},{16:[2,24],19:40,23:[1,35],24:[1,31],34:[2,24],35:[2,24],36:[2,24]},{16:[2,22],34:[2,22],35:[2,22],36:[2,22]},{16:[2,23],34:[2,23],35:[2,23],36:[2,23]},{16:[2,28],23:[2,28],24:[2,28],34:[2,28],35:[2,28],36:[2,28]},{26:[1,41],27:[1,42]},{26:[2,32],27:[2,32]},{30:[1,43]},{26:[2,34],27:[2,34]},{16:[2,21],34:[2,21],35:[2,21],36:[2,21]},{16:[2,30],34:[2,30],35:[2,30],36:[2,30]},{28:44,29:[1,38],32:[1,39]},{31:[1,45]},{26:[2,31],27:[2,31]},{26:[2,33],27:[2,33]}],\ndefaultActions: {12:[2,12],13:[2,13],14:[2,14],15:[2,15],18:[2,36],19:[2,37],20:[2,38],28:[2,10]},\nparseError: function parseError(str, hash) {\n    if (hash.recoverable) {\n        this.trace(str);\n    } else {\n        throw new Error(str);\n    }\n},\nparse: function parse(input) {\n    var self = this, stack = [0], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;\n    this.lexer.setInput(input);\n    this.lexer.yy = this.yy;\n    this.yy.lexer = this.lexer;\n    this.yy.parser = this;\n    if (typeof this.lexer.yylloc == 'undefined') {\n        this.lexer.yylloc = {};\n    }\n    var yyloc = this.lexer.yylloc;\n    lstack.push(yyloc);\n    var ranges = this.lexer.options && this.lexer.options.ranges;\n    if (typeof this.yy.parseError === 'function') {\n        this.parseError = this.yy.parseError;\n    } else {\n        this.parseError = Object.getPrototypeOf(this).parseError;\n    }\n    function popStack(n) {\n        stack.length = stack.length - 2 * n;\n        vstack.length = vstack.length - n;\n        lstack.length = lstack.length - n;\n    }\n    function lex() {\n        var token;\n        token = self.lexer.lex() || EOF;\n        if (typeof token !== 'number') {\n            token = self.symbols_[token] || token;\n        }\n        return token;\n    }\n    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;\n    while (true) {\n        state = stack[stack.length - 1];\n        if (this.defaultActions[state]) {\n            action = this.defaultActions[state];\n        } else {\n            if (symbol === null || typeof symbol == 'undefined') {\n                symbol = lex();\n            }\n            action = table[state] && table[state][symbol];\n        }\n                    if (typeof action === 'undefined' || !action.length || !action[0]) {\n                var errStr = '';\n                expected = [];\n                for (p in table[state]) {\n                    if (this.terminals_[p] && p > TERROR) {\n                        expected.push('\\'' + this.terminals_[p] + '\\'');\n                    }\n                }\n                if (this.lexer.showPosition) {\n                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\\n' + this.lexer.showPosition() + '\\nExpecting ' + expected.join(', ') + ', got \\'' + (this.terminals_[symbol] || symbol) + '\\'';\n                } else {\n                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\\'' + (this.terminals_[symbol] || symbol) + '\\'');\n                }\n                this.parseError(errStr, {\n                    text: this.lexer.match,\n                    token: this.terminals_[symbol] || symbol,\n                    line: this.lexer.yylineno,\n                    loc: yyloc,\n                    expected: expected\n                });\n            }\n        if (action[0] instanceof Array && action.length > 1) {\n            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);\n        }\n        switch (action[0]) {\n        case 1:\n            stack.push(symbol);\n            vstack.push(this.lexer.yytext);\n            lstack.push(this.lexer.yylloc);\n            stack.push(action[1]);\n            symbol = null;\n            if (!preErrorSymbol) {\n                yyleng = this.lexer.yyleng;\n                yytext = this.lexer.yytext;\n                yylineno = this.lexer.yylineno;\n                yyloc = this.lexer.yylloc;\n                if (recovering > 0) {\n                    recovering--;\n                }\n            } else {\n                symbol = preErrorSymbol;\n                preErrorSymbol = null;\n            }\n            break;\n        case 2:\n            len = this.productions_[action[1]][1];\n            yyval.$ = vstack[vstack.length - len];\n            yyval._$ = {\n                first_line: lstack[lstack.length - (len || 1)].first_line,\n                last_line: lstack[lstack.length - 1].last_line,\n                first_column: lstack[lstack.length - (len || 1)].first_column,\n                last_column: lstack[lstack.length - 1].last_column\n            };\n            if (ranges) {\n                yyval._$.range = [\n                    lstack[lstack.length - (len || 1)].range[0],\n                    lstack[lstack.length - 1].range[1]\n                ];\n            }\n            r = this.performAction.call(yyval, yytext, yyleng, yylineno, this.yy, action[1], vstack, lstack);\n            if (typeof r !== 'undefined') {\n                return r;\n            }\n            if (len) {\n                stack = stack.slice(0, -1 * len * 2);\n                vstack = vstack.slice(0, -1 * len);\n                lstack = lstack.slice(0, -1 * len);\n            }\n            stack.push(this.productions_[action[1]][0]);\n            vstack.push(yyval.$);\n            lstack.push(yyval._$);\n            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];\n            stack.push(newState);\n            break;\n        case 3:\n            return true;\n        }\n    }\n    return true;\n}};\nundefined\nfunction Parser () {\n  this.yy = {};\n}\nParser.prototype = parser;parser.Parser = Parser;\nreturn new Parser;\n})();\n\n\nif (typeof _dereq_ !== 'undefined' && typeof exports !== 'undefined') {\nexports.parser = parser;\nexports.Parser = parser.Parser;\nexports.parse = function () { return parser.parse.apply(parser, arguments); };\nexports.main = function commonjsMain(args) {\n    if (!args[1]) {\n        console.log('Usage: '+args[0]+' FILE');\n        process.exit(1);\n    }\n    var source = _dereq_('fs').readFileSync(_dereq_('path').normalize(args[1]), \"utf8\");\n    return exports.parser.parse(source);\n};\nif (typeof module !== 'undefined' && _dereq_.main === module) {\n  exports.main(process.argv.slice(1));\n}\n}\n}).call(this,_dereq_(\"FWaASH\"))\n},{\"FWaASH\":4,\"fs\":2,\"path\":3}],11:[function(_dereq_,module,exports){\n// Generated by CoffeeScript 1.7.1\n(function() {\n  \"use strict\";\n  var Observable, Runtime, bindEvent, bindObservable, bufferTo, classes, createElement, empty, eventNames, get, id, isEvent, isFragment, makeElement, observeAttribute, observeAttributes, observeContent, specialBindings, valueBind, valueIndexOf;\n\n  Observable = _dereq_(\"o_0\");\n\n  eventNames = \"abort\\nblur\\nchange\\nclick\\ndblclick\\ndrag\\ndragend\\ndragenter\\ndragleave\\ndragover\\ndragstart\\ndrop\\nerror\\nfocus\\ninput\\nkeydown\\nkeypress\\nkeyup\\nload\\nmousedown\\nmousemove\\nmouseout\\nmouseover\\nmouseup\\nreset\\nresize\\nscroll\\nselect\\nsubmit\\ntouchcancel\\ntouchend\\ntouchenter\\ntouchleave\\ntouchmove\\ntouchstart\\nunload\".split(\"\\n\");\n\n  isEvent = function(name) {\n    return eventNames.indexOf(name) !== -1;\n  };\n\n  isFragment = function(node) {\n    return (node != null ? node.nodeType : void 0) === 11;\n  };\n\n  valueBind = function(element, value, context) {\n    Observable(function() {\n      var update;\n      value = Observable(value, context);\n      switch (element.nodeName) {\n        case \"SELECT\":\n          element.oninput = element.onchange = function() {\n            var optionValue, _ref, _value;\n            _ref = this.children[this.selectedIndex], optionValue = _ref.value, _value = _ref._value;\n            return value(_value || optionValue);\n          };\n          update = function(newValue) {\n            var options;\n            element._value = newValue;\n            if ((options = element._options)) {\n              if (newValue.value != null) {\n                return element.value = (typeof newValue.value === \"function\" ? newValue.value() : void 0) || newValue.value;\n              } else {\n                return element.selectedIndex = valueIndexOf(options, newValue);\n              }\n            } else {\n              return element.value = newValue;\n            }\n          };\n          return bindObservable(element, value, context, update);\n        default:\n          element.oninput = element.onchange = function() {\n            return value(element.value);\n          };\n          if (typeof element.attachEvent === \"function\") {\n            element.attachEvent(\"onkeydown\", function() {\n              return setTimeout(function() {\n                return value(element.value);\n              }, 0);\n            });\n          }\n          return bindObservable(element, value, context, function(newValue) {\n            if (element.value !== newValue) {\n              return element.value = newValue;\n            }\n          });\n      }\n    });\n  };\n\n  specialBindings = {\n    INPUT: {\n      checked: function(element, value, context) {\n        element.onchange = function() {\n          return typeof value === \"function\" ? value(element.checked) : void 0;\n        };\n        return bindObservable(element, value, context, function(newValue) {\n          return element.checked = newValue;\n        });\n      }\n    },\n    SELECT: {\n      options: function(element, values, context) {\n        var updateValues;\n        values = Observable(values, context);\n        updateValues = function(values) {\n          empty(element);\n          element._options = values;\n          return values.map(function(value, index) {\n            var option, optionName, optionValue;\n            option = createElement(\"option\");\n            option._value = value;\n            if (typeof value === \"object\") {\n              optionValue = (value != null ? value.value : void 0) || index;\n            } else {\n              optionValue = value.toString();\n            }\n            bindObservable(option, optionValue, value, function(newValue) {\n              return option.value = newValue;\n            });\n            optionName = (value != null ? value.name : void 0) || value;\n            bindObservable(option, optionName, value, function(newValue) {\n              return option.textContent = option.innerText = newValue;\n            });\n            element.appendChild(option);\n            if (value === element._value) {\n              element.selectedIndex = index;\n            }\n            return option;\n          });\n        };\n        return bindObservable(element, values, context, updateValues);\n      }\n    }\n  };\n\n  observeAttribute = function(element, context, name, value) {\n    var binding, nodeName, _ref;\n    nodeName = element.nodeName;\n    if (name === \"value\") {\n      valueBind(element, value);\n    } else if (binding = (_ref = specialBindings[nodeName]) != null ? _ref[name] : void 0) {\n      binding(element, value, context);\n    } else if (name.match(/^on/) && isEvent(name.substr(2))) {\n      bindEvent(element, name, value, context);\n    } else if (isEvent(name)) {\n      bindEvent(element, \"on\" + name, value, context);\n    } else {\n      bindObservable(element, value, context, function(newValue) {\n        if ((newValue != null) && newValue !== false) {\n          return element.setAttribute(name, newValue);\n        } else {\n          return element.removeAttribute(name);\n        }\n      });\n    }\n    return element;\n  };\n\n  observeAttributes = function(element, context, attributes) {\n    return Object.keys(attributes).forEach(function(name) {\n      var value;\n      value = attributes[name];\n      return observeAttribute(element, context, name, value);\n    });\n  };\n\n  bindObservable = function(element, value, context, update) {\n    var observable, observe, unobserve;\n    observable = Observable(value, context);\n    observe = function() {\n      observable.observe(update);\n      return update(observable());\n    };\n    unobserve = function() {\n      return observable.stopObserving(update);\n    };\n    observe();\n    return element;\n  };\n\n  bindEvent = function(element, name, fn, context) {\n    return element[name] = function() {\n      return fn.apply(context, arguments);\n    };\n  };\n\n  id = function(element, context, sources) {\n    var lastId, update, value;\n    value = Observable.concat.apply(Observable, sources.map(function(source) {\n      return Observable(source, context);\n    }));\n    update = function(newId) {\n      return element.id = newId;\n    };\n    lastId = function() {\n      return value.last();\n    };\n    return bindObservable(element, lastId, context, update);\n  };\n\n  classes = function(element, context, sources) {\n    var classNames, update, value;\n    value = Observable.concat.apply(Observable, sources.map(function(source) {\n      return Observable(source, context);\n    }));\n    update = function(classNames) {\n      return element.className = classNames;\n    };\n    classNames = function() {\n      return value.join(\" \");\n    };\n    return bindObservable(element, classNames, context, update);\n  };\n\n  createElement = function(name) {\n    return document.createElement(name);\n  };\n\n  observeContent = function(element, context, contentFn) {\n    var append, contents, update;\n    contents = [];\n    contentFn.call(context, {\n      buffer: bufferTo(context, contents),\n      element: makeElement\n    });\n    append = function(item) {\n      if (typeof item === \"string\") {\n        return element.appendChild(document.createTextNode(item));\n      } else if (typeof item === \"number\") {\n        return element.appendChild(document.createTextNode(item));\n      } else if (typeof item === \"boolean\") {\n        return element.appendChild(document.createTextNode(item));\n      } else if (typeof item.each === \"function\") {\n        return item.each(append);\n      } else if (typeof item.forEach === \"function\") {\n        return item.forEach(append);\n      } else {\n        return element.appendChild(item);\n      }\n    };\n    update = function(contents) {\n      empty(element);\n      return contents.forEach(append);\n    };\n    return update(contents);\n  };\n\n  bufferTo = function(context, collection) {\n    return function(content) {\n      if (typeof content === 'function') {\n        content = Observable(content, context);\n      }\n      collection.push(content);\n      return content;\n    };\n  };\n\n  makeElement = function(name, context, attributes, fn) {\n    var element;\n    if (attributes == null) {\n      attributes = {};\n    }\n    element = createElement(name);\n    Observable(function() {\n      if (attributes.id != null) {\n        id(element, context, attributes.id);\n        return delete attributes.id;\n      }\n    });\n    Observable(function() {\n      if (attributes[\"class\"] != null) {\n        classes(element, context, attributes[\"class\"]);\n        return delete attributes[\"class\"];\n      }\n    });\n    Observable(function() {\n      return observeAttributes(element, context, attributes);\n    }, context);\n    if (element.nodeName !== \"SELECT\") {\n      Observable(function() {\n        return observeContent(element, context, fn);\n      }, context);\n    }\n    return element;\n  };\n\n  Runtime = function(context) {\n    var self;\n    self = {\n      buffer: function(content) {\n        if (self.root) {\n          throw \"Cannot have multiple root elements\";\n        }\n        return self.root = content;\n      },\n      element: makeElement,\n      filter: function(name, content) {}\n    };\n    return self;\n  };\n\n  Runtime.VERSION = _dereq_(\"../package.json\").version;\n\n  Runtime.Observable = Observable;\n\n  module.exports = Runtime;\n\n  empty = function(node) {\n    var child, _results;\n    _results = [];\n    while (child = node.firstChild) {\n      _results.push(node.removeChild(child));\n    }\n    return _results;\n  };\n\n  valueIndexOf = function(options, value) {\n    if (typeof value === \"object\") {\n      return options.indexOf(value);\n    } else {\n      return options.map(function(option) {\n        return option.toString();\n      }).indexOf(value.toString());\n    }\n  };\n\n  get = function(x) {\n    if (typeof x === 'function') {\n      return x();\n    } else {\n      return x;\n    }\n  };\n\n}).call(this);\n\n},{\"../package.json\":13,\"o_0\":12}],12:[function(_dereq_,module,exports){\n(function (global){\n// Generated by CoffeeScript 1.8.0\n(function() {\n  var Observable, autoDeps, computeDependencies, copy, extend, flatten, get, last, magicDependency, remove, splat, withBase,\n    __slice = [].slice;\n\n  Observable = function(value, context) {\n    var changed, fn, listeners, notify, notifyReturning, self;\n    if (typeof (value != null ? value.observe : void 0) === \"function\") {\n      return value;\n    }\n    listeners = [];\n    notify = function(newValue) {\n      return copy(listeners).forEach(function(listener) {\n        return listener(newValue);\n      });\n    };\n    if (typeof value === 'function') {\n      fn = value;\n      self = function() {\n        magicDependency(self);\n        return value;\n      };\n      changed = function() {\n        value = computeDependencies(self, fn, changed, context);\n        return notify(value);\n      };\n      value = computeDependencies(self, fn, changed, context);\n    } else {\n      self = function(newValue) {\n        if (arguments.length > 0) {\n          if (value !== newValue) {\n            value = newValue;\n            notify(newValue);\n          }\n        } else {\n          magicDependency(self);\n        }\n        return value;\n      };\n    }\n    self.each = function(callback) {\n      magicDependency(self);\n      if (value != null) {\n        [value].forEach(function(item) {\n          return callback.call(item, item);\n        });\n      }\n      return self;\n    };\n    if (Array.isArray(value)) {\n      [\"concat\", \"every\", \"filter\", \"forEach\", \"indexOf\", \"join\", \"lastIndexOf\", \"map\", \"reduce\", \"reduceRight\", \"slice\", \"some\"].forEach(function(method) {\n        return self[method] = function() {\n          var args;\n          args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];\n          magicDependency(self);\n          return value[method].apply(value, args);\n        };\n      });\n      [\"pop\", \"push\", \"reverse\", \"shift\", \"splice\", \"sort\", \"unshift\"].forEach(function(method) {\n        return self[method] = function() {\n          var args;\n          args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];\n          return notifyReturning(value[method].apply(value, args));\n        };\n      });\n      notifyReturning = function(returnValue) {\n        notify(value);\n        return returnValue;\n      };\n      extend(self, {\n        each: function(callback) {\n          self.forEach(function(item, index) {\n            return callback.call(item, item, index, self);\n          });\n          return self;\n        },\n        remove: function(object) {\n          var index;\n          index = value.indexOf(object);\n          if (index >= 0) {\n            return notifyReturning(value.splice(index, 1)[0]);\n          }\n        },\n        get: function(index) {\n          magicDependency(self);\n          return value[index];\n        },\n        first: function() {\n          magicDependency(self);\n          return value[0];\n        },\n        last: function() {\n          magicDependency(self);\n          return value[value.length - 1];\n        },\n        size: function() {\n          magicDependency(self);\n          return value.length;\n        }\n      });\n    }\n    extend(self, {\n      listeners: listeners,\n      observe: function(listener) {\n        return listeners.push(listener);\n      },\n      stopObserving: function(fn) {\n        return remove(listeners, fn);\n      },\n      toggle: function() {\n        return self(!value);\n      },\n      increment: function(n) {\n        return self(value + n);\n      },\n      decrement: function(n) {\n        return self(value - n);\n      },\n      toString: function() {\n        return \"Observable(\" + value + \")\";\n      }\n    });\n    return self;\n  };\n\n  Observable.concat = function() {\n    var args, o;\n    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];\n    args = Observable(args);\n    o = Observable(function() {\n      return flatten(args.map(splat));\n    });\n    o.push = args.push;\n    return o;\n  };\n\n  module.exports = Observable;\n\n  extend = function() {\n    var name, source, sources, target, _i, _len;\n    target = arguments[0], sources = 2 <= arguments.length ? __slice.call(arguments, 1) : [];\n    for (_i = 0, _len = sources.length; _i < _len; _i++) {\n      source = sources[_i];\n      for (name in source) {\n        target[name] = source[name];\n      }\n    }\n    return target;\n  };\n\n  global.OBSERVABLE_ROOT_HACK = [];\n\n  autoDeps = function() {\n    return last(global.OBSERVABLE_ROOT_HACK);\n  };\n\n  magicDependency = function(self) {\n    var observerStack;\n    if (observerStack = autoDeps()) {\n      return observerStack.push(self);\n    }\n  };\n\n  withBase = function(self, update, fn) {\n    var deps, value, _ref;\n    global.OBSERVABLE_ROOT_HACK.push(deps = []);\n    try {\n      value = fn();\n      if ((_ref = self._deps) != null) {\n        _ref.forEach(function(observable) {\n          return observable.stopObserving(update);\n        });\n      }\n      self._deps = deps;\n      deps.forEach(function(observable) {\n        return observable.observe(update);\n      });\n    } finally {\n      global.OBSERVABLE_ROOT_HACK.pop();\n    }\n    return value;\n  };\n\n  computeDependencies = function(self, fn, update, context) {\n    return withBase(self, update, function() {\n      return fn.call(context);\n    });\n  };\n\n  remove = function(array, value) {\n    var index;\n    index = array.indexOf(value);\n    if (index >= 0) {\n      return array.splice(index, 1)[0];\n    }\n  };\n\n  copy = function(array) {\n    return array.concat([]);\n  };\n\n  get = function(arg) {\n    if (typeof arg === \"function\") {\n      return arg();\n    } else {\n      return arg;\n    }\n  };\n\n  splat = function(item) {\n    var result, results;\n    results = [];\n    if (item == null) {\n      return results;\n    }\n    if (typeof item.forEach === \"function\") {\n      item.forEach(function(i) {\n        return results.push(i);\n      });\n    } else {\n      result = get(item);\n      if (result != null) {\n        results.push(result);\n      }\n    }\n    return results;\n  };\n\n  last = function(array) {\n    return array[array.length - 1];\n  };\n\n  flatten = function(array) {\n    return array.reduce(function(a, b) {\n      return a.concat(b);\n    }, []);\n  };\n\n}).call(this);\n\n}).call(this,typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{}],13:[function(_dereq_,module,exports){\nmodule.exports={\n  \"name\": \"hamlet-runtime\",\n  \"version\": \"0.7.0\",\n  \"devDependencies\": {\n    \"browserify\": \"^4.1.11\",\n    \"coffee-script\": \"~1.7.1\",\n    \"hamlet-compiler\": \"0.7.0\",\n    \"jsdom\": \"^0.10.5\",\n    \"mocha\": \"~1.12.0\",\n    \"uglify-js\": \"~2.3.6\"\n  },\n  \"dependencies\": {\n    \"o_0\": \"0.3.3\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/dr-coffee-labs/hamlet-compiler.git\"\n  },\n  \"scripts\": {\n    \"prepublish\": \"script/prepublish\",\n    \"test\": \"script/test\"\n  },\n  \"files\": [\n    \"dist/\"\n  ],\n  \"main\": \"dist/runtime.js\",\n  \"bugs\": {\n    \"url\": \"https://github.com/dr-coffee-labs/hamlet-compiler/issues\"\n  },\n  \"homepage\": \"https://github.com/dr-coffee-labs/hamlet-compiler\",\n  \"_id\": \"hamlet-runtime@0.7.0\",\n  \"_shasum\": \"2ca3b4729fa92282818cff8f4c5d4f14583538fc\",\n  \"_from\": \"hamlet-runtime@0.7.0\",\n  \"_npmVersion\": \"1.4.9\",\n  \"_npmUser\": {\n    \"name\": \"strd6\",\n    \"email\": \"yahivin@gmail.com\"\n  },\n  \"maintainers\": [\n    {\n      \"name\": \"strd6\",\n      \"email\": \"yahivin@gmail.com\"\n    }\n  ],\n  \"dist\": {\n    \"shasum\": \"2ca3b4729fa92282818cff8f4c5d4f14583538fc\",\n    \"tarball\": \"http://registry.npmjs.org/hamlet-runtime/-/hamlet-runtime-0.7.0.tgz\"\n  },\n  \"directories\": {},\n  \"_resolved\": \"https://registry.npmjs.org/hamlet-runtime/-/hamlet-runtime-0.7.0.tgz\"\n}\n\n},{}]},{},[1])\n(1)\n});\n",
      "type": "blob"
    }
  },
  "progenitor": {
    "url": "https://danielx.net/editor/"
  },
  "entryPoint": "main",
  "remoteDependencies": [
    "https://sdk.amazonaws.com/js/aws-sdk-2.2.42.min.js"
  ],
  "repository": {
    "branch": "master",
    "default_branch": "master",
    "full_name": "STRd6/swag",
    "homepage": null,
    "description": "Serverless Working Applications Group",
    "html_url": "https://github.com/STRd6/swag",
    "url": "https://api.github.com/repos/STRd6/swag",
    "publishBranch": "gh-pages"
  },
  "dependencies": {
    "observable": {
      "source": {
        "LICENSE": {
          "path": "LICENSE",
          "content": "The MIT License (MIT)\n\nCopyright (c) 2014 distri\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\nthe Software, and to permit persons to whom the Software is furnished to do so,\nsubject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\nFOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\nCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\nIN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\nCONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n",
          "mode": "100644",
          "type": "blob"
        },
        "README.md": {
          "path": "README.md",
          "content": "[![Build Status](https://travis-ci.org/distri/observable.svg?branch=npm)](https://travis-ci.org/distri/observable)\n\nObservable\n==========\n\nInstallation\n------------\n\nNode\n\n    npm install o_0\n\nUsage\n-----\n\n    Observable = require \"o_0\"\n\nGet notified when the value changes.\n\n    observable = Observable 5\n\n    observable() # 5\n\n    observable.observe (newValue) ->\n      console.log newValue\n\n    observable 10 # logs 10 to console\n\nArrays\n------\n\nProxy array methods.\n\n    observable = Observable [1, 2, 3]\n\n    observable.forEach (value) ->\n      # 1, 2, 3\n\nFunctions\n---------\n\nAutomagically compute dependencies for observable functions.\n\n    firstName = Observable \"Duder\"\n    lastName = Observable \"Man\"\n\n    o = Observable ->\n      \"#{firstName()} #{lastName()}\"\n\n    o.observe (newValue) ->\n      assert.equal newValue, \"Duder Bro\"\n\n    lastName \"Bro\"\n",
          "mode": "100644",
          "type": "blob"
        },
        "main.coffee.md": {
          "path": "main.coffee.md",
          "content": "Observable\n==========\n\n`Observable` allows for observing arrays, functions, and objects.\n\nFunction dependencies are automagically observed.\n\nStandard array methods are proxied through to the underlying array.\n\n    Observable = (value, context) ->\n\nReturn the object if it is already an observable object.\n\n      return value if typeof value?.observe is \"function\"\n\nMaintain a set of listeners to observe changes and provide a helper to notify each observer.\n\n      listeners = []\n\n      notify = (newValue) ->\n        copy(listeners).forEach (listener) ->\n          listener(newValue)\n\nOur observable function is stored as a reference to `self`.\n\nIf `value` is a function compute dependencies and listen to observables that it depends on.\n\n      if typeof value is 'function'\n        fn = value\n\nOur return function is a function that holds only a cached value which is updated\nwhen it's dependencies change.\n\nThe `magicDependency` call is so other functions can depend on this computed function the\nsame way we depend on other types of observables.\n\n        self = ->\n          # Automagic dependency observation\n          magicDependency(self)\n\n          return value\n\n        self.each = (args...) ->\n          magicDependency(self)\n\n          splat(value).forEach(args...)\n\n        changed = ->\n          value = computeDependencies(self, fn, changed, context)\n          notify(value)\n\n        value = computeDependencies(self, fn, changed, context)\n\n      else\n\nWhen called with zero arguments it is treated as a getter. When called with one argument it is treated as a setter.\n\nChanges to the value will trigger notifications.\n\nThe value is always returned.\n\n        self = (newValue) ->\n          if arguments.length > 0\n            if value != newValue\n              value = newValue\n\n              notify(newValue)\n          else\n            # Automagic dependency observation\n            magicDependency(self)\n\n          return value\n\nThis `each` iterator is similar to [the Maybe monad](http://en.wikipedia.org/wiki/Monad_&#40;functional_programming&#41;#The_Maybe_monad) in that our observable may contain a single value or nothing at all.\n\n      self.each = (args...) ->\n        magicDependency(self)\n\n        if value?\n          [value].forEach(args...)\n\nIf the value is an array then proxy array methods and add notifications to mutation events.\n\n      if Array.isArray(value)\n        [\n          \"concat\"\n          \"every\"\n          \"filter\"\n          \"forEach\"\n          \"indexOf\"\n          \"join\"\n          \"lastIndexOf\"\n          \"map\"\n          \"reduce\"\n          \"reduceRight\"\n          \"slice\"\n          \"some\"\n        ].forEach (method) ->\n          self[method] = (args...) ->\n            magicDependency(self)\n            value[method](args...)\n\n        [\n          \"pop\"\n          \"push\"\n          \"reverse\"\n          \"shift\"\n          \"splice\"\n          \"sort\"\n          \"unshift\"\n        ].forEach (method) ->\n          self[method] = (args...) ->\n            notifyReturning value[method](args...)\n\n        notifyReturning = (returnValue) ->\n          notify(value)\n\n          return returnValue\n\nAdd some extra helpful methods to array observables.\n\n        extend self,\n          each: (args...) ->\n            self.forEach(args...)\n\n            return self\n\nRemove an element from the array and notify observers of changes.\n\n          remove: (object) ->\n            index = value.indexOf(object)\n\n            if index >= 0\n              notifyReturning value.splice(index, 1)[0]\n\n          get: (index) ->\n            value[index]\n\n          first: ->\n            value[0]\n\n          last: ->\n            value[value.length-1]\n\n      extend self,\n        listeners: listeners\n\n        observe: (listener) ->\n          listeners.push listener\n\n        stopObserving: (fn) ->\n          remove listeners, fn\n\n        toggle: ->\n          self !value\n\n        increment: (n) ->\n          self value + n\n\n        decrement: (n) ->\n          self value - n\n\n        toString: ->\n          \"Observable(#{value})\"\n\n      return self\n\n    Observable.concat = (args...) ->\n      args = Observable(args)\n\n      o = Observable ->\n        flatten args.map(splat)\n\n      o.push = args.push\n\n      return o\n\nExport `Observable`\n\n    module.exports = Observable\n\nAppendix\n--------\n\nThe extend method adds one objects properties to another.\n\n    extend = (target, sources...) ->\n      for source in sources\n        for name of source\n          target[name] = source[name]\n\n      return target\n\nSuper hax for computing dependencies. This needs to be a shared global so that\ndifferent bundled versions of observable libraries can interoperate.\n\n    global.OBSERVABLE_ROOT_HACK = []\n\n    autoDeps = ->\n      last(global.OBSERVABLE_ROOT_HACK)\n\n    magicDependency = (self) ->\n      if observerStack = autoDeps()\n        observerStack.push self\n\n    withBase = (self, update, fn) ->\n      global.OBSERVABLE_ROOT_HACK.push(deps = [])\n\n      try\n        value = fn()\n        self._deps?.forEach (observable) ->\n          observable.stopObserving update\n\n        self._deps = deps\n\n        deps.forEach (observable) ->\n          observable.observe update\n      finally\n        global.OBSERVABLE_ROOT_HACK.pop()\n\n      return value\n\nAutomagically compute dependencies.\n\n    computeDependencies = (self, fn, update, context) ->\n      withBase self, update, ->\n        fn.call(context)\n\nRemove a value from an array.\n\n    remove = (array, value) ->\n      index = array.indexOf(value)\n\n      if index >= 0\n        array.splice(index, 1)[0]\n\n    copy = (array) ->\n      array.concat([])\n\n    get = (arg) ->\n      if typeof arg is \"function\"\n        arg()\n      else\n        arg\n\n    splat = (item) ->\n      results = []\n\n      if typeof item.forEach is \"function\"\n        item.forEach (i) ->\n          results.push i\n      else\n        result = get item\n\n        results.push result if result?\n\n      results\n\n    last = (array) ->\n      array[array.length - 1]\n\n    flatten = (array) ->\n      array.reduce (a, b) ->\n        a.concat(b)\n      , []\n",
          "mode": "100644",
          "type": "blob"
        },
        "pixie.cson": {
          "path": "pixie.cson",
          "content": "version: \"0.2.0-pre.1\"\n",
          "mode": "100644",
          "type": "blob"
        },
        "test/observable.coffee": {
          "path": "test/observable.coffee",
          "content": "global.Observable = require \"../main\"\n\ndescribe 'Observable', ->\n  it 'should create an observable for an object', ->\n    n = 5\n\n    observable = Observable(n)\n\n    assert.equal(observable(), n)\n\n  it 'should fire events when setting', ->\n    string = \"yolo\"\n\n    observable = Observable(string)\n    observable.observe (newValue) ->\n      assert.equal newValue, \"4life\"\n\n    observable(\"4life\")\n\n  it 'should be idempotent', ->\n    o = Observable(5)\n\n    assert.equal o, Observable(o)\n\n  describe \"#each\", ->\n    it \"should be invoked once if there is an observable\", ->\n      o = Observable(5)\n      called = 0\n\n      o.each (value) ->\n        called += 1\n        assert.equal value, 5\n\n      assert.equal called, 1\n\n    it \"should not be invoked if observable is null\", ->\n      o = Observable(null)\n      called = 0\n\n      o.each (value) ->\n        called += 1\n\n      assert.equal called, 0\n\n  it \"should allow for stopping observation\", ->\n    observable = Observable(\"string\")\n\n    called = 0\n    fn = (newValue) ->\n      called += 1\n      assert.equal newValue, \"4life\"\n\n    observable.observe fn\n\n    observable(\"4life\")\n\n    observable.stopObserving fn\n\n    observable(\"wat\")\n\n    assert.equal called, 1\n\n  it \"should increment\", ->\n    observable = Observable 1\n\n    observable.increment(5)\n\n    assert.equal observable(), 6\n\n  it \"should decremnet\", ->\n    observable = Observable 1\n\n    observable.decrement 5\n\n    assert.equal observable(), -4\n\n  it \"should toggle\", ->\n    observable = Observable false\n\n    observable.toggle()\n    assert.equal observable(), true\n\n    observable.toggle()\n    assert.equal observable(), false\n\n  it \"should trigger when toggling\", (done) ->\n    observable = Observable true\n    observable.observe (v) ->\n      assert.equal v, false\n      done()\n\n    observable.toggle()\n\ndescribe \"Observable Array\", ->\n  it \"should proxy array methods\", ->\n    o = Observable [5]\n\n    o.map (n) ->\n      assert.equal n, 5\n\n  it \"should notify on mutation methods\", (done) ->\n    o = Observable []\n\n    o.observe (newValue) ->\n      assert.equal newValue[0], 1\n\n    o.push 1\n\n    done()\n\n  it \"should have an each method\", ->\n    o = Observable []\n\n    assert o.each\n\n  it \"#get\", ->\n    o = Observable [0, 1, 2, 3]\n\n    assert.equal o.get(2), 2\n\n  it \"#first\", ->\n    o = Observable [0, 1, 2, 3]\n\n    assert.equal o.first(), 0\n\n  it \"#last\", ->\n    o = Observable [0, 1, 2, 3]\n\n    assert.equal o.last(), 3\n\n  it \"#remove\", (done) ->\n    o = Observable [0, 1, 2, 3]\n\n    o.observe (newValue) ->\n      assert.equal newValue.length, 3\n      setTimeout ->\n        done()\n      , 0\n\n    assert.equal o.remove(2), 2\n\n  # TODO: This looks like it might be impossible\n  it \"should proxy the length property\"\n\ndescribe \"Observable functions\", ->\n  it \"should compute dependencies\", (done) ->\n    firstName = Observable \"Duder\"\n    lastName = Observable \"Man\"\n\n    o = Observable ->\n      \"#{firstName()} #{lastName()}\"\n\n    o.observe (newValue) ->\n      assert.equal newValue, \"Duder Bro\"\n\n      done()\n\n    lastName \"Bro\"\n\n  it \"should allow double nesting\", (done) ->\n    bottom = Observable \"rad\"\n    middle = Observable ->\n      bottom()\n    top = Observable ->\n      middle()\n\n    top.observe (newValue) ->\n      assert.equal newValue, \"wat\"\n      assert.equal top(), newValue\n      assert.equal middle(), newValue\n\n      done()\n\n    bottom(\"wat\")\n\n  it \"should work with dynamic dependencies\", ->\n    observableArray = Observable []\n\n    dynamicObservable = Observable ->\n      observableArray.filter (item) ->\n        item.age() > 3\n\n    assert.equal dynamicObservable().length, 0\n\n    observableArray.push\n      age: Observable 1\n\n    observableArray()[0].age 5\n    assert.equal dynamicObservable().length, 1\n\n  it \"should work with context\", ->\n    model =\n      a: Observable \"Hello\"\n      b: Observable \"there\"\n\n    model.c = Observable ->\n      \"#{@a()} #{@b()}\"\n    , model\n\n    assert.equal model.c(), \"Hello there\"\n\n    model.b \"world\"\n\n    assert.equal model.c(), \"Hello world\"\n\n  it \"should be ok even if the function throws an exception\", ->\n    assert.throws ->\n      t = Observable ->\n        throw \"wat\"\n\n    # TODO: Should be able to find a test case that is affected by this rather that\n    # checking it directly\n    assert.equal global.OBSERVABLE_ROOT_HACK.length, 0\n\n  it \"should have an each method\", ->\n    o = Observable ->\n\n    assert o.each\n\n  it \"should not invoke when returning undefined\", ->\n    o = Observable ->\n\n    o.each ->\n      assert false\n\n  it \"should invoke when returning any defined value\", (done) ->\n    o = Observable -> 5\n\n    o.each (n) ->\n      assert.equal n, 5\n      done()\n\n  it \"should work on an array dependency\", ->\n    oA = Observable [1, 2, 3]\n\n    o = Observable ->\n      oA()[0]\n\n    last = Observable ->\n      oA()[oA().length-1]\n\n    assert.equal o(), 1\n\n    oA.unshift 0\n\n    assert.equal o(), 0\n\n    oA.push 4\n\n    assert.equal last(), 4, \"Last should be 4\"\n\n  it \"should work with multiple dependencies\", ->\n    letter = Observable \"A\"\n    checked = ->\n      l = letter()\n      @name().indexOf(l) is 0\n\n    first = {name: Observable(\"Andrew\")}\n    first.checked = Observable checked, first\n\n    second = {name: Observable(\"Benjamin\")}\n    second.checked = Observable checked, second\n\n    assert.equal first.checked(), true\n    assert.equal second.checked(), false\n\n    assert.equal letter.listeners.length, 2\n\n    letter \"B\"\n\n    assert.equal first.checked(), false\n    assert.equal second.checked(), true\n\n  it \"should work with nested observable construction\", ->\n    gen = Observable ->\n      Observable \"Duder\"\n\n    o = gen()\n\n    assert.equal o(), \"Duder\"\n\n    o(\"wat\")\n\n    assert.equal o(), \"wat\"\n\n  describe \"Scoping\", ->\n    it \"should be scoped to optional context\", (done) ->\n      model =\n        firstName: Observable \"Duder\"\n        lastName: Observable \"Man\"\n\n      model.name = Observable ->\n        \"#{@firstName()} #{@lastName()}\"\n      , model\n\n      model.name.observe (newValue) ->\n        assert.equal newValue, \"Duder Bro\"\n\n        done()\n\n      model.lastName \"Bro\"\n\n  describe \"concat\", ->\n    it \"should return an observable array that changes based on changes in inputs\", ->\n      numbers = Observable [1, 2, 3]\n      letters = Observable [\"a\", \"b\", \"c\"]\n      item = Observable({})\n      nullable = Observable null\n\n      observableArray = Observable.concat numbers, \"literal\", letters, item, nullable\n\n      assert.equal observableArray().length, 3 + 1 + 3 + 1\n\n      assert.equal observableArray()[0], 1\n      assert.equal observableArray()[3], \"literal\"\n      assert.equal observableArray()[4], \"a\"\n      assert.equal observableArray()[7], item()\n\n      numbers.push 4\n\n      assert.equal observableArray().length, 9\n\n      nullable \"cool\"\n\n      assert.equal observableArray().length, 10\n\n    it \"should work with observable functions that return arrays\", ->\n      item = Observable(\"wat\")\n\n      computedArray = Observable ->\n        [item()]\n\n      observableArray = Observable.concat computedArray, computedArray\n\n      assert.equal observableArray().length, 2\n\n      assert.equal observableArray()[1], \"wat\"\n\n      item \"yolo\"\n\n      assert.equal observableArray()[1], \"yolo\"\n\n    it \"should have a push method\", ->\n      observableArray = Observable.concat()\n\n      observable = Observable \"hey\"\n\n      observableArray.push observable\n\n      assert.equal observableArray()[0], \"hey\"\n\n      observable \"wat\"\n\n      assert.equal observableArray()[0], \"wat\"\n\n      observableArray.push \"cool\"\n      observableArray.push \"radical\"\n\n      assert.equal observableArray().length, 3\n\n    it \"should be observable\", (done) ->\n      observableArray = Observable.concat()\n\n      observableArray.observe (items) ->\n        assert.equal items.length, 3\n        done()\n\n      observableArray.push [\"A\", \"B\", \"C\"]\n\n    it \"should have an each method\", ->\n      observableArray = Observable.concat([\"A\", \"B\", \"C\"])\n\n      n = 0\n      observableArray.each () ->\n        n += 1\n\n      assert.equal n, 3\n",
          "mode": "100644",
          "type": "blob"
        }
      },
      "distribution": {
        "main": {
          "path": "main",
          "content": "(function() {\n  var Observable, autoDeps, computeDependencies, copy, extend, flatten, get, last, magicDependency, remove, splat, withBase,\n    __slice = [].slice;\n\n  Observable = function(value, context) {\n    var changed, fn, listeners, notify, notifyReturning, self;\n    if (typeof (value != null ? value.observe : void 0) === \"function\") {\n      return value;\n    }\n    listeners = [];\n    notify = function(newValue) {\n      return copy(listeners).forEach(function(listener) {\n        return listener(newValue);\n      });\n    };\n    if (typeof value === 'function') {\n      fn = value;\n      self = function() {\n        magicDependency(self);\n        return value;\n      };\n      self.each = function() {\n        var args, _ref;\n        args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];\n        magicDependency(self);\n        return (_ref = splat(value)).forEach.apply(_ref, args);\n      };\n      changed = function() {\n        value = computeDependencies(self, fn, changed, context);\n        return notify(value);\n      };\n      value = computeDependencies(self, fn, changed, context);\n    } else {\n      self = function(newValue) {\n        if (arguments.length > 0) {\n          if (value !== newValue) {\n            value = newValue;\n            notify(newValue);\n          }\n        } else {\n          magicDependency(self);\n        }\n        return value;\n      };\n    }\n    self.each = function() {\n      var args, _ref;\n      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];\n      magicDependency(self);\n      if (value != null) {\n        return (_ref = [value]).forEach.apply(_ref, args);\n      }\n    };\n    if (Array.isArray(value)) {\n      [\"concat\", \"every\", \"filter\", \"forEach\", \"indexOf\", \"join\", \"lastIndexOf\", \"map\", \"reduce\", \"reduceRight\", \"slice\", \"some\"].forEach(function(method) {\n        return self[method] = function() {\n          var args;\n          args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];\n          magicDependency(self);\n          return value[method].apply(value, args);\n        };\n      });\n      [\"pop\", \"push\", \"reverse\", \"shift\", \"splice\", \"sort\", \"unshift\"].forEach(function(method) {\n        return self[method] = function() {\n          var args;\n          args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];\n          return notifyReturning(value[method].apply(value, args));\n        };\n      });\n      notifyReturning = function(returnValue) {\n        notify(value);\n        return returnValue;\n      };\n      extend(self, {\n        each: function() {\n          var args;\n          args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];\n          self.forEach.apply(self, args);\n          return self;\n        },\n        remove: function(object) {\n          var index;\n          index = value.indexOf(object);\n          if (index >= 0) {\n            return notifyReturning(value.splice(index, 1)[0]);\n          }\n        },\n        get: function(index) {\n          return value[index];\n        },\n        first: function() {\n          return value[0];\n        },\n        last: function() {\n          return value[value.length - 1];\n        }\n      });\n    }\n    extend(self, {\n      listeners: listeners,\n      observe: function(listener) {\n        return listeners.push(listener);\n      },\n      stopObserving: function(fn) {\n        return remove(listeners, fn);\n      },\n      toggle: function() {\n        return self(!value);\n      },\n      increment: function(n) {\n        return self(value + n);\n      },\n      decrement: function(n) {\n        return self(value - n);\n      },\n      toString: function() {\n        return \"Observable(\" + value + \")\";\n      }\n    });\n    return self;\n  };\n\n  Observable.concat = function() {\n    var args, o;\n    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];\n    args = Observable(args);\n    o = Observable(function() {\n      return flatten(args.map(splat));\n    });\n    o.push = args.push;\n    return o;\n  };\n\n  module.exports = Observable;\n\n  extend = function() {\n    var name, source, sources, target, _i, _len;\n    target = arguments[0], sources = 2 <= arguments.length ? __slice.call(arguments, 1) : [];\n    for (_i = 0, _len = sources.length; _i < _len; _i++) {\n      source = sources[_i];\n      for (name in source) {\n        target[name] = source[name];\n      }\n    }\n    return target;\n  };\n\n  global.OBSERVABLE_ROOT_HACK = [];\n\n  autoDeps = function() {\n    return last(global.OBSERVABLE_ROOT_HACK);\n  };\n\n  magicDependency = function(self) {\n    var observerStack;\n    if (observerStack = autoDeps()) {\n      return observerStack.push(self);\n    }\n  };\n\n  withBase = function(self, update, fn) {\n    var deps, value, _ref;\n    global.OBSERVABLE_ROOT_HACK.push(deps = []);\n    try {\n      value = fn();\n      if ((_ref = self._deps) != null) {\n        _ref.forEach(function(observable) {\n          return observable.stopObserving(update);\n        });\n      }\n      self._deps = deps;\n      deps.forEach(function(observable) {\n        return observable.observe(update);\n      });\n    } finally {\n      global.OBSERVABLE_ROOT_HACK.pop();\n    }\n    return value;\n  };\n\n  computeDependencies = function(self, fn, update, context) {\n    return withBase(self, update, function() {\n      return fn.call(context);\n    });\n  };\n\n  remove = function(array, value) {\n    var index;\n    index = array.indexOf(value);\n    if (index >= 0) {\n      return array.splice(index, 1)[0];\n    }\n  };\n\n  copy = function(array) {\n    return array.concat([]);\n  };\n\n  get = function(arg) {\n    if (typeof arg === \"function\") {\n      return arg();\n    } else {\n      return arg;\n    }\n  };\n\n  splat = function(item) {\n    var result, results;\n    results = [];\n    if (typeof item.forEach === \"function\") {\n      item.forEach(function(i) {\n        return results.push(i);\n      });\n    } else {\n      result = get(item);\n      if (result != null) {\n        results.push(result);\n      }\n    }\n    return results;\n  };\n\n  last = function(array) {\n    return array[array.length - 1];\n  };\n\n  flatten = function(array) {\n    return array.reduce(function(a, b) {\n      return a.concat(b);\n    }, []);\n  };\n\n}).call(this);\n",
          "type": "blob"
        },
        "pixie": {
          "path": "pixie",
          "content": "module.exports = {\"version\":\"0.2.0-pre.1\"};",
          "type": "blob"
        },
        "test/observable": {
          "path": "test/observable",
          "content": "(function() {\n  global.Observable = require(\"../main\");\n\n  describe('Observable', function() {\n    it('should create an observable for an object', function() {\n      var n, observable;\n      n = 5;\n      observable = Observable(n);\n      return assert.equal(observable(), n);\n    });\n    it('should fire events when setting', function() {\n      var observable, string;\n      string = \"yolo\";\n      observable = Observable(string);\n      observable.observe(function(newValue) {\n        return assert.equal(newValue, \"4life\");\n      });\n      return observable(\"4life\");\n    });\n    it('should be idempotent', function() {\n      var o;\n      o = Observable(5);\n      return assert.equal(o, Observable(o));\n    });\n    describe(\"#each\", function() {\n      it(\"should be invoked once if there is an observable\", function() {\n        var called, o;\n        o = Observable(5);\n        called = 0;\n        o.each(function(value) {\n          called += 1;\n          return assert.equal(value, 5);\n        });\n        return assert.equal(called, 1);\n      });\n      return it(\"should not be invoked if observable is null\", function() {\n        var called, o;\n        o = Observable(null);\n        called = 0;\n        o.each(function(value) {\n          return called += 1;\n        });\n        return assert.equal(called, 0);\n      });\n    });\n    it(\"should allow for stopping observation\", function() {\n      var called, fn, observable;\n      observable = Observable(\"string\");\n      called = 0;\n      fn = function(newValue) {\n        called += 1;\n        return assert.equal(newValue, \"4life\");\n      };\n      observable.observe(fn);\n      observable(\"4life\");\n      observable.stopObserving(fn);\n      observable(\"wat\");\n      return assert.equal(called, 1);\n    });\n    it(\"should increment\", function() {\n      var observable;\n      observable = Observable(1);\n      observable.increment(5);\n      return assert.equal(observable(), 6);\n    });\n    it(\"should decremnet\", function() {\n      var observable;\n      observable = Observable(1);\n      observable.decrement(5);\n      return assert.equal(observable(), -4);\n    });\n    it(\"should toggle\", function() {\n      var observable;\n      observable = Observable(false);\n      observable.toggle();\n      assert.equal(observable(), true);\n      observable.toggle();\n      return assert.equal(observable(), false);\n    });\n    return it(\"should trigger when toggling\", function(done) {\n      var observable;\n      observable = Observable(true);\n      observable.observe(function(v) {\n        assert.equal(v, false);\n        return done();\n      });\n      return observable.toggle();\n    });\n  });\n\n  describe(\"Observable Array\", function() {\n    it(\"should proxy array methods\", function() {\n      var o;\n      o = Observable([5]);\n      return o.map(function(n) {\n        return assert.equal(n, 5);\n      });\n    });\n    it(\"should notify on mutation methods\", function(done) {\n      var o;\n      o = Observable([]);\n      o.observe(function(newValue) {\n        return assert.equal(newValue[0], 1);\n      });\n      o.push(1);\n      return done();\n    });\n    it(\"should have an each method\", function() {\n      var o;\n      o = Observable([]);\n      return assert(o.each);\n    });\n    it(\"#get\", function() {\n      var o;\n      o = Observable([0, 1, 2, 3]);\n      return assert.equal(o.get(2), 2);\n    });\n    it(\"#first\", function() {\n      var o;\n      o = Observable([0, 1, 2, 3]);\n      return assert.equal(o.first(), 0);\n    });\n    it(\"#last\", function() {\n      var o;\n      o = Observable([0, 1, 2, 3]);\n      return assert.equal(o.last(), 3);\n    });\n    it(\"#remove\", function(done) {\n      var o;\n      o = Observable([0, 1, 2, 3]);\n      o.observe(function(newValue) {\n        assert.equal(newValue.length, 3);\n        return setTimeout(function() {\n          return done();\n        }, 0);\n      });\n      return assert.equal(o.remove(2), 2);\n    });\n    return it(\"should proxy the length property\");\n  });\n\n  describe(\"Observable functions\", function() {\n    it(\"should compute dependencies\", function(done) {\n      var firstName, lastName, o;\n      firstName = Observable(\"Duder\");\n      lastName = Observable(\"Man\");\n      o = Observable(function() {\n        return \"\" + (firstName()) + \" \" + (lastName());\n      });\n      o.observe(function(newValue) {\n        assert.equal(newValue, \"Duder Bro\");\n        return done();\n      });\n      return lastName(\"Bro\");\n    });\n    it(\"should allow double nesting\", function(done) {\n      var bottom, middle, top;\n      bottom = Observable(\"rad\");\n      middle = Observable(function() {\n        return bottom();\n      });\n      top = Observable(function() {\n        return middle();\n      });\n      top.observe(function(newValue) {\n        assert.equal(newValue, \"wat\");\n        assert.equal(top(), newValue);\n        assert.equal(middle(), newValue);\n        return done();\n      });\n      return bottom(\"wat\");\n    });\n    it(\"should work with dynamic dependencies\", function() {\n      var dynamicObservable, observableArray;\n      observableArray = Observable([]);\n      dynamicObservable = Observable(function() {\n        return observableArray.filter(function(item) {\n          return item.age() > 3;\n        });\n      });\n      assert.equal(dynamicObservable().length, 0);\n      observableArray.push({\n        age: Observable(1)\n      });\n      observableArray()[0].age(5);\n      return assert.equal(dynamicObservable().length, 1);\n    });\n    it(\"should work with context\", function() {\n      var model;\n      model = {\n        a: Observable(\"Hello\"),\n        b: Observable(\"there\")\n      };\n      model.c = Observable(function() {\n        return \"\" + (this.a()) + \" \" + (this.b());\n      }, model);\n      assert.equal(model.c(), \"Hello there\");\n      model.b(\"world\");\n      return assert.equal(model.c(), \"Hello world\");\n    });\n    it(\"should be ok even if the function throws an exception\", function() {\n      assert.throws(function() {\n        var t;\n        return t = Observable(function() {\n          throw \"wat\";\n        });\n      });\n      return assert.equal(global.OBSERVABLE_ROOT_HACK.length, 0);\n    });\n    it(\"should have an each method\", function() {\n      var o;\n      o = Observable(function() {});\n      return assert(o.each);\n    });\n    it(\"should not invoke when returning undefined\", function() {\n      var o;\n      o = Observable(function() {});\n      return o.each(function() {\n        return assert(false);\n      });\n    });\n    it(\"should invoke when returning any defined value\", function(done) {\n      var o;\n      o = Observable(function() {\n        return 5;\n      });\n      return o.each(function(n) {\n        assert.equal(n, 5);\n        return done();\n      });\n    });\n    it(\"should work on an array dependency\", function() {\n      var last, o, oA;\n      oA = Observable([1, 2, 3]);\n      o = Observable(function() {\n        return oA()[0];\n      });\n      last = Observable(function() {\n        return oA()[oA().length - 1];\n      });\n      assert.equal(o(), 1);\n      oA.unshift(0);\n      assert.equal(o(), 0);\n      oA.push(4);\n      return assert.equal(last(), 4, \"Last should be 4\");\n    });\n    it(\"should work with multiple dependencies\", function() {\n      var checked, first, letter, second;\n      letter = Observable(\"A\");\n      checked = function() {\n        var l;\n        l = letter();\n        return this.name().indexOf(l) === 0;\n      };\n      first = {\n        name: Observable(\"Andrew\")\n      };\n      first.checked = Observable(checked, first);\n      second = {\n        name: Observable(\"Benjamin\")\n      };\n      second.checked = Observable(checked, second);\n      assert.equal(first.checked(), true);\n      assert.equal(second.checked(), false);\n      assert.equal(letter.listeners.length, 2);\n      letter(\"B\");\n      assert.equal(first.checked(), false);\n      return assert.equal(second.checked(), true);\n    });\n    it(\"should work with nested observable construction\", function() {\n      var gen, o;\n      gen = Observable(function() {\n        return Observable(\"Duder\");\n      });\n      o = gen();\n      assert.equal(o(), \"Duder\");\n      o(\"wat\");\n      return assert.equal(o(), \"wat\");\n    });\n    describe(\"Scoping\", function() {\n      return it(\"should be scoped to optional context\", function(done) {\n        var model;\n        model = {\n          firstName: Observable(\"Duder\"),\n          lastName: Observable(\"Man\")\n        };\n        model.name = Observable(function() {\n          return \"\" + (this.firstName()) + \" \" + (this.lastName());\n        }, model);\n        model.name.observe(function(newValue) {\n          assert.equal(newValue, \"Duder Bro\");\n          return done();\n        });\n        return model.lastName(\"Bro\");\n      });\n    });\n    return describe(\"concat\", function() {\n      it(\"should return an observable array that changes based on changes in inputs\", function() {\n        var item, letters, nullable, numbers, observableArray;\n        numbers = Observable([1, 2, 3]);\n        letters = Observable([\"a\", \"b\", \"c\"]);\n        item = Observable({});\n        nullable = Observable(null);\n        observableArray = Observable.concat(numbers, \"literal\", letters, item, nullable);\n        assert.equal(observableArray().length, 3 + 1 + 3 + 1);\n        assert.equal(observableArray()[0], 1);\n        assert.equal(observableArray()[3], \"literal\");\n        assert.equal(observableArray()[4], \"a\");\n        assert.equal(observableArray()[7], item());\n        numbers.push(4);\n        assert.equal(observableArray().length, 9);\n        nullable(\"cool\");\n        return assert.equal(observableArray().length, 10);\n      });\n      it(\"should work with observable functions that return arrays\", function() {\n        var computedArray, item, observableArray;\n        item = Observable(\"wat\");\n        computedArray = Observable(function() {\n          return [item()];\n        });\n        observableArray = Observable.concat(computedArray, computedArray);\n        assert.equal(observableArray().length, 2);\n        assert.equal(observableArray()[1], \"wat\");\n        item(\"yolo\");\n        return assert.equal(observableArray()[1], \"yolo\");\n      });\n      it(\"should have a push method\", function() {\n        var observable, observableArray;\n        observableArray = Observable.concat();\n        observable = Observable(\"hey\");\n        observableArray.push(observable);\n        assert.equal(observableArray()[0], \"hey\");\n        observable(\"wat\");\n        assert.equal(observableArray()[0], \"wat\");\n        observableArray.push(\"cool\");\n        observableArray.push(\"radical\");\n        return assert.equal(observableArray().length, 3);\n      });\n      it(\"should be observable\", function(done) {\n        var observableArray;\n        observableArray = Observable.concat();\n        observableArray.observe(function(items) {\n          assert.equal(items.length, 3);\n          return done();\n        });\n        return observableArray.push([\"A\", \"B\", \"C\"]);\n      });\n      return it(\"should have an each method\", function() {\n        var n, observableArray;\n        observableArray = Observable.concat([\"A\", \"B\", \"C\"]);\n        n = 0;\n        observableArray.each(function() {\n          return n += 1;\n        });\n        return assert.equal(n, 3);\n      });\n    });\n  });\n\n}).call(this);\n",
          "type": "blob"
        }
      },
      "progenitor": {
        "url": "http://www.danielx.net/editor/"
      },
      "version": "0.2.0-pre.1",
      "entryPoint": "main",
      "repository": {
        "branch": "master",
        "default_branch": "master",
        "full_name": "distri/observable",
        "homepage": null,
        "description": "",
        "html_url": "https://github.com/distri/observable",
        "url": "https://api.github.com/repos/distri/observable",
        "publishBranch": "gh-pages"
      },
      "dependencies": {}
    },
    "postmaster": {
      "source": {
        "LICENSE": {
          "path": "LICENSE",
          "content": "The MIT License (MIT)\n\nCopyright (c) 2013 distri\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\nthe Software, and to permit persons to whom the Software is furnished to do so,\nsubject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\nFOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\nCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\nIN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\nCONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n",
          "mode": "100644",
          "type": "blob"
        },
        "README.md": {
          "path": "README.md",
          "content": "postmaster\n==========\n\nSend and receive `postMessage` commands using promises to handle the results.\n",
          "mode": "100644",
          "type": "blob"
        },
        "main.coffee": {
          "path": "main.coffee",
          "content": "###\n\nPostmaster wraps the `postMessage` API with promises.\n\n###\n\ndefaultReceiver = self\nackTimeout = 1000\n\nmodule.exports = Postmaster = (I={}, self={}) ->\n  send = (data) ->\n    target = self.remoteTarget()\n    if !Worker? or target instanceof Worker\n      target.postMessage data\n    else\n      target.postMessage data, \"*\"\n\n  dominant = Postmaster.dominant()\n  self.remoteTarget ?= -> dominant\n  self.receiver ?= -> defaultReceiver\n  self.ackTimeout ?= -> ackTimeout\n\n  self.receiver().addEventListener \"message\", (event) ->\n    # Only listening to messages from `opener`\n    if event.source is self.remoteTarget() or !event.source\n      data = event.data\n      {type, method, params, id} = data\n\n      switch type\n        when \"ack\"\n          pendingResponses[id]?.ack = true\n        when \"response\"\n          pendingResponses[id].resolve data.result\n        when \"error\"\n          pendingResponses[id].reject data.error\n        when \"message\"\n          send\n            type: \"ack\"\n            id: id\n\n          Promise.resolve()\n          .then ->\n            self[method](params...)\n          .then (result) ->\n            send\n              type: \"response\"\n              id: id\n              result: result\n          .catch (error) ->\n            if typeof error is \"string\"\n              message = error\n            else\n              message = error.message\n\n            send\n              type: \"error\"\n              id: id\n              error:\n                message: message\n                stack: error.stack\n\n  pendingResponses = {}\n  remoteId = 0\n\n  self.invokeRemote = (method, params...) ->\n    id = remoteId++\n\n    send\n      type: \"message\"\n      method: method\n      params: params\n      id: id\n\n    new Promise (resolve, reject) ->\n      clear = ->\n        clearTimeout pendingResponses[id].timeout\n        delete pendingResponses[id]\n\n      ackWait = self.ackTimeout()\n      timeout = setTimeout ->\n        pendingResponse = pendingResponses[id]\n        if pendingResponse and !pendingResponse.ack\n          clear()\n          reject new Error \"No ack received within #{ackWait}\"\n      , ackWait\n\n      pendingResponses[id] =\n        timeout: timeout\n        resolve: (result) ->\n          clear()\n          resolve(result)\n        reject: (error) ->\n          clear()\n          reject(error)\n\n  return self\n\nPostmaster.dominant = ->\n  if window? # iframe or child window context\n    opener or ((parent != window) and parent) or undefined\n  else # Web Worker Context\n    self\n\nreturn Postmaster\n",
          "mode": "100644",
          "type": "blob"
        },
        "pixie.cson": {
          "path": "pixie.cson",
          "content": "version: \"0.4.0\"\n",
          "mode": "100644",
          "type": "blob"
        },
        "test/postmaster.coffee": {
          "path": "test/postmaster.coffee",
          "content": "Postmaster = require \"../main\"\n\nscriptContent = ->\n  fn = ->\n    pm = Postmaster()\n    pm.echo = (value) ->\n      return value\n    pm.throws = ->\n      throw new Error(\"This always throws\")\n    pm.promiseFail = ->\n      Promise.reject new Error \"This is a failed promise\"\n\n  \"\"\"\n    var module = {};\n    Postmaster = #{PACKAGE.distribution.main.content};\n    (#{fn.toString()})();\n  \"\"\"\n\ninitWindow = (targetWindow) ->\n  targetWindow.document.write \"<script>#{scriptContent()}<\\/script>\"\n\ndescribe \"Postmaster\", ->\n  it \"should work with openened windows\", (done) ->\n    childWindow = open(\"\", null, \"width=200,height=200\")\n\n    initWindow(childWindow)\n\n    postmaster = Postmaster()\n    postmaster.remoteTarget = -> childWindow\n    postmaster.invokeRemote \"echo\", 5\n    .then (result) ->\n      assert.equal result, 5\n    .then ->\n      done()\n    , (error) ->\n      done(error)\n    .then ->\n      childWindow.close()\n\n  it \"should work with iframes\", (done) ->\n    iframe = document.createElement('iframe')\n    document.body.appendChild(iframe)\n\n    childWindow = iframe.contentWindow\n    initWindow(childWindow)\n\n    postmaster = Postmaster()\n    postmaster.remoteTarget = -> childWindow\n    postmaster.invokeRemote \"echo\", 17\n    .then (result) ->\n      assert.equal result, 17\n    .then ->\n      done()\n    , (error) ->\n      done(error)\n    .then ->\n      iframe.remove()\n\n  it \"should handle the remote call throwing errors\", (done) ->\n    iframe = document.createElement('iframe')\n    document.body.appendChild(iframe)\n\n    childWindow = iframe.contentWindow\n    initWindow(childWindow)\n\n    postmaster = Postmaster()\n    postmaster.remoteTarget = -> childWindow\n    postmaster.invokeRemote \"throws\"\n    .catch (error) ->\n      done()\n    .then ->\n      iframe.remove()\n\n  it \"should handle the remote call returning failed promises\", (done) ->\n    iframe = document.createElement('iframe')\n    document.body.appendChild(iframe)\n\n    childWindow = iframe.contentWindow\n    initWindow(childWindow)\n\n    postmaster = Postmaster()\n    postmaster.remoteTarget = -> childWindow\n    postmaster.invokeRemote \"promiseFail\"\n    .catch (error) ->\n      done()\n    .then ->\n      iframe.remove()\n\n  it \"should be able to go around the world\", (done) ->\n    iframe = document.createElement('iframe')\n    document.body.appendChild(iframe)\n\n    childWindow = iframe.contentWindow\n    initWindow(childWindow)\n\n    postmaster = Postmaster()\n    postmaster.remoteTarget = -> childWindow\n    postmaster.yolo = (txt) ->\n      \"heyy #{txt}\"\n    postmaster.invokeRemote \"invokeRemote\", \"yolo\", \"cool\"\n    .then (result) ->\n      assert.equal result, \"heyy cool\"\n    .then ->\n      done()\n    , (error) ->\n      done(error)\n    .then ->\n      iframe.remove()\n\n  it \"should work with web workers\", (done) ->\n    blob = new Blob [scriptContent()]\n    jsUrl = URL.createObjectURL(blob)\n\n    worker = new Worker(jsUrl)\n\n    base =\n      remoteTarget: -> worker\n      receiver: -> worker\n\n    postmaster = Postmaster({}, base)\n    postmaster.invokeRemote \"echo\", 17\n    .then (result) ->\n      assert.equal result, 17\n    .then ->\n      done()\n    , (error) ->\n      done(error)\n    .then ->\n      worker.terminate()\n\n  it \"should fail quickly when contacting a window that doesn't support Postmaster\", (done) ->\n    iframe = document.createElement('iframe')\n    document.body.appendChild(iframe)\n\n    childWindow = iframe.contentWindow\n    postmaster = Postmaster()\n    postmaster.remoteTarget = -> childWindow\n    postmaster.invokeRemote \"echo\", 5\n    .catch (e) ->\n      if e.message.match /no ack/i\n        done()\n      else\n        done(1)\n    .then ->\n      iframe.remove()\n",
          "mode": "100644",
          "type": "blob"
        }
      },
      "distribution": {
        "main": {
          "path": "main",
          "content": "\n/*\n\nPostmaster wraps the `postMessage` API with promises.\n */\n\n(function() {\n  var Postmaster, ackTimeout, defaultReceiver,\n    __slice = [].slice;\n\n  defaultReceiver = self;\n\n  ackTimeout = 1000;\n\n  module.exports = Postmaster = function(I, self) {\n    var dominant, pendingResponses, remoteId, send;\n    if (I == null) {\n      I = {};\n    }\n    if (self == null) {\n      self = {};\n    }\n    send = function(data) {\n      var target;\n      target = self.remoteTarget();\n      if ((typeof Worker === \"undefined\" || Worker === null) || target instanceof Worker) {\n        return target.postMessage(data);\n      } else {\n        return target.postMessage(data, \"*\");\n      }\n    };\n    dominant = Postmaster.dominant();\n    if (self.remoteTarget == null) {\n      self.remoteTarget = function() {\n        return dominant;\n      };\n    }\n    if (self.receiver == null) {\n      self.receiver = function() {\n        return defaultReceiver;\n      };\n    }\n    if (self.ackTimeout == null) {\n      self.ackTimeout = function() {\n        return ackTimeout;\n      };\n    }\n    self.receiver().addEventListener(\"message\", function(event) {\n      var data, id, method, params, type, _ref;\n      if (event.source === self.remoteTarget() || !event.source) {\n        data = event.data;\n        type = data.type, method = data.method, params = data.params, id = data.id;\n        switch (type) {\n          case \"ack\":\n            return (_ref = pendingResponses[id]) != null ? _ref.ack = true : void 0;\n          case \"response\":\n            return pendingResponses[id].resolve(data.result);\n          case \"error\":\n            return pendingResponses[id].reject(data.error);\n          case \"message\":\n            send({\n              type: \"ack\",\n              id: id\n            });\n            return Promise.resolve().then(function() {\n              return self[method].apply(self, params);\n            }).then(function(result) {\n              return send({\n                type: \"response\",\n                id: id,\n                result: result\n              });\n            })[\"catch\"](function(error) {\n              var message;\n              if (typeof error === \"string\") {\n                message = error;\n              } else {\n                message = error.message;\n              }\n              return send({\n                type: \"error\",\n                id: id,\n                error: {\n                  message: message,\n                  stack: error.stack\n                }\n              });\n            });\n        }\n      }\n    });\n    pendingResponses = {};\n    remoteId = 0;\n    self.invokeRemote = function() {\n      var id, method, params;\n      method = arguments[0], params = 2 <= arguments.length ? __slice.call(arguments, 1) : [];\n      id = remoteId++;\n      send({\n        type: \"message\",\n        method: method,\n        params: params,\n        id: id\n      });\n      return new Promise(function(resolve, reject) {\n        var ackWait, clear, timeout;\n        clear = function() {\n          clearTimeout(pendingResponses[id].timeout);\n          return delete pendingResponses[id];\n        };\n        ackWait = self.ackTimeout();\n        timeout = setTimeout(function() {\n          var pendingResponse;\n          pendingResponse = pendingResponses[id];\n          if (pendingResponse && !pendingResponse.ack) {\n            clear();\n            return reject(new Error(\"No ack received within \" + ackWait));\n          }\n        }, ackWait);\n        return pendingResponses[id] = {\n          timeout: timeout,\n          resolve: function(result) {\n            clear();\n            return resolve(result);\n          },\n          reject: function(error) {\n            clear();\n            return reject(error);\n          }\n        };\n      });\n    };\n    return self;\n  };\n\n  Postmaster.dominant = function() {\n    if (typeof window !== \"undefined\" && window !== null) {\n      return opener || ((parent !== window) && parent) || void 0;\n    } else {\n      return self;\n    }\n  };\n\n  return Postmaster;\n\n}).call(this);\n",
          "type": "blob"
        },
        "pixie": {
          "path": "pixie",
          "content": "module.exports = {\"version\":\"0.4.0\"};",
          "type": "blob"
        },
        "test/postmaster": {
          "path": "test/postmaster",
          "content": "(function() {\n  var Postmaster, initWindow, scriptContent;\n\n  Postmaster = require(\"../main\");\n\n  scriptContent = function() {\n    var fn;\n    fn = function() {\n      var pm;\n      pm = Postmaster();\n      pm.echo = function(value) {\n        return value;\n      };\n      pm.throws = function() {\n        throw new Error(\"This always throws\");\n      };\n      return pm.promiseFail = function() {\n        return Promise.reject(new Error(\"This is a failed promise\"));\n      };\n    };\n    return \"var module = {};\\nPostmaster = \" + PACKAGE.distribution.main.content + \";\\n(\" + (fn.toString()) + \")();\";\n  };\n\n  initWindow = function(targetWindow) {\n    return targetWindow.document.write(\"<script>\" + (scriptContent()) + \"<\\/script>\");\n  };\n\n  describe(\"Postmaster\", function() {\n    it(\"should work with openened windows\", function(done) {\n      var childWindow, postmaster;\n      childWindow = open(\"\", null, \"width=200,height=200\");\n      initWindow(childWindow);\n      postmaster = Postmaster();\n      postmaster.remoteTarget = function() {\n        return childWindow;\n      };\n      return postmaster.invokeRemote(\"echo\", 5).then(function(result) {\n        return assert.equal(result, 5);\n      }).then(function() {\n        return done();\n      }, function(error) {\n        return done(error);\n      }).then(function() {\n        return childWindow.close();\n      });\n    });\n    it(\"should work with iframes\", function(done) {\n      var childWindow, iframe, postmaster;\n      iframe = document.createElement('iframe');\n      document.body.appendChild(iframe);\n      childWindow = iframe.contentWindow;\n      initWindow(childWindow);\n      postmaster = Postmaster();\n      postmaster.remoteTarget = function() {\n        return childWindow;\n      };\n      return postmaster.invokeRemote(\"echo\", 17).then(function(result) {\n        return assert.equal(result, 17);\n      }).then(function() {\n        return done();\n      }, function(error) {\n        return done(error);\n      }).then(function() {\n        return iframe.remove();\n      });\n    });\n    it(\"should handle the remote call throwing errors\", function(done) {\n      var childWindow, iframe, postmaster;\n      iframe = document.createElement('iframe');\n      document.body.appendChild(iframe);\n      childWindow = iframe.contentWindow;\n      initWindow(childWindow);\n      postmaster = Postmaster();\n      postmaster.remoteTarget = function() {\n        return childWindow;\n      };\n      return postmaster.invokeRemote(\"throws\")[\"catch\"](function(error) {\n        return done();\n      }).then(function() {\n        return iframe.remove();\n      });\n    });\n    it(\"should handle the remote call returning failed promises\", function(done) {\n      var childWindow, iframe, postmaster;\n      iframe = document.createElement('iframe');\n      document.body.appendChild(iframe);\n      childWindow = iframe.contentWindow;\n      initWindow(childWindow);\n      postmaster = Postmaster();\n      postmaster.remoteTarget = function() {\n        return childWindow;\n      };\n      return postmaster.invokeRemote(\"promiseFail\")[\"catch\"](function(error) {\n        return done();\n      }).then(function() {\n        return iframe.remove();\n      });\n    });\n    it(\"should be able to go around the world\", function(done) {\n      var childWindow, iframe, postmaster;\n      iframe = document.createElement('iframe');\n      document.body.appendChild(iframe);\n      childWindow = iframe.contentWindow;\n      initWindow(childWindow);\n      postmaster = Postmaster();\n      postmaster.remoteTarget = function() {\n        return childWindow;\n      };\n      postmaster.yolo = function(txt) {\n        return \"heyy \" + txt;\n      };\n      return postmaster.invokeRemote(\"invokeRemote\", \"yolo\", \"cool\").then(function(result) {\n        return assert.equal(result, \"heyy cool\");\n      }).then(function() {\n        return done();\n      }, function(error) {\n        return done(error);\n      }).then(function() {\n        return iframe.remove();\n      });\n    });\n    it(\"should work with web workers\", function(done) {\n      var base, blob, jsUrl, postmaster, worker;\n      blob = new Blob([scriptContent()]);\n      jsUrl = URL.createObjectURL(blob);\n      worker = new Worker(jsUrl);\n      base = {\n        remoteTarget: function() {\n          return worker;\n        },\n        receiver: function() {\n          return worker;\n        }\n      };\n      postmaster = Postmaster({}, base);\n      return postmaster.invokeRemote(\"echo\", 17).then(function(result) {\n        return assert.equal(result, 17);\n      }).then(function() {\n        return done();\n      }, function(error) {\n        return done(error);\n      }).then(function() {\n        return worker.terminate();\n      });\n    });\n    return it(\"should fail quickly when contacting a window that doesn't support Postmaster\", function(done) {\n      var childWindow, iframe, postmaster;\n      iframe = document.createElement('iframe');\n      document.body.appendChild(iframe);\n      childWindow = iframe.contentWindow;\n      postmaster = Postmaster();\n      postmaster.remoteTarget = function() {\n        return childWindow;\n      };\n      return postmaster.invokeRemote(\"echo\", 5)[\"catch\"](function(e) {\n        if (e.message.match(/no ack/i)) {\n          return done();\n        } else {\n          return done(1);\n        }\n      }).then(function() {\n        return iframe.remove();\n      });\n    });\n  });\n\n}).call(this);\n",
          "type": "blob"
        }
      },
      "progenitor": {
        "url": "https://danielx.net/editor/"
      },
      "version": "0.4.0",
      "entryPoint": "main",
      "repository": {
        "branch": "master",
        "default_branch": "master",
        "full_name": "distri/postmaster",
        "homepage": null,
        "description": "Send and receive postMessage commands.",
        "html_url": "https://github.com/distri/postmaster",
        "url": "https://api.github.com/repos/distri/postmaster",
        "publishBranch": "gh-pages"
      },
      "dependencies": {}
    }
  }
}